//@version=4

study("MJ - Session Plots", overlay=true)

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1
COLOR_GREEN = #4caf50
COLOR_ROYAL_BLUE = #1848cc
COLOR_TURQUOISE = #00897b
COLOR_PEACH = #e57373

//////////////////////////////////////////////////////////////////
// 
// ==== INPUTS ==== 
// 
//////////////////////////////////////////////////////////////////

groupPlotSwitches = 'Plot Switches'
groupColors = 'Colors'
groupTimeRanges = 'Time Ranges'
groupLinePlot='Line Plot'
groupMarkers='Markers'

// tooltips

string TT_PR = "Final time to which the High and Low of the session will be held"
string TT_TZ = "Offsets all time inputs together to help align to preferred timezone"
string TT_LB = "The number of days back to plot the session levels"

// switches

plotLondonOpenActive = input(false, 'Plot - London Open', group=groupPlotSwitches)
plotNyOpenActive = input(false, 'Plot - NY Open', group=groupPlotSwitches)
plotDailyOpenActive = input(true, 'Plot - Daily Open', group=groupPlotSwitches)
plotMt4DailyOpenActive = input(false, 'Plot - MT4 Daily Open', group=groupPlotSwitches)

// colors

dailyOpenColor = input(color.new(#2962ff, 20), 'Daily Open Color', input.color, group=groupColors)
mt4DailyOpenColor = input(color.new(#2962ff, 20), 'MT4 Daily Open Color', input.color, group=groupColors)
londonColor = input(#ff851a, 'Master - London', input.color, group=groupColors)
nyColor = input(#880e4f, 'Master - New York', input.color, group=groupColors)

// line plot

londonOpenPlotStyle = input(plot.style_stepline, 'Plot Style - London Open', group=groupLinePlot, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
nyOpenPlotStyle = input(plot.style_stepline, 'Plot Style - NY Open', group=groupLinePlot, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
dailyOpenPlotStyle = input(plot.style_stepline, 'Plot Style - Daily Open', group=groupLinePlot, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
mt4DailyOpenPlotStyle = input(plot.style_circles, 'Plot Style - MT4 Daily Open', group=groupLinePlot, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])

maxTimeframeForLinesPlot = input(title='Max Timeframe', defval=15, maxval=240, minval=1, group=groupLinePlot)
lineWidth = input(2, 'Line Width', group=groupLinePlot, options=[1,2,3,4])

// time ranges

londonTimeRange = input('0800-1630:23456', 'London Session Time', group=groupTimeRanges, type=input.session)
nyTimeRange = input('1300-2100:23456', 'New York Session Time', group=groupTimeRanges, type=input.session)
dailyOpenTimeRange = input('0000-0015:1234567', 'Daily Open Time', group=groupTimeRanges, type=input.session)
mt4DailyOpenTimeRange = input('2200-2215:1234567', 'MT4 Daily Open Time', group=groupTimeRanges, type=input.session)

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_captureSessionLevels(timeRange) => 
    _inSession = _isInSession(timeRange)
    _inHolding = not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := max(high, _sessionHigh)
            _sessionLow  := min(low, _sessionLow)

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

/////////////////////////////////////////////////////////
// 
// --- LINE PLOTS ---
// 
/////////////////////////////////////////////////////////

isValidTimeframeToPlotLines = timeframe.multiplier <= maxTimeframeForLinesPlot

[londonHigh, londonLow, londonOpen] = _captureSessionLevels(londonTimeRange)
[nyHigh, nyLow, nyOpen] = _captureSessionLevels(nyTimeRange)
[mt4High, mt4Low, mt4Open] = _captureSessionLevels(mt4DailyOpenTimeRange)
[dailyHigh, dailyLow, dailyOpen] = _captureSessionLevels(dailyOpenTimeRange)

londonPlotOpen  = plot(
      plotLondonOpenActive and isValidTimeframeToPlotLines and _isInSession(londonTimeRange) ? londonOpen : na,  
      "London Open",  
      _isInSession(londonTimeRange) ? londonColor : na,  
      lineWidth, 
      londonOpenPlotStyle)

nyPlotOpen  = plot(
      plotNyOpenActive and isValidTimeframeToPlotLines and _isInSession(nyTimeRange) ? nyOpen : na,  
      "New York Open",  
      _isInSession(nyTimeRange) ? nyColor : na,  
      lineWidth, 
      nyOpenPlotStyle)

dailyOpenPlot  = plot(
     plotDailyOpenActive and isValidTimeframeToPlotLines ? dailyOpen : na,  
     "Daily Open",  
     plotDailyOpenActive ? dailyOpenColor : na,  
     lineWidth, 
     dailyOpenPlotStyle)

mt4DailyOpenPlot  = plot(
     plotMt4DailyOpenActive and isValidTimeframeToPlotLines ? mt4Open : na,  
     "MT4 Daily Open",  
     plotMt4DailyOpenActive ? mt4DailyOpenColor : na,  
     lineWidth, 
     mt4DailyOpenPlotStyle)

/////////////////////////////////////////////////////////////
// 
// --- MARKERS ---
//
/////////////////////////////////////////////////////////////

didCrossMT4DailyOpen = cross(close, mt4Open)
didCrossDailyOpen = cross(close, dailyOpen)
didCrossNyOpen = cross(close, nyOpen)
didCrossLondonOpen = cross(close, londonOpen)

markerCrossPlotStyle = input(
     shape.xcross, 
     'Cross Marker Style', 
     options=[shape.xcross, shape.cross, shape.triangleup, shape.triangledown, shape.flag, shape.circle, shape.arrowup, shape.arrowdown, shape.labelup, shape.labeldown, shape.square, shape.diamond], 
     group=groupMarkers)

markerCrossPlotLocation = input(
     location.bottom, 
     'Cross Marker Location', 
     options=[location.abovebar, location.belowbar, location.top, location.bottom, location.absolute], 
     group=groupMarkers)

markerOpacity = input(10, 'Marker Shape Opacity', minval=0, maxval=100, group=groupMarkers)
markerTextOpacity = input(0, 'Marker Text Opacity', minval=0, maxval=100, group=groupMarkers)
markerShapeSize = size.small // must be constant or compiler will complain

markerTextColorSameAsMarkerColor = input(false, 'Text Color Same As Marker Color?', group=groupMarkers)
showCrossMarkerMt4Open = input(false, 'Show Cross Marker - MT4 Daily Open', group=groupMarkers)
showCrossMarkerDailyOpen = input(false, 'Show Cross Marker - Daily Open', group=groupMarkers)
showCrossMarkerNyOpen = input(false, 'Show Cross Marker - NY Open', group=groupMarkers)
showCrossMarkerLondonOpen = input(false, 'Show Cross Marker - London Open', group=groupMarkers)

_markerTextColor(baseColor) => color.new(markerTextColorSameAsMarkerColor ? baseColor : color.white, markerTextOpacity)

plotshape(
     series=showCrossMarkerMt4Open ? didCrossMT4DailyOpen : na, 
     text='MT4',
     title='Cross - MT4 Daily Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(mt4DailyOpenColor, markerOpacity),
     textcolor=_markerTextColor(mt4DailyOpenColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerDailyOpen ? didCrossDailyOpen : na, 
     text='D',
     title='Cross - Daily Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(dailyOpenColor, markerOpacity),
     textcolor=_markerTextColor(dailyOpenColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerNyOpen ? didCrossNyOpen : na, 
     text='NY',
     title='Cross - NY Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(nyColor, markerOpacity),
     textcolor=_markerTextColor(nyColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerLondonOpen ? didCrossLondonOpen : na, 
     text='L',
     title='Cross - London', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(londonColor, markerOpacity),
     textcolor=_markerTextColor(londonColor),
     size=markerShapeSize)

/////////////////////////////////////////////////////////////
// 
// --- ALERTS ---
//
/////////////////////////////////////////////////////////////

alertcondition(didCrossMT4DailyOpen, title='Price x MT4 Daily Open', message='{{ticker}} Price x MT4 Daily Open')
alertcondition(didCrossDailyOpen, title='Price x Daily Open', message='{{ticker}} Price x Daily Open')
alertcondition(didCrossNyOpen, title='Price x NY Open', message='{{ticker}} Price x NY Open')
alertcondition(didCrossLondonOpen, title='Price x London Open', message='{{ticker}} Price x London Open')     
