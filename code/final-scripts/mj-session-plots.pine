//@version=4

study("MJ - Session Plots", overlay=true)

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1
COLOR_GREEN = #4caf50
COLOR_ROYAL_BLUE = #1848cc
COLOR_TURQUOISE = #00897b
COLOR_PEACH = #e57373

//////////////////////////////////////////////////////////////////
// 
// ==== INPUTS ==== 
// 
//////////////////////////////////////////////////////////////////

groupSwitches='Switches'
groupLineWidth='Line Width'
groupPlotStyle='Plot Style'
groupColors = 'Colors'
groupTimeRanges = 'Time Ranges'
groupMaxTF = 'Max Timeframe'
groupMarkers='Markers'

// tooltips

string TT_PR = "Final time to which the High and Low of the session will be held"
string TT_TZ = "Offsets all time inputs together to help align to preferred timezone"
string TT_LB = "The number of days back to plot the session levels"

// switches

plotAsiaOpenActive = input(true, 'Plot - Asia Open', group=groupSwitches)
plotLondonOpenActive = input(true, 'Plot - London Open', group=groupSwitches)
plotNyOpenActive = input(true, 'Plot - NY Open', group=groupSwitches)
plotDailyOpenActive = input(true, 'Plot - Daily Open', group=groupSwitches)

// line width

lineWidthAsiaOpen = input(2, 'Line Width - Asia Open', group=groupLineWidth, options=[1,2,3,4])
lineWidthLondonOpen = input(2, 'Line Width - London Open', group=groupLineWidth, options=[1,2,3,4])
lineWidthNyOpen = input(2, 'Line Width - NY Open', group=groupLineWidth, options=[1,2,3,4])
lineWidthDailyOpen = input(2, 'Line Width - Daily Open', group=groupLineWidth, options=[1,2,3,4])

// plot style

asiaOpenPlotStyle = input(plot.style_stepline, 'Plot Style - Asia Open', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])
londonOpenPlotStyle = input(plot.style_stepline, 'Plot Style - London Open', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])
nyOpenPlotStyle = input(plot.style_stepline, 'Plot Style - NY Open', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])
dailyOpenPlotStyle = input(plot.style_stepline, 'Plot Style - Daily Open', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])

// colors

// electric green #00e676
// turqoise #00897b

asiaColor = input(color.new(#00e676, 30), 'Asia', input.color, group=groupColors)
dailyOpenColor = input(color.new(#2962ff, 20), 'Daily Open', input.color, group=groupColors)
londonColor = input(color.new(#7e57c2, 20), 'London', input.color, group=groupColors)
nyColor = input(color.new(#880e4f, 20), 'New York', input.color, group=groupColors)

// max timeframe

maxTimeframeAsiaOpen = input(5, 'Max TF - Asia Open', maxval=240, minval=1, group=groupMaxTF)
maxTimeframeLondonOpen = input(5, 'Max TF - London Open', maxval=240, minval=1, group=groupMaxTF)
maxTimeframeNyOpen = input(5, 'Max TF - NY Open', maxval=240, minval=1, group=groupMaxTF)
maxTimeframeDailyOpen = input(15, 'Max TF - Daily Open', maxval=240, minval=1, group=groupMaxTF)

// time ranges

asiaOpenTimeRange = input('2100-2045:1234567', 'Asia Open', group=groupTimeRanges, type=input.session)
londonTimeRange = input('0800-1630:23456', 'London Open', group=groupTimeRanges, type=input.session)
nyTimeRange = input('1300-2100:23456', 'New York Open', group=groupTimeRanges, type=input.session)
dailyOpenTimeRange = input('0000-0015:1234567', 'Daily Open', group=groupTimeRanges, type=input.session)

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_captureSessionLevels(timeRange, holdActive) => 
    _inSession = _isInSession(timeRange)
    _inHolding = holdActive and not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := max(high, _sessionHigh)
            _sessionLow  := min(low, _sessionLow)

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

/////////////////////////////////////////////////////////
// 
// --- LINE PLOTS ---
// 
/////////////////////////////////////////////////////////

_isValidTF(maxTF) => timeframe.isminutes and timeframe.multiplier <= maxTF

[asiaHigh, asiaLow, asiaOpen] = _captureSessionLevels(asiaOpenTimeRange, false)
[londonHigh, londonLow, londonOpen] = _captureSessionLevels(londonTimeRange, false)
[nyHigh, nyLow, nyOpen] = _captureSessionLevels(nyTimeRange, false)
[dailyHigh, dailyLow, dailyOpen] = _captureSessionLevels(dailyOpenTimeRange, true)

asiaOpenPlot  = plot(
     plotAsiaOpenActive and _isValidTF(maxTimeframeAsiaOpen) and _isInSession(asiaOpenTimeRange) ? asiaOpen : na,  
     "Asia Open",  
     plotAsiaOpenActive and _isInSession(asiaOpenTimeRange) ? asiaColor : na,  
     lineWidthAsiaOpen, 
     asiaOpenPlotStyle)

londonPlotOpen  = plot(
      plotLondonOpenActive and _isValidTF(maxTimeframeLondonOpen) and _isInSession(londonTimeRange) ? londonOpen : na,  
      "London Open",  
      _isInSession(londonTimeRange) ? londonColor : na,  
      lineWidthLondonOpen, 
      londonOpenPlotStyle)

nyPlotOpen  = plot(
      plotNyOpenActive and _isValidTF(maxTimeframeNyOpen) and _isInSession(nyTimeRange) ? nyOpen : na,  
      "New York Open",  
      _isInSession(nyTimeRange) ? nyColor : na,  
      lineWidthNyOpen, 
      nyOpenPlotStyle)

dailyOpenPlot  = plot(
     plotDailyOpenActive and _isValidTF(maxTimeframeDailyOpen) ? dailyOpen : na,  
     "Daily Open",  
     plotDailyOpenActive ? dailyOpenColor : na,  
     lineWidthDailyOpen, 
     dailyOpenPlotStyle)

/////////////////////////////////////////////////////////////
// 
// --- MARKERS ---
//
/////////////////////////////////////////////////////////////

didCrossAsiaOpen = cross(close, asiaOpen)
didCrossDailyOpen = cross(close, dailyOpen)
didCrossNyOpen = cross(close, nyOpen)
didCrossLondonOpen = cross(close, londonOpen)

markerCrossPlotStyle = input(
     shape.xcross, 
     'Cross Marker Style', 
     options=[shape.xcross, shape.cross, shape.triangleup, shape.triangledown, shape.flag, shape.circle, shape.arrowup, shape.arrowdown, shape.labelup, shape.labeldown, shape.square, shape.diamond], 
     group=groupMarkers)

markerCrossPlotLocation = input(
     location.bottom, 
     'Cross Marker Location', 
     options=[location.abovebar, location.belowbar, location.top, location.bottom, location.absolute], 
     group=groupMarkers)

markerOpacity = input(10, 'Marker Shape Opacity', minval=0, maxval=100, group=groupMarkers)
markerTextOpacity = input(0, 'Marker Text Opacity', minval=0, maxval=100, group=groupMarkers)
markerShapeSize = size.small // must be constant or compiler will complain

markerTextColorSameAsMarkerColor = input(false, 'Text Color Same As Marker Color?', group=groupMarkers)
showCrossMarkerAsiaOpen = input(false, 'Show Cross Marker - Asia Open', group=groupMarkers)
showCrossMarkerDailyOpen = input(false, 'Show Cross Marker - Daily Open', group=groupMarkers)
showCrossMarkerNyOpen = input(false, 'Show Cross Marker - NY Open', group=groupMarkers)
showCrossMarkerLondonOpen = input(false, 'Show Cross Marker - London Open', group=groupMarkers)

_markerTextColor(baseColor) => color.new(markerTextColorSameAsMarkerColor ? baseColor : color.white, markerTextOpacity)

plotshape(
     series=showCrossMarkerAsiaOpen ? didCrossAsiaOpen : na, 
     text='A',
     title='Cross - Asia Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(asiaColor, markerOpacity),
     textcolor=_markerTextColor(asiaColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerDailyOpen ? didCrossDailyOpen : na, 
     text='D',
     title='Cross - Daily Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(dailyOpenColor, markerOpacity),
     textcolor=_markerTextColor(dailyOpenColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerNyOpen ? didCrossNyOpen : na, 
     text='NY',
     title='Cross - NY Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(nyColor, markerOpacity),
     textcolor=_markerTextColor(nyColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerLondonOpen ? didCrossLondonOpen : na, 
     text='L',
     title='Cross - London', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(londonColor, markerOpacity),
     textcolor=_markerTextColor(londonColor),
     size=markerShapeSize)

/////////////////////////////////////////////////////////////
// 
// --- ALERTS ---
//
/////////////////////////////////////////////////////////////

alertcondition(didCrossAsiaOpen, title='Price x Asia Open', message='{{ticker}} Price x Asia Open')
alertcondition(didCrossNyOpen, title='Price x NY Open', message='{{ticker}} Price x NY Open')
alertcondition(didCrossLondonOpen, title='Price x London Open', message='{{ticker}} Price x London Open')     
alertcondition(didCrossDailyOpen, title='Price x Daily Open', message='{{ticker}} Price x Daily Open')
