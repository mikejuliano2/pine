//@version=4

study("MJ - Current Hour Range", overlay=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

_print(_text) => var _label = label.new(bar_index, na, _text, xloc.bar_index, yloc.price, color(na), label.style_none, color.gray, size.large, text.align_left), label.set_xy(_label, bar_index, highest(10)[1]), label.set_text(_label, _text)

_getHoursElapsedThis4Hours() => 
    int hoursElapsedThis4Hours = 
          hour == 0 ? 0 :
          hour == 1 ? 1 :
          hour == 2 ? 2 :
          hour == 3 ? 3 : 
          hour == 4 ? 0 :
          hour == 5 ? 1 :
          hour == 6 ? 2 :
          hour == 7 ? 3 :
          hour == 8 ? 0 : 
          hour == 9 ? 1 :
          hour == 10 ? 2 :
          hour == 11 ? 3 :
          hour == 12 ? 0 : 
          hour == 13 ? 1 :
          hour == 14 ? 2 :
          hour == 15 ? 3 : 
          hour == 16 ? 0 :
          hour == 17 ? 1 :
          hour == 18 ? 2 :
          hour == 19 ? 3 : 
          hour == 20 ? 0 :
          hour == 21 ? 1 :
          hour == 22 ? 2 :
          hour == 23 ? 3 : 
          0

_getBarsElapsedAndRemainingForCurrent4HourCandle() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsPerHour = 60 / barLengthInMinutes
    int barsPer4Hours = barsPerHour * 4
    
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int hoursElapsedThis4Hours = _getHoursElapsedThis4Hours()

    int barsElapsedThis4Hours = barsElapsedThisHour + (hoursElapsedThis4Hours * barsPerHour)

    int barsRemainingThis4Hours = barsPer4Hours - barsElapsedThis4Hours
    [barsElapsedThis4Hours, barsRemainingThis4Hours]


//////////////////////////////////////////////////////////////////
// 
// ==== CURRENT HOUR RANGE ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils
// -----------------------

// ------------------
// VARIABLES
// ------------------
groupColors = 'Colors'
groupLines = 'Lines'
groupLabels = 'Labels'
groupTime = 'Time'
groupSwitches = 'Switches'

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d

// time
maxTimeframeToShow1HRange = input(15, 'Max timeframe to show 1H Range?', maxval=60, minval=1, group=groupTime)
maxTimeframeToShow4HRange = input(60, 'Max timeframe to show 4H Range?', maxval=60, minval=1, group=groupTime)

// colors
oneHourColor = input(color.new(COLOR_GOLD, 20), '1H Color', group=groupColors)
fourHourColor = input(color.new(COLOR_ORANGE, 20), '4H Color', group=groupColors)
labelTextColor = input(color.new(color.black, 0), 'Label Text Color', group=groupColors)

// lines
show1HLines = input(true, 'Show 1H Lines?', group=groupLines)
show4HLines = input(true, 'Show 4H Lines?', group=groupLines)
oneHourLineWidth = input(1, '1H Line Width', options=[1,2,3,4], group=groupLines)
oneHourLineStyle = input(line.style_dotted, '1H Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLines)
oneHourLineExtend = extend.none
fourHourLineWidth = input(1, '4H Line Width', options=[1,2,3,4], group=groupLines)
fourHourLineStyle = input(line.style_dotted, '4H Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLines)
fourHourLineExtend = extend.none

// labels
show1HLabels = input(true, 'Show 1H Labels?', group=groupLabels)
show4HLabels = input(true, 'Show 4H Labels?', group=groupLabels)
showValueInLabel = input(false, 'Show Values in Label?', group=groupLabels)
openLabelStyle = input(label.style_cross, 'Open Label Style', group=groupLabels, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
highLabelStyle = input(label.style_triangledown, 'High Label Style', group=groupLabels, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
lowLabelStyle = input(label.style_triangleup, 'Low Label Style', group=groupLabels, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
labelSize = input(size.tiny, 'Label Size', group=groupLabels, options=[size.auto, size.tiny, size.small, size.normal, size.large])
labelRightJustified = input(true, 'Label Right-Justified?', group=groupLabels)

// ------------------
// FUNCTIONS
// ------------------

var line hourlyHighLineId = na
var line hourlyLowLineId = na
var line hourlyOpenLineId = na

_isValidTimeframeToShowCurrentHourRange() => timeframe.multiplier <= maxTimeframeToShow1HRange

_getHighAndLow (fromIndex, toIndex) =>
    float pT = 0
    float pB = high

    for i = fromIndex to toIndex
        pT := max(high[i], pT)
        pB := min(low[i], pB)

    [pT, pB]

_drawHourlyRangeHorizontalLine(x1, x2, y, _color, _width, _style) => 
    _lineId = line.new(x1, y, x2, y, xloc.bar_time, oneHourLineExtend)
    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)
    _lineId

_drawLabel(x, y, text, textColor, _style, _size, _color) => 
    labelId = label.new(
      x, 
      y, 
      text, 
      textcolor=textColor, 
      style=_style, 
      size=_size, 
      xloc=xloc.bar_time, 
      color=_color)
    label.delete(labelId[1])

_plotRangeByBarsElapsedAndRemaining(linesArray, barsElapsed, barsRemaining, _color, _width, _style, maxTimeframe, showLines, showLabels) => 
    isNew = array.size(linesArray) == 0

    [_high, _low] = _getHighAndLow(0, barsElapsed)
    _open = open[barsElapsed]
    
    x1 = time[barsElapsed]
    x2 = _getFutureTimeNBarsFromNow(barsRemaining)

    highValueDisplay = ': ' + tostring(_high[0])
    highLabel = 'H' + (showValueInLabel ? highValueDisplay : '')
    
    lowValueDisplay = ': ' +  tostring(_low[0])
    lowLabel = 'L' + (showValueInLabel ? lowValueDisplay : '')
    
    openValueDisplay = ': ' + tostring(_open[0])
    openLabel = 'O' + (showValueInLabel ? openValueDisplay : '')

    isValidTimeframe = timeframe.multiplier <= maxTimeframe
    
    if not isValidTimeframe
        x1 := na
        x2 := na
        highLabel := na
        lowLabel := na
        openLabel := na
        lowValueDisplay := na
        openValueDisplay := na
        highValueDisplay := na


    _lineColor = showLines ? _color : color.new(_color, 100)
    
    // draw lines
    
    _highLineId = _drawHourlyRangeHorizontalLine(x1, x2, _high, _lineColor, _width, _style)
    _lowLineId = _drawHourlyRangeHorizontalLine(x1, x2, _low, _lineColor, _width, _style)
    _openLineId = _drawHourlyRangeHorizontalLine(x1, x2, _open, _lineColor, _width, _style)
    
    array.push(linesArray, _highLineId)
    array.push(linesArray, _lowLineId)
    array.push(linesArray, _openLineId)

    // draw labels
    
    if showLabels
        labelPosition = labelRightJustified ? x2 : x1
        _drawLabel(labelPosition, _high, highLabel, labelTextColor, highLabelStyle, labelSize, _color)
        _drawLabel(labelPosition, _low, lowLabel, labelTextColor, lowLabelStyle, labelSize, _color)
        _drawLabel(labelPosition, _open, openLabel, labelTextColor, openLabelStyle, labelSize, _color)

    // cleanup
    
    if not isNew 
        lineToDelete = array.shift(linesArray)
        line.delete(lineToDelete)
        lineToDelete := array.shift(linesArray)
        line.delete(lineToDelete)
        lineToDelete := array.shift(linesArray)
        line.delete(lineToDelete)
        // labelToDelete = array.shift(labels)
        // label.delete(labelToDelete)

    [_highLineId, _lowLineId, _openLineId]

///////////////////////////////////
// 
// --- EXECUTE ---
// 
///////////////////////////////////

var line[] _fourHourLines = array.new_line(0)
var line[] _oneHourLines = array.new_line(0)

[fourHourElapsed, fourHourRemaining] = _getBarsElapsedAndRemainingForCurrent4HourCandle()
[oneHourElapsed, oneHourRemaining] = _getBarsElapsedAndRemainingForCurrentHour()


_plotRangeByBarsElapsedAndRemaining(
      _oneHourLines,
      oneHourElapsed,
      oneHourRemaining,
      oneHourColor, 
      oneHourLineWidth, 
      oneHourLineStyle,
      maxTimeframeToShow1HRange,
      show1HLines,
      show1HLabels)

_plotRangeByBarsElapsedAndRemaining(
      _fourHourLines,
      fourHourElapsed,
      fourHourRemaining,
      fourHourColor, 
      fourHourLineWidth, 
      fourHourLineStyle,
      maxTimeframeToShow4HRange,
      show4HLines,
      show4HLabels)
