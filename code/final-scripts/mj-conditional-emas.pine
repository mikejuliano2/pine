//@version=4

study("MJ - Conditional EMAs", overlay=true)

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1

//////////////////////////////////////////////////////////////////
// 
// ==== CONDITIONAL EMAs ==== 
// 
//////////////////////////////////////////////////////////////////

groupMarkers = 'Cross Markers'
groupLabels = 'Labels'
groupLines = 'Lines'
groupColors = 'Colors'
groupSwitches = 'Switches'

// --------------------------
// Colors
// --------------------------

ema5Color = input(color.new(COLOR_YELLOW, 20), '5 EMA Color', group=groupColors)
ema13Color = input(color.new(#b71c1c, 20), '13 EMA Color', group=groupColors)
ema50Color = input(color.new(COLOR_TEAL, 20), '50 EMA Color', group=groupColors)
ema200Color = input(color.new(COLOR_WHITE, 20), '200 EMA Color', group=groupColors)
ema800Color = input(color.new(COLOR_PURPLE, 20), '800 EMA Color', group=groupColors)
ema50CloudColor = input(color.new(#26c6da, 85), '50 EMA Cloud Color', group=groupColors)
emaConditional1hColor = input(color.new(COLOR_ORANGE, 15), 'EMA Conditional 1h Color', group=groupColors)
emaConditional15mColor = input(color.new(COLOR_MAGENTA, 40), 'EMA Conditional 15m Color', group=groupColors)
emaConditional5mColor = input(color.new(COLOR_LIME, 40), 'EMA Conditional 5m Color', group=groupColors)
emaConditional30mColor = input(color.new(COLOR_LIGHT_BLUE, 40), 'EMA Conditional 30m Color', group=groupColors)

// --------------------------
// Switches
// --------------------------

showConditionalEma1hLine = input(true, 'Show Conditional 1h line?', group=groupSwitches)
showConditionalEma15mLine = input(true, 'Show Conditional 15m line?', group=groupSwitches)
showConditionalEma5mLine = input(true, 'Show Conditional 5m line?', group=groupSwitches)
// showConditionalEma30mLine = input(false, 'Show Conditional 30m line?', group=groupSwitches)
showConditionalEma1hLabel = input(true, 'Show Conditional 1h label?', group=groupSwitches)
showConditionalEma15mLabel = input(true, 'Show Conditional 15m label?', group=groupSwitches)
showConditionalEma5mLabel = input(true, 'Show Conditional 5m label?', group=groupSwitches)
showConditionalEma30mLabel = input(true, 'Show Conditional 30m label?', group=groupSwitches)

// --------------------------
// LINES
// --------------------------

lineWidth = input(1, 'EMA Line Width', options=[1,2,3,4], group=groupLines)
lineOpacity = input(0, 'Line Opacity', maxval=100, minval=0, group=groupLines)

// --------------------------
// Labels
// --------------------------
showLabelText = input(false, 'Show Label Text?', group=groupLabels)
labelTextColorSameAsMarker = input(false, 'Text Color Same as Label?', group=groupLabels)
labelOffsetStandard = input(8, 'Offset - Standard (in bars)', group=groupLabels)
labelOffsetConditional = input(
     defval=16, 
     title='Offset - Conditional (in bars)', 
     tooltip='Only applicable when showLabelText is true.  If showLabelText is false, this will be set to labelOffsetStandard.', 
     group=groupLabels)
labelOpacity = input(30, 'Label Opacity', group=groupLabels)
labelStyle = input(label.style_circle, 'Label Style', options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle], group=groupLabels)
labelSize = input(size.auto, 'Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupLabels)

_getConditionalValues() => 
    if timeframe.period == '1'
        [3000, 750, 250, 1500]
    else if timeframe.period == '5'
        [600, 150, 0, 300]
    else if timeframe.period == '30'
        [100, 0, 0, 0]
    else 
        [0, 0, 0, 0]

_getConditionalLabels() => 
    if timeframe.period == '1'
        ['3000 => 50EMA on 1h', '750 => 50EMA on 15m', '250 => 50EMA on 5m', '1500 => 50EMA on 30m']
    else if timeframe.period == '5'
        ['600 => 50EMA on 1h', '150 => 50EMA on 15m', '', '1200 => 50EMA on 30m']
    else if timeframe.period == '30'
        ['100 => 50EMA on 1h', '', '', '']
    else 
        ['', '', '', '']

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_drawLabel(y, text, Color, textColor, offset) => 
    x = _getFutureTimeNBarsFromNow(offset)

    if barstate.islast
        _color = color.new(Color, labelOpacity)
        _textColor = labelStyle == label.style_none ? color.new(Color, 0) : textColor // If no label style, use the same color as the line
        _text = showLabelText ? text : na
        y ? label.new(
             x=x, 
             y=y, 
             text=_text, 
             style=labelStyle, 
             textcolor=_textColor, 
             color=_color, 
             size=labelSize, 
             tooltip=text,
             xloc=xloc.bar_time) : na

// -----------------
// Get Values
// -----------------

_getEmaVal(length) => length > 0 ? ema(close, length) : na

ema5 = ema(close, 5)
ema13 = ema(close, 13)
ema50 = ema(close, 50)
ema200 = ema(close, 200)
ema800 = ema(close, 800)

[_1hVal, _15mVal, _5mVal, _30mVal] = _getConditionalValues()
emaConditional1h = _getEmaVal(_1hVal)
emaConditional15m = _getEmaVal(_15mVal)
emaConditional5m = _getEmaVal(_5mVal)
// emaConditional30m = _getEmaVal(_30mVal)

[emaConditional1hText, emaConditional15mText, emaConditional5mText, emaConditional30mText] = _getConditionalLabels()

// -----------------
// Plot EMAs
// -----------------

_lineColor(_color) => color.new(_color, lineOpacity)

// standard EMAs

plot(ema5, color=_lineColor(ema5Color), linewidth=lineWidth, title="EMA 5")
plot(ema13, color=_lineColor(ema13Color), linewidth=lineWidth, title="EMA 13")
plot(ema50, color=_lineColor(ema50Color), linewidth=lineWidth, title="EMA 50")
plot(ema200, color=_lineColor(ema200Color), linewidth=lineWidth, title="EMA 200")
plot(ema800, color=_lineColor(ema800Color), linewidth=lineWidth, title="EMA 800")

// conditional EMAs

plot(
     showConditionalEma1hLine ? emaConditional1h : na, 
     color=_lineColor(emaConditional1hColor), 
     linewidth=lineWidth, 
     title='EMA Conditional 1h')

plot(showConditionalEma15mLine ? emaConditional15m : na, 
     color=_lineColor(emaConditional15mColor), 
     linewidth=lineWidth, 
     title='EMA Conditional 15m')

plot(
     showConditionalEma5mLine ? emaConditional5m : na,
     color=_lineColor(emaConditional5mColor), 
     linewidth=lineWidth, 
     title='EMA Conditional 5m')

// plot(showConditionalEma30mLine ? emaConditional30m : na, 
//      color=emaConditional30mColor, 
//      linewidth=lineWidth, 
//      title='EMA Conditional 30m')

// ----------------------------
// Plot 50 EMA Cloud
// ----------------------------

cloudSize = stdev(close, 50 * 2) / 4 // 50 because it's for the 50 EMA
cloudPlotUpper = plot(ema50 + cloudSize, '50 EMA Upper Cloud', color=ema50CloudColor, offset=0)
cloudPlotLower = plot(ema50 - cloudSize, '50 EMA Lower Cloud', color=ema50CloudColor, offset=0)
fill(cloudPlotUpper, cloudPlotLower, title='50 EMA Cloud', color=ema50CloudColor)

// ---------------------------
// Draw Labels
// ---------------------------

// standard

label5 = _drawLabel(ema5, '5', ema5Color, color.white, labelOffsetStandard)
label13 = _drawLabel(ema13, '13', ema13Color, color.white, labelOffsetStandard)
label50 = _drawLabel(ema50, '50', ema50Color, color.white, labelOffsetStandard)
label200 = _drawLabel(ema200, '200', ema200Color, color.white, labelOffsetStandard)
label800 = _drawLabel(ema800, '800', ema800Color, color.white, labelOffsetStandard)

// conditional

_conditionalLabelOffset = showLabelText ? labelOffsetConditional : labelOffsetStandard

labelConditional1h = _drawLabel(
     showConditionalEma1hLabel ? emaConditional1h : na, 
     emaConditional1hText, 
     emaConditional1hColor, 
     color.white, 
     _conditionalLabelOffset)

labelConditional15m = _drawLabel(
     showConditionalEma15mLabel ? emaConditional15m : na, 
     emaConditional15mText, 
     emaConditional15mColor, 
     color.white, 
     _conditionalLabelOffset)

labelConditional5m = _drawLabel(
     showConditionalEma5mLabel ? emaConditional5m : na, 
     emaConditional5mText, 
     emaConditional5mColor, 
     color.white, 
     _conditionalLabelOffset)

// labelConditional30m = _drawLabel(
//      showConditionalEma30mLabel ? emaConditional30m : na, 
//      emaConditional30mText, 
//      emaConditional30mColor, 
//      color.white, 
//      _conditionalLabelOffset)

label.delete(label5[1])
label.delete(label13[1])
label.delete(label50[1])
label.delete(label200[1])
label.delete(label800[1])
label.delete(labelConditional1h[1])
label.delete(labelConditional15m[1])
label.delete(labelConditional5m[1])
// label.delete(labelConditional30m[1])

// -----------------
// Cross Markers
// -----------------
// Active
allMarkersActive = input(true, 'Markers Active?', group=groupMarkers)
marker5x13Active = input(true, 'Plot 5/13 Cross?', group=groupMarkers)
marker5x50Active = input(false, 'Plot 5/50 Cross?', group=groupMarkers)
marker13x50Active = input(true, 'Plot 13/50 Cross?', group=groupMarkers)
marker13x200Active = input(false, 'Plot 13/200 Cross?', group=groupMarkers)
marker50x200Active = input(true, 'Plot 50/200 Cross?', group=groupMarkers)
marker50x800Active = input(true, 'Plot 50/800 Cross?', group=groupMarkers)
marker200x800Active = input(true, 'Plot 200/800 Cross?', group=groupMarkers)
// Color
invertMarkerColors = input(true, 'Invert Marker/Text Color?', group=groupMarkers)
markerTextColorDefault = input(color.new(color.white, 0), 'Text Color Default', group=groupMarkers)
markerCrossUpColor = input(color.new(COLOR_LIGHT_BLUE, 0), 'Cross Up Color', group=groupMarkers)
markerCrossDownColor = input(color.new(COLOR_MAGENTA, 0), 'Cross Down Color', group=groupMarkers)
// Opacity
markerOpacity = input(10, 'Marker Opacity', minval=0, maxval=100, group=groupMarkers)
textOpacity = input(0, 'Text Opacity', minval=0, maxval=100, group=groupMarkers)

_getEmaCrossMarkerVisibility(emaOne, emaTwo, markerActive) => 
    didCross = cross(emaOne, emaTwo)
    _return = didCross and markerActive and allMarkersActive

// =====================================
// MARKERS USING PLOTSHAPE
// =====================================

markerCrossPlotStyle = input(shape.xcross, 'Style', options=[shape.xcross, shape.cross, shape.triangleup, shape.triangledown, shape.flag, shape.circle, shape.arrowup, shape.arrowdown, shape.labelup, shape.labeldown, shape.square, shape.diamond], group=groupMarkers)
markerCrossPlotLocation = input(location.top, 'Location', options=[location.abovebar, location.belowbar, location.top, location.bottom, location.absolute], group=groupMarkers)
markerShapeSize = size.small // must be constant or compiler will complain

isVisible5x13 = _getEmaCrossMarkerVisibility(ema5, ema13, marker5x13Active)
isVisible5x50 = _getEmaCrossMarkerVisibility(ema5, ema50, marker5x50Active)
isVisible13x50 = _getEmaCrossMarkerVisibility(ema13, ema50, marker13x50Active)
isVisible13x200 = _getEmaCrossMarkerVisibility(ema13, ema200, marker13x200Active)
isVisible50x200 = _getEmaCrossMarkerVisibility(ema50, ema200, marker50x200Active)
isVisible50x800 = _getEmaCrossMarkerVisibility(ema50, ema800, marker50x800Active)
isVisible200x800 = _getEmaCrossMarkerVisibility(ema200, ema800, marker200x800Active)

// ***************
// Had to deactivate some of these plots to make room for alerts.
// Was getting max outputs (67) reached
// ***************

_markerColor(oneColor, twoColor) => color.new(invertMarkerColors ? twoColor : oneColor, markerOpacity)
_markerTextColor(oneColor, twoColor) => color.new(invertMarkerColors ? oneColor : twoColor, textOpacity)

plotshape(
     series=isVisible5x13, 
     text='5x13',
     title='5x13', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=_markerColor(ema5Color, ema13Color),
     textcolor=_markerTextColor(ema5Color, ema13Color),
     size=markerShapeSize)

plotshape(
     series=isVisible5x50, 
     text='5x50',
     title='5x50', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=_markerColor(ema5Color, ema50Color),
     textcolor=_markerTextColor(ema5Color, ema50Color),
     size=markerShapeSize)

plotshape(
     series=isVisible13x50, 
     text='13x50',
     title='13x50', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=_markerColor(ema13Color, ema50Color),
     textcolor=_markerTextColor(ema13Color, ema50Color),
     size=markerShapeSize)

plotshape(
     series=isVisible13x200, 
     text='13x200',
     title='13x200', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=_markerColor(ema13Color, ema200Color),
     textcolor=_markerTextColor(ema13Color, ema200Color),
     size=markerShapeSize)

plotshape(
     series=isVisible50x200, 
     text='50x200',
     title='50x200', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=_markerColor(ema50Color, ema200Color),
     textcolor=_markerTextColor(ema50Color, ema200Color),
     size=markerShapeSize)

plotshape(
     series=isVisible50x800, 
     text='50x800',
     title='50x800', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=_markerColor(ema50Color, ema800Color),
     textcolor=_markerTextColor(ema50Color, ema800Color),
     size=markerShapeSize)

plotshape(
     series=isVisible200x800, 
     text='200x800',
     title='200x800', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=_markerColor(ema200Color, ema800Color),
     textcolor=_markerTextColor(ema200Color, ema800Color),
     size=markerShapeSize)

/////////////////////////////////////////////////////////////
//
// === Alerts ===
//
/////////////////////////////////////////////////////////////

alertcondition(cross(close, ema5), title='Price x 05', message='{{ticker}} Price x 5 on the {{interval}}')
alertcondition(cross(close, ema13), title='Price x 13', message='{{ticker}} Price x 13 on the {{interval}}')
alertcondition(cross(close, ema50), title='Price x 50', message='{{ticker}} Price x 50 on the {{interval}}')
alertcondition(cross(close, ema200), title='Price x 200', message='{{ticker}} Price x 200 on the {{interval}}')
alertcondition(cross(close, ema800), title='Price x 800', message='{{ticker}} Price x 800 on the {{interval}}')

alertcondition(cross(ema5, ema13), title='EMA Cross 05x13', message='{{ticker}} 5 x 13 on the {{interval}}')
alertcondition(cross(ema5, ema50), title='EMA Cross 05x50', message='{{ticker}} 5 x 50 on the {{interval}}')
alertcondition(cross(ema13, ema50), title='EMA Cross 13x50', message='{{ticker}} 13 x 50 on the {{interval}}')
alertcondition(cross(ema50, ema200), title='EMA Cross 50x200', message='{{ticker}} 50 x 200 on the {{interval}}')