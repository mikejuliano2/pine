//@version=4
study("MJ - M Candles", overlay=true)

//////////////////////////////////////////////////////////
// 
// === INPUTS ===
// 
//////////////////////////////////////////////////////////

groupTime = 'Time'
groupColors = 'Colors'
groupStyle = 'Style'

useAutoResolution = input(true, 'Use Auto Resolution?', group=groupTime, tooltip='Auto-adjust the higher timeframe resolution based on the current timeframe')
autoResolutionFor1MinTF = input('60', 'Auto Resolution - 1m', group=groupTime, options=['15', '30', '60', '120', '240'], tooltip='Only applicable if on 1m Timeframe and auto-resolution is on')
fixedResolution = input("60", 'Fixed Resolution', type=input.resolution, group=groupTime, tooltip='Only Relevant if auto-resolution is off')
maxTimeframe = input(60, 'Max Timeframe', group=groupTime, minval=1, maxval=240)

usePvsraColor = input(true, 'Use PVSRA Candle Color', group=groupStyle)
showBorder = input(true, 'Show Border', group=groupStyle)
fillOpacity = input(70, 'Opacity - Fill', minval=0, maxval=100, group=groupStyle)
borderOpacity = input(10, 'Opacity - Border', minval=0, maxval=100, group=groupStyle)
wickWidthInBars = input(2.0, title="Wick width in bars", step=0.1, group=groupStyle)

// COLORS

climaxVolBullColor = input(color.lime, 'Climax Bull Color', group=groupColors)
climaxVolBearColor = input(color.red, 'Climax Bear Color', group=groupColors)
aboveAvgVolBullColor = input(color.blue, 'Above Average Volume Bull Color', group=groupColors)
aboveAvgVolBearColor = input(color.fuchsia, 'Above Average Volume Bear Color', group=groupColors)
standardVolBullColor = input(#999999, 'Standard Volume Bull Color', group=groupColors)
standardVolBearColor = input(#4d4d4d, 'Standard Volume Bear Color', group=groupColors)

_security(expression, _resolution) => 
     security(syminfo.tickerid, _resolution, expression, barmerge.gaps_off, barmerge.lookahead_on)

//////////////////////////////////////////////////////////
// 
// === PVSRA Color ===
// 
//////////////////////////////////////////////////////////

_getBarColorByVolWeight(volWeight, _open, _close) => 
    if usePvsraColor
        if _close > _open
            volWeight == 1 
             ? climaxVolBullColor 
             : volWeight == 2 
               ? aboveAvgVolBullColor 
               : standardVolBullColor
        else
            volWeight == 1 
             ? climaxVolBearColor 
             : volWeight == 2 
               ? aboveAvgVolBearColor 
               : standardVolBearColor
    else
        _close > _open ? climaxVolBullColor : climaxVolBearColor

_getVolumeWeight(_open, _high, _low, _close, _vol) => 
    // The math below matches MT4 PVSRA indicator source
    avgVol = sma(_vol, 10)
    volWeightedPriceSpread = _vol * (_high - _low)
    highestVolWeightedPriceSpread = highest(volWeightedPriceSpread, 10)

    isClimaxVolume = _vol >= (avgVol * 2) or volWeightedPriceSpread >= highestVolWeightedPriceSpread
    isAboveAvgVolume = _vol >= avgVol * 1.5 and not isClimaxVolume
    volWeight = isClimaxVolume ? 1 : isAboveAvgVolume ? 2 : 0

_getColorByValues(_open, _high, _low, _close, _volume) =>
    volWeight = _getVolumeWeight(_open, _high, _low, _close, _volume)
    barColor = _getBarColorByVolWeight(volWeight, _open, _close)

_getColorAtResolution(_resolution) => 
    _color = _security(
         _getColorByValues(open, high, low, close, volume), 
         _resolution
         )    


//////////////////////////////////////////////////////////
// 
// === CALCULATIONS ===
// 
//////////////////////////////////////////////////////////

wickWidth = wickWidthInBars * timeframe.multiplier /  2
intervalValue = timeframe.isintraday ? timeframe.multiplier : timeframe.multiplier * 1440

_getAutoResolution(_interval) =>
    _interval == 1 
      ? autoResolutionFor1MinTF 
      : _interval <= 5  
         ? '60' 
         : _interval <= 60 
          ? '240' 
          : '1D'

_resolution = useAutoResolution ? _getAutoResolution(intervalValue) : fixedResolution     
_interval = security(syminfo.tickerid, _resolution, intervalValue)



[_open, _high, _low, _close, _vol] = security(syminfo.tickerid, _resolution, [open, high, low, close, volume], lookahead=true)
_time = time(_resolution)
_timeClose = time_close(_resolution)
_wickTime = (_time + _timeClose) / 2

isBullish = _close >= _open
bodyMax = isBullish ? _close : _open
bodyMin = isBullish ? _open : _close


//////////////////////////////////////////////////////////
// 
// === PLOT ===
// 
//////////////////////////////////////////////////////////

_color = _getColorAtResolution(_resolution)
borderColor = color.new(_color, borderOpacity)
fillColor = color.new(_color, fillOpacity)
transparentColor = color.new(color.white, 100)

_drawBody(left, right, top, bottom) =>
    drawed_box = box.new(left, top, right, bottom, xloc=xloc.bar_time)
    box.set_border_color(drawed_box, borderColor)
    box.set_bgcolor(drawed_box, fillColor)
    drawed_box

_drawWick(x, y1, y2, _color) => 
    line.new(x, y1, x, y2, xloc.bar_time, extend.none, _color, line.style_solid, width=4)

var box prev_box = na
var line previousWickLine = na

right =  _timeClose
left = _time
top = bodyMax
bottom = bodyMin

isNewPeriod = change(_time) and change(_timeClose)

isHistoricalBar = isNewPeriod and not barstate.isrealtime and not (_timeClose > timenow) // AKA any bar other than the current one

//////////////////////////////////////////////////////

// draw the boxes for every candle except the current

if isHistoricalBar
    _drawBody(left, right, top, bottom) 
    _drawWick(_wickTime, _low, _high, borderColor)

//////////////////////////////////////////////////////

// draw the box for the current candle

if barstate.islast
    if isNewPeriod
        prev_box := na
        previousWickLine := na
    else
        box.delete(prev_box)
        line.delete(previousWickLine)
        prev_box := _drawBody(left, right, top, bottom)
        previousWickLine := _drawWick(_wickTime, _low, _high, borderColor)

    

























//////////////////////////////////////////////////////

// draw the wick (OLD)

// isValidTimeframe = not timeframe.isseconds and timeframe.isintraday and timeframe.multiplier <= maxTimeframe

// minuteOfDay = (hour * 60) + minute
// midpoint = floor(_interval / 2)

// _isWickTime() => 
//     _remainder = minuteOfDay % _interval
//     wickCutoffHigh = midpoint + wickWidth
//     wickCutoffLow = midpoint - wickWidth
//     isWickTime = _remainder > wickCutoffLow and _remainder <= wickCutoffHigh


// isWickTime = _isWickTime()

// bodyTopBorder = isWickTime ? na : bodyMax
// bodyBottomBorder = isWickTime ? na : bodyMin
// wickTopBorder = isWickTime ? _high : na
// wickBottomBorder = isWickTime ? _low : na

// borderPlotStyle = plot.style_stepline
// topBorder = isWickTime ? wickTopBorder : bodyTopBorder
// bottomBorder = isWickTime ? wickBottomBorder : bodyBottomBorder

// topBorderPlot = plot(
//       isValidTimeframe ? topBorder : na, 
//       color=showBorder ? borderColor : transparentColor,
//       title="Top Border", 
//       style=borderPlotStyle
//       )

// bottomBorderPlot = plot(
//       isValidTimeframe ? bottomBorder : na, 
//       color=showBorder ? borderColor : transparentColor,
//       title="Bottom Border", 
//       style=borderPlotStyle
//       )      

// fill(topBorderPlot, bottomBorderPlot, fillColor)


//////////////////////////////////////////////////////































// _color = _getColorAtResolution(_resolution)

// _c = barstate.islast ? _color : _color[1]

// borderColor = color.new(_c, borderOpacity)
// fillColor = color.new(_c, fillOpacity)
// transparentColor = color.new(color.white, 100)

// _drawBody(left, right, top, bottom) =>
//     drawed_box = box.new(left, top, right, bottom)
//     box.set_border_color(drawed_box, borderColor)
//     box.set_bgcolor(drawed_box, fillColor)
//     drawed_box

// var firstBarIndexOfHigherTF = bar_index
// var box prev_box = na

// right =  bar_index
// left = firstBarIndexOfHigherTF

// top = barstate.islast ? bodyMax : bodyMax[1] 
// bottom = barstate.islast ? bodyMin : bodyMin[1] 

// isNewPeriod = change(time(_resolution)) > 0

// if isNewPeriod 
//     firstBarIndexOfHigherTF := bar_index

// if isNewPeriod and not barstate.isrealtime
//     _drawBody(left, right, top, bottom) // draw the boxes for every candle except the current

// if barstate.islast
//     if isNewPeriod
//         prev_box := na
//     else
//         box.delete(prev_box)
//         prev_box := _drawBody(left, right, top, bottom)














