//@version=4

study("MJ - Pivots", overlay=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

// new_bar: check if we're on a new bar within the session in a given resolution
new_bar(res) => change(time(res)) != 0

_securityRepaint(_symbol, _res, _src, _repaint) => 
    _gaps = barmerge.gaps_off
    _lookahead = barmerge.lookahead_on
    _index = _repaint ? 0 : barstate.isrealtime ? 0 : 1
    _srcIndex = _repaint ? 0 : barstate.isrealtime ? 1 : 0
    security(_symbol, _res, _src[_srcIndex], _gaps, _lookahead)[_index]

//////////////////////////////////////////////////////////////////
// 
// ==== PLOT UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

_drawLabelledLine(lineId, x1, x2, y, _color, _width, _style, _extend, labelText, labelStyle, labelColor, labelTextColor, labelSize, showLabel, labelOffsetInBars) => 
    // x1 and x2 are in time (not bars)

    _lineId = lineId

    if na(_lineId)
        _lineId := line.new(x1, y, x2, y, xloc.bar_time, _extend)

    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)

    if not na(_lineId[1])
        line.delete(_lineId[1])

    // ----------------
    // draw the label
    // ----------------

    if showLabel
        // labelPosition = rangeLabelRightJustified ? x2 : x1
        timePerBar = time[0] - time[1]
        labelTime = x2 + (labelOffsetInBars * timePerBar)
        labelId = label.new(labelTime, y, labelText, textcolor=labelTextColor, style=labelStyle, size=labelSize, xloc=xloc.bar_time, color=labelColor)
        label.delete(labelId[1])

    _lineId

//////////////////////////////////////////////////////////////////
// 
// ==== CALCULATIONS ==== 
// 
//////////////////////////////////////////////////////////////////

dayHigh = security(syminfo.tickerid, 'D', high[1], lookahead=true)
dayLow = security(syminfo.tickerid, 'D', low[1], lookahead=true)
dayOpen = security(syminfo.tickerid, 'D', open[1], lookahead=true)
dayClose = security(syminfo.tickerid, 'D', close[1], lookahead=true)
// weekHigh = security(syminfo.tickerid, 'W', high[1], lookahead=9true)
// weekLow = security(syminfo.tickerid, 'W', low[1], lookahead=true)
pivotPoint = (dayHigh + dayLow + dayClose)/3
pivR1 = (2 * pivotPoint) - dayLow
pivS1 = (2 * pivotPoint) - dayHigh
pivR2 = pivotPoint-pivS1+pivR1
pivS2 = pivotPoint-pivR1+pivS1
pivR3 = (2*pivotPoint)+(dayHigh-(2*dayLow))
pivS3 = (2*pivotPoint)-((2*dayHigh)-dayLow)
m0C = (pivS2+pivS3)/2
m1C = (pivS1+pivS2)/2
m2C = (pivotPoint+pivS1)/2
m3C = (pivotPoint+pivR1)/2
m4C = (pivR1+pivR2)/2
m5C = (pivR2+pivR3)/2

//////////////////////////////////////////////////////////////////
// 
// ==== PIVOTS ==== 
// 
//////////////////////////////////////////////////////////////////

groupPivot = 'Pivot'

pivotLineOffsetInBars = input(5, 'Line Offset (in bars)', tooltip='How many bars away from current price to shift x1', group=groupPivot)
pivotLineLengthInBars = input(25, 'Line Length (in bars)', minval=0, group=groupPivot)
pivotLabelOffsetInBars = input(7, 'Label Offset (in bars)', group=groupPivot)
pivotLabelTextColor = input(color.new(color.black, 0), 'Label Text Color')

pivotLineStyle = input(line.style_dashed, 'Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupPivot)
pivotLineWidth = input(1, 'Line Width', options=[1,2,3,4], group=groupPivot)
pivotLineExtend = input(extend.none, 'Line Extend', options=[extend.none, extend.left, extend.right, extend.both], group=groupPivot)
pivotLabelStyle = input(label.style_none, 'Label Style', options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle], group=groupPivot)
pivotLabelVisible = input(true, 'Labels Visible', group=groupPivot)
pivotLabelSize = input(size.normal, 'Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupPivot)
pivotLineOpacity = input(10, 'Line Opacity')
pivotLabelOpacity = input(50, 'Label Opacity')
pivotLabelTextOpacity = input(0, 'Label Text Opacity')

mColor = input(color.white, 'M Color', group=groupPivot)
sColor = input(color.red, 'S Color', group=groupPivot)
rColor = input(color.green, 'R Color', group=groupPivot)
ppColor = input(color.yellow, 'PP Color', group=groupPivot)

_getPivotLabelTextColorFromLabelStyle(labelStyle, masterColor) => 
    defaultColor = color.new(pivotLabelTextColor, pivotLabelTextOpacity)
    labelStyle == label.style_none ? color.new(masterColor, pivotLabelTextOpacity) : defaultColor

mLineColor = color.new(mColor, pivotLineOpacity)
mLabelColor = color.new(mColor, pivotLabelOpacity)
mLabelTextColor = _getPivotLabelTextColorFromLabelStyle(pivotLabelStyle, mColor)

sLineColor = color.new(sColor, pivotLineOpacity)
sLabelColor = color.new(sColor, pivotLabelOpacity)
sLabelTextColor = _getPivotLabelTextColorFromLabelStyle(pivotLabelStyle, sColor)

rLineColor = color.new(rColor, pivotLineOpacity)
rLabelColor = color.new(rColor, pivotLabelOpacity)
rLabelTextColor = _getPivotLabelTextColorFromLabelStyle(pivotLabelStyle, rColor)

ppLineColor = color.new(ppColor, pivotLineOpacity)
ppLabelColor = color.new(ppColor, pivotLabelOpacity)
ppLabelTextColor = _getPivotLabelTextColorFromLabelStyle(pivotLabelStyle, ppColor)

var line m0LineId = na
var line m1LineId = na
var line m2LineId = na
var line m3LineId = na
var line m4LineId = na
var line m5LineId = na
var line r1LineId = na
var line r2LineId = na
var line r3LineId = na
var line s1LineId = na
var line s2LineId = na
var line s3LineId = na
var line ppLineId = na

_drawMPivotLine(lineId, x1, x2, y, labelText) =>
    _drawLabelledLine(lineId, x1, x2, y, mLineColor, pivotLineWidth, pivotLineStyle, pivotLineExtend, labelText, pivotLabelStyle, mLabelColor, mLabelTextColor, pivotLabelSize, pivotLabelVisible, pivotLabelOffsetInBars)

_drawPivots() => 
    x1 = _getTimeNBarsFromNow(pivotLineOffsetInBars)
    x2 = _getTimeNBarsFromNow(pivotLineOffsetInBars + pivotLineLengthInBars)

    _m0LineId = _drawMPivotLine(m0LineId, x1, x2, m0C, 'M0')
    _m1LineId = _drawMPivotLine(m1LineId, x1, x2, m1C, 'M1')
    _m2LineId = _drawMPivotLine(m2LineId, x1, x2, m2C, 'M2')
    _m3LineId = _drawMPivotLine(m3LineId, x1, x2, m3C, 'M3')
    _m4LineId = _drawMPivotLine(m4LineId, x1, x2, m4C, 'M4')
    _m5LineId = _drawMPivotLine(m5LineId, x1, x2, m5C, 'M5')
    _s1LineId = _drawLabelledLine(s1LineId, x1, x2, pivS1, sLineColor, pivotLineWidth, pivotLineStyle, pivotLineExtend, 'S1', pivotLabelStyle, sLabelColor, sLabelTextColor, pivotLabelSize, pivotLabelVisible, pivotLabelOffsetInBars)
    _s2LineId = _drawLabelledLine(s2LineId, x1, x2, pivS2, sLineColor, pivotLineWidth, pivotLineStyle, pivotLineExtend, 'S2', pivotLabelStyle, sLabelColor, sLabelTextColor, pivotLabelSize, pivotLabelVisible, pivotLabelOffsetInBars)
    _s3LineId = _drawLabelledLine(s3LineId, x1, x2, pivS3, sLineColor, pivotLineWidth, pivotLineStyle, pivotLineExtend, 'S3', pivotLabelStyle, sLabelColor, sLabelTextColor, pivotLabelSize, pivotLabelVisible, pivotLabelOffsetInBars)
    _r1LineId = _drawLabelledLine(r1LineId, x1, x2, pivR1, rLineColor, pivotLineWidth, pivotLineStyle, pivotLineExtend, 'R1', pivotLabelStyle, rLabelColor, rLabelTextColor, pivotLabelSize, pivotLabelVisible, pivotLabelOffsetInBars)
    _r2LineId = _drawLabelledLine(r2LineId, x1, x2, pivR2, rLineColor, pivotLineWidth, pivotLineStyle, pivotLineExtend, 'R2', pivotLabelStyle, rLabelColor, rLabelTextColor, pivotLabelSize, pivotLabelVisible, pivotLabelOffsetInBars)
    _r3LineId = _drawLabelledLine(r3LineId, x1, x2, pivR3, rLineColor, pivotLineWidth, pivotLineStyle, pivotLineExtend, 'R3', pivotLabelStyle, rLabelColor, rLabelTextColor, pivotLabelSize, pivotLabelVisible, pivotLabelOffsetInBars)
    _ppLineId = _drawLabelledLine(ppLineId, x1, x2, pivotPoint, ppLineColor, pivotLineWidth, pivotLineStyle, pivotLineExtend, 'PP', pivotLabelStyle, ppLabelColor, ppLabelTextColor, pivotLabelSize, pivotLabelVisible, pivotLabelOffsetInBars)

    [_m0LineId, _m1LineId, _m2LineId, _m3LineId, _m4LineId, _m5LineId, _s1LineId, _s2LineId, _s3LineId, _r1LineId, _r2LineId, _r3LineId, _ppLineId]

[_m0LineId, _m1LineId, _m2LineId, _m3LineId, _m4LineId, _m5LineId, _s1LineId, _s2LineId, _s3LineId, _r1LineId, _r2LineId, _r3LineId, _ppLineId] = _drawPivots()

if na(m0LineId)
    m0LineId := _m0LineId

if na(m1LineId)
    m1LineId := _m1LineId

if na(m2LineId)
    m2LineId := _m2LineId

if na(m3LineId)
    m3LineId := _m3LineId

if na(m4LineId)
    m4LineId := _m4LineId

if na(m5LineId)
    m5LineId := _m5LineId

if na(s1LineId)
    s1LineId := _s1LineId

if na(s2LineId)
    s2LineId := _s2LineId

if na(s3LineId)
    s3LineId := _s3LineId

if na(r1LineId)
    r1LineId := _r1LineId

if na(r2LineId)
    r2LineId := _r2LineId

if na(r3LineId)
    r3LineId := _r3LineId

if na(ppLineId)
    ppLineId := _ppLineId