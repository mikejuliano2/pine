//@version=4

study("MJ - Session Levels", overlay=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

//////////////////////////////////////////////////////////////////
// 
// ==== SESSION LEVELS ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils
// -----------------------

groupSessionLevels = 'Session Levels'

// ----------------------------------------------------------------------------------
// tooltips
string TT_PR = "Final time to which the High and Low of the session will be held"
string TT_TZ = "Offsets all time inputs together to help align to preferred timezone"
string TT_LB = "The number of days back to plot the session levels"
// switches
asianOpenPlotActive = input(true, 'Plot Asian Open?', group=groupSessionLevels)
asianHighLowPlotActive = input(true, 'Plot Asian HighLow?', group=groupSessionLevels)
londonHighLowPlotActive = input(false, 'Plot London HighLow?', group=groupSessionLevels)
londonOpenPlotActive = input(true, 'Plot London Open?', group=groupSessionLevels)
nyOpenPlotActive = input(true, 'Plot New York Open?', group=groupSessionLevels)
nyHighLowPlotActive = input(false, 'Plot New York HighLow?', group=groupSessionLevels)
// asian
asianMasterColor = input(#00897b, 'Asian Color', input.color, group=groupSessionLevels)
asianOpenPlotStyle = input(plot.style_cross, 'Asian Open Plot Style', group=groupSessionLevels, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
asianStartHour = input(20, 'Asian Start Hour', minval=0, maxval=23, group=groupSessionLevels)
asianEndHour = input(4, 'Asian End Hour', minval=0, maxval=23, group=groupSessionLevels)
asianHoldTimeInHours = input(16, "Asian Holding Time", input.integer, minval=0, maxval = 23, tooltip = TT_PR, group=groupSessionLevels)
asianTimeRange = input('0000-0600:1234567', 'Asian Session Time', group=groupSessionLevels, type=input.session)
// london
londonMasterColor = input(#ff851a, 'London Color', input.color, group=groupSessionLevels)
londonOpenPlotStyle = input(plot.style_circles, 'London Open Plot Style', group=groupSessionLevels, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
londonStartHour = input(4, 'London Start Hour', minval=0, maxval=23, group=groupSessionLevels)
londonEndHour = input(13, 'London End Hour', minval=0, maxval=23, group=groupSessionLevels)
londonHoldTimeInHours = input(0, "London Holding Time", input.integer, minval=0, maxval = 23, tooltip = TT_PR, group=groupSessionLevels)
londonTimeRange = input('0800-1630:1234567', 'London Session Time', group=groupSessionLevels, type=input.session)
// new york
nyMasterColor = input(#fff176, 'New York Color', input.color, group=groupSessionLevels)
nyOpenPlotStyle = input(plot.style_cross, 'New York Open Plot Style', group=groupSessionLevels, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
nyStartHour = input(9, 'New York Start Hour', minval=0, maxval=23, group=groupSessionLevels)
nyEndHour = input(17, 'New York End Hour', minval=0, maxval=23, group=groupSessionLevels)
nyHoldTimeInHours = input(0, "New York Holding Time", input.integer, minval=0, maxval = 23, tooltip = TT_PR, group=groupSessionLevels)
nyTimeRange = input('1330-2000:1234567', 'New York Session Time', group=groupSessionLevels, type=input.session)
// opacity
sessionLevelsSessionHighLowLineOpacity = input(30, 'Opacity - Session H/L', minval=0, maxval=100, group=groupSessionLevels)
sessionLevelsSessionFillOpacity = input(97, 'Opacity - Session Fill', minval=0, maxval=100, group=groupSessionLevels)
sessionLevelsHoldingHighLowLineOpacity = input(60, 'Opacity - Hold H/L', minval=0, maxval=100, group=groupSessionLevels)
sessionLevelsHoldFillOpacity = input(100, 'Opacity - Hold Fill', minval=0, maxval=100, group=groupSessionLevels)
sessionLevelsOpenLineOpacity = input(10, 'Opacity - Open Line', minval=0, maxval=100, group=groupSessionLevels)
// line style
sessionLevelsHighLowLineStyle = input(plot.style_linebr, 'Plot Style - H/L', group=groupSessionLevels, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
sessionLevelsLineWidth = input(2, 'Line Width', group=groupSessionLevels, options=[1,2,3,4])
sessionLevelsLinesJoined = input(false, 'Join points?')
// labels
sessionLabelOffsetInBars = input(25, 'Session Label Offset (bars)', group=groupSessionLevels)
sessionLabelStyle = input(label.style_label_lower_left, 'Session Label Style', group=groupSessionLevels, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
sessionLabelOpacity = input(70, 'Label Opacity', group=groupSessionLevels, minval=0, maxval=100)
// days
sessionLevelsLookbackHours = input(6, 'Lookback Hours', input.integer, minval=0, maxval=24, tooltip=TT_LB, group=groupSessionLevels)
sessionLevelsTZShiftHours  = input( 4, "Timezone Adjust (in hours)", input.integer, minval = -12, maxval = 14, tooltip = TT_TZ, group=groupSessionLevels)

f_timeShift24( _input, _offset ) =>
    int _shift = _input + _offset
    _return = _shift > 23 ? _shift - 24 :
              _shift < 0  ? 24 + _shift : _shift

f_isTime( _input ) => int( hour ) == _input

f_captureSessionHL(_inSession,_inHolding) =>
    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := high > _sessionHigh ? high : _sessionHigh
            _sessionLow  := low  < _sessionLow  ? low  : _sessionLow
    
    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen
    
    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]
    
_isWithinSessionLevelsLookbackPeriod() => 
    // the session start time must be after the lookback time
    lookbackTimeInMs = MS_PER_HOUR * sessionLevelsLookbackHours
    _currentBarTime() > (timenow - lookbackTimeInMs)
    
    // lookbackHours = (24 * sessionLevelsLookbackDays) + hour
    // timeOfSessionBeginning = _getTimeAtStartOfHourNHoursAgo(lookbackHours)
    // timeAtBeginningOfLookbackDay = _getStartTimeNDaysBack(sessionLevelsLookbackDays)
    // timeAtBeginningOfLookbackDay < timeOfSessionBeginning

_calcInSessionAndInHold(isSessionStart, isSessionEnd, isSessionHold, timeRange) =>
    var bool inSession = false
    var bool inHolding = false

    inSession  := isSessionStart and not isSessionStart[1] ? true  :
              isSessionEnd[1] and not isSessionEnd     ? false : inSession
    
    inHolding := isSessionEnd[1] and not isSessionEnd     ? true  :
              isSessionHold[1] and not isSessionHold   ? false : inHolding
    
    [inSession, inHolding]

_getLevelsColors(masterColor, inSession, inHolding, openPlotActive, highLowPlotActive) => 
    openLineColor = openPlotActive and (inSession or inHolding) ? color.new(masterColor, sessionLevelsOpenLineOpacity) : na
    
    highLowLineColor = not highLowPlotActive ? na : 
              inSession ? color.new(masterColor, sessionLevelsSessionHighLowLineOpacity ) :
              inHolding ? color.new(masterColor, sessionLevelsHoldingHighLowLineOpacity) : na
            
    fillColor = not highLowPlotActive ? na : 
              inSession ? color.new(masterColor, sessionLevelsSessionFillOpacity ) :
              inHolding ? color.new(masterColor, sessionLevelsHoldFillOpacity) : na

    [openLineColor, highLowLineColor, fillColor]


_getValuesToPlotSessionLevels(timeRange, startHour, endHour, holdHour, hourShift, masterColor, openPlotActive, highLowPlotActive) => 
    bool isStart = f_isTime( f_timeShift24( startHour, hourShift ) )
    bool isEnd   = f_isTime( f_timeShift24( endHour,   hourShift ) )
    bool isHold  = f_isTime( f_timeShift24( holdHour,  hourShift ) )
    
    // [isInSession, isInHolding] = _calcInSessionAndInHold(isStart, isEnd, isHold, timeRange)
    isInSession = _isInSession(timeRange)
    isInHolding = not isInSession

    [sessionHigh, sessionLow, sessionOpen] = f_captureSessionHL( isInSession, isInHolding )

    // color lineColor = isInSession ? sessionLineColor : isInHolding ? holdingLineColor : na
    // color fillColor = isInSession ? sessionFillColor : isInHolding ? holdingFillColor : na

    [openLineColor, highLowLineColor, fillColor] = _getLevelsColors(masterColor, isInSession, isInHolding, openPlotActive, highLowPlotActive)

    conditionsMet = _isWithinSessionLevelsLookbackPeriod()

    if conditionsMet
        [sessionHigh, sessionLow, sessionOpen, openLineColor, highLowLineColor, fillColor]
    else 
        [na, na, na, na, na, na]

// ------------------
// Plot Lines
// ------------------

[asianHigh, asianLow, asianOpen, asianOpenLineColor, asianHighLowLineColor, asianFillColor] = _getValuesToPlotSessionLevels(asianTimeRange, asianStartHour, asianEndHour, asianHoldTimeInHours, sessionLevelsTZShiftHours, asianMasterColor, asianOpenPlotActive, asianHighLowPlotActive)
asianPlotHigh = plot(asianHigh, "Asian Session High", asianHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, join=sessionLevelsLinesJoined)
asianPlotLow  = plot(asianLow,  "Asian Session Low",  asianHighLowLineColor,  sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, join=sessionLevelsLinesJoined)
asianPlotOpen  = plot(asianOpen,  "Asian Session Low",  asianOpenLineColor,  sessionLevelsLineWidth, asianOpenPlotStyle, join=sessionLevelsLinesJoined)
fill(asianPlotHigh, asianPlotLow, asianFillColor)

[londonHigh, londonLow, londonOpen, londonOpenLineColor, londonHighLowLineColor, londonFillColor] = _getValuesToPlotSessionLevels(londonTimeRange, londonStartHour, londonEndHour, londonHoldTimeInHours, sessionLevelsTZShiftHours, londonMasterColor, londonOpenPlotActive, londonHighLowPlotActive)
londonPlotHigh = plot(londonHigh, "London Session High", londonHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, join=sessionLevelsLinesJoined)
londonPlotLow  = plot(londonLow,  "London Session Low",  londonHighLowLineColor,  sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, join=sessionLevelsLinesJoined)
londonPlotOpen  = plot(londonOpen,  "London Session Low",  londonOpenLineColor,  sessionLevelsLineWidth, londonOpenPlotStyle, join=sessionLevelsLinesJoined)
fill(londonPlotHigh, londonPlotLow, londonFillColor)

[nyHigh, nyLow, nyOpen, nyOpenLineColor, nyHighLowLineColor, nyFillColor] = _getValuesToPlotSessionLevels(nyTimeRange, nyStartHour, nyEndHour, nyHoldTimeInHours, sessionLevelsTZShiftHours, nyMasterColor, nyOpenPlotActive, nyHighLowPlotActive)
nyPlotHigh = plot(nyHigh, "New York Session High", nyHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, join=sessionLevelsLinesJoined)
nyPlotLow  = plot(nyLow,  "New York Session Low",  nyHighLowLineColor,  sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, join=sessionLevelsLinesJoined)
nyPlotOpen  = plot(nyOpen,  "New York Session Low",  nyOpenLineColor,  sessionLevelsLineWidth, nyOpenPlotStyle, join=sessionLevelsLinesJoined)
fill(nyPlotHigh, nyPlotLow, nyFillColor)

// ------------------
// Labels
// ------------------

_drawSessionnLabel(x, y, text, style, size, Color, textColor) => 
    x and y ? label.new(x, y, text, style=style, textcolor=textColor, color=color.new(Color, sessionLabelOpacity), size=size, xloc=xloc.bar_time) : na



sessionLabelTime = _getFutureTimeNBarsFromNow(sessionLabelOffsetInBars)

asianHighlabelId = _drawSessionnLabel(sessionLabelTime, asianHigh, 'Asian Session High', sessionLabelStyle, size.normal, asianMasterColor, color.white)
label.delete(asianHighlabelId[1])

asianLowlabelId = _drawSessionnLabel(sessionLabelTime, asianLow, 'Asian Session Low', sessionLabelStyle, size.normal, asianMasterColor, color.white)
label.delete(asianLowlabelId[1])

asianOpenLabelId = _drawSessionnLabel(sessionLabelTime, asianOpen, 'Daily Open', sessionLabelStyle, size.normal, asianMasterColor, color.white)
label.delete(asianOpenLabelId[1])

londonOpenLabelId = _drawSessionnLabel(sessionLabelTime, londonOpen, 'London Open', sessionLabelStyle, size.normal, londonMasterColor, color.white)
label.delete(londonOpenLabelId[1])

nyOpenLabelId = _drawSessionnLabel(sessionLabelTime, nyOpen, 'New York Open', sessionLabelStyle, size.normal, nyMasterColor, color.white)
label.delete(nyOpenLabelId[1])


// -----------------------------------
// Daily/Weekly High/Low
// -----------------------------------
onlyShowYesterdayHighLowForCurrentDay = input(true, 'Only show yesterday H/L on current day?')
onlyShowLastWeekHighLowForCurrentDay = input(true, 'Only show last week H/L on current day?')

yesterdayHighLowLineColor = input(color.blue, 'Yesterday H/L Line Color')
yesterdayHighLowPlotStyle = input(plot.style_linebr, 'Yesterday H/L Plot Style', options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
yesterdayHighLowLineWidth = input(1, 'Yesterday H/L Line Width', options=[1,2,3,4])

lastWeekHighLowLineColor = input(color.green, 'Last Week H/L Line Color')
lastWeekHighLowPlotStyle = input(plot.style_linebr, 'Last Week H/L Plot Style', options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
lastWeekHighLowLineWidth = input(1, 'Last Week H/L Line Width', options=[1,2,3,4])

_nonRepaintSecurity(_symbol, _res, _src, _repaint) => security(_symbol, _res, _src[_repaint ? 0 : barstate.isrealtime ? 1 : 0])[_repaint ? 0 : barstate.isrealtime ? 0 : 1]

dayHigh = _nonRepaintSecurity(syminfo.tickerid, "D",high, false)
dayLow = _nonRepaintSecurity(syminfo.tickerid, "D",low, false)
dayOpen  = _nonRepaintSecurity(syminfo.tickerid, "D",open, false)
dayClose = _nonRepaintSecurity(syminfo.tickerid, "D",close, false)
weekHigh = _nonRepaintSecurity(syminfo.tickerid, "W",high, false)
weekLow = _nonRepaintSecurity(syminfo.tickerid, "W",low, false)
pivotPoint = (dayHigh + dayLow + dayClose)/3
pivR1 = (2 * pivotPoint) - dayLow
pivS1 = (2 * pivotPoint) - dayHigh
pivR2 = pivotPoint-pivS1+pivR1
pivS2 = pivotPoint-pivR1+pivS1
pivR3 = (2*pivotPoint)+(dayHigh-(2*dayLow))
pivS3 = (2*pivotPoint)-((2*dayHigh)-dayLow)

_doShowYesterdayHighLow() => 
    isValidTimeframe = timeframe.isintraday == true
    isValidDay = onlyShowYesterdayHighLowForCurrentDay ? _isCurrentDay() : true
    isValidTimeframe and isValidDay

_doShowLastWeekHighLow() => 
    isValidTimeframe = timeframe.isintraday == true or timeframe.isdaily == true
    isValidDay = onlyShowYesterdayHighLowForCurrentDay ? _isCurrentDay() : true
    isValidTimeframe and isValidDay


_getYesterdayHighLowValues() => 
    if _doShowYesterdayHighLow()
        [dayHigh, dayLow]
    else 
        [na, na]

_getLastWeekHighLowValues() => 
    if _doShowLastWeekHighLow()
        [weekHigh, weekLow]
    else 
        [na, na]

[yesterdayHigh, yesterdayLow] = _getYesterdayHighLowValues()
[lastWeekHigh, lastWeekLow] = _getLastWeekHighLowValues()

plot(yesterdayHigh, linewidth=yesterdayHighLowLineWidth, color=yesterdayHighLowLineColor, style=yesterdayHighLowPlotStyle, title='Yesterday High')
plot(yesterdayLow, linewidth=yesterdayHighLowLineWidth, color=yesterdayHighLowLineColor, style=yesterdayHighLowPlotStyle, title = 'Yesterday Low')
plot(lastWeekHigh, linewidth=lastWeekHighLowLineWidth, color=lastWeekHighLowLineColor, style=lastWeekHighLowPlotStyle, title='Last Week High')
plot(lastWeekLow, linewidth=lastWeekHighLowLineWidth, color=lastWeekHighLowLineColor, style=lastWeekHighLowPlotStyle, title='Last Week Low')

// r_label(weekHigh,"LWeek Hi",label.style_none,color.green,validWHLTimeFrame and showWeekHighLow and showDayHighLowLabels)//ry, rtext, rstyle, rcolor, valid
// r_label(weekLow,"LWeek Lo",label.style_none,color.green,validWHLTimeFrame and showWeekHighLow and showDayHighLowLabels)
// r_label(dayHigh,"YH",label.style_none,color.blue,validDHLTimeFrame and showDayHighLow and showDayHighLowLabels)//ry, rtext, rstyle, rcolor, valid
// r_label(dayLow,"YL",label.style_none,color.blue,validDHLTimeFrame and showDayHighLow and showDayHighLowLabels)