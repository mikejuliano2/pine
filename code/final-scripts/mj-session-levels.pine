//@version=4

study("MJ - Session Levels", overlay=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

// new_bar: check if we're on a new bar within the session in a given resolution
new_bar(res) => change(time(res)) != 0

//////////////////////////////////////////////////////////////////
// 
// ==== PLOT UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

_drawLabelledLine(lineId, x1, x2, y, _color, _width, _style, _extend, labelText, labelStyle, labelColor, labelTextColor, labelSize, showLabel, labelOffsetInBars, showPrice) => 
    // x1 and x2 are in time (not bars)

    _lineId = lineId

    if na(_lineId)
        _lineId := line.new(x1, y, x2, y, xloc.bar_time, _extend)

    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)

    if not na(_lineId[1])
        line.delete(_lineId[1])

    // ----------------
    // draw the label
    // ----------------

    if showLabel
        _labelText = showPrice ? labelText + ' (' + tostring(y) + ')' : labelText
        timePerBar = time[0] - time[1]
        labelTime = x2 + (labelOffsetInBars * timePerBar)
        labelId = label.new(labelTime, y, _labelText, textcolor=labelTextColor, style=labelStyle, size=labelSize, xloc=xloc.bar_time, color=labelColor)
        label.delete(labelId[1])

    _lineId


//////////////////////////////////////////////////////////////////
// 
// ==== SESSION LEVELS ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils, plotUtils
// -----------------------

groupSessionLevels = 'Session Levels'
groupOffset = 'Offset'
groupFill = 'Fill'
groupSwitches = 'Switches'
groupColors = 'Colors'
groupTimeRanges = 'Time Ranges'
groupLineStyle = 'Line Style'
groupLabels = 'Labels'

// ----------------------------------------------------------------------------------
// tooltips
string TT_PR = "Final time to which the High and Low of the session will be held"
string TT_TZ = "Offsets all time inputs together to help align to preferred timezone"
string TT_LB = "The number of days back to plot the session levels"

// line style

dailyOpenLineExtend = input(extend.none, 'Daily Open Line Extend', options=[extend.none, extend.left, extend.right, extend.both], group=groupLineStyle)
sessionLevelsLineExtend = input(extend.none, 'Session Levels Line Extend', options=[extend.none, extend.left, extend.right, extend.both], group=groupLineStyle)
sessionLevelsLineLengthInBars = input(25, 'Line Length (in bars)', group=groupLineStyle)
sessionLevelsLineOffsetInBars = input(5, 'Line Offset (in bars)', group=groupLineStyle)

sessionLevelsHighLowLineStyle = input(line.style_solid, 'Line Style - H/L', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
sessionLevelsLineWidth = input(2, 'Line Width', group=groupLineStyle, options=[1,2,3,4])
sessionLevelsLinesJoined = input(false, 'Join points?', group=groupLineStyle)

asianOpenLineStyle = input(line.style_solid, 'Asian Open Line Style', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
londonOpenLineStyle = input(line.style_solid, 'London Open Line Style', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
nyOpenLineStyle = input(line.style_solid, 'NY Open Line Style', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
mt4DailyOpenLineStyle = input(line.style_solid, 'MT4 Daily Open Line Style', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// switches

asianOpenPlotActive = input(true, 'Plot Asian Open?', group=groupSwitches)
asianHighLowPlotActive = input(true, 'Plot Asian HighLow?', group=groupSwitches)
londonOpenPlotActive = input(true, 'Plot London Open?', group=groupSwitches)
londonHighLowPlotActive = input(true, 'Plot London HighLow?', group=groupSwitches)
nyOpenPlotActive = input(true, 'Plot NY Open?', group=groupSwitches)
nyHighLowPlotActive = input(true, 'Plot New York HighLow?', group=groupSwitches)
mt4DailyOpenLineActive = input(true, 'MT4 Daily Open Line Active', group=groupSwitches)
fillAsianSession = input(true, 'Fill Asian Session?', group=groupSwitches)
fillLondonSession = input(true, 'Fill London Session?', group=groupSwitches)
fillNYSession = input(true, 'Fill NY Session?', group=groupSwitches)

nyHighLowLineActive = input(false, 'NY HL Line Active', group=groupSwitches)
londonHighLowLineActive = input(false, 'London HL Line Active', group=groupSwitches)

// colors

asianMasterColor = input(#00897b, 'Asian Color', input.color, group=groupSessionLevels)
londonMasterColor = input(#ff851a, 'London Color', input.color, group=groupSessionLevels)
nyMasterColor = input(#fff176, 'New York Color', input.color, group=groupSessionLevels)
mt4DailyOpenColor = input(#2962ff, 'MT4 Daily Open Color', input.color, group=groupSessionLevels)

// labels

sessionLabelOffsetInBars = input(-3, 'Label Offset (in bars)', group=groupLabels)
sessionLabelStyle = input(label.style_none, 'Session Label Style', group=groupLabels, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
sessionLabelOpacity = input(70, 'Label Opacity', group=groupLabels, minval=0, maxval=100)
sessionLabelSize = input(size.normal, 'Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupLabels)
sessionLabelShowPrice = input(false, 'Show Price in Label?', group=groupLabels)

// time ranges

asianTimeRange = input('0000-0600:1234567', 'Asian Session Time', group=groupTimeRanges, type=input.session)
londonTimeRange = input('0800-1630:1234567', 'London Session Time', group=groupTimeRanges, type=input.session)
nyTimeRange = input('1330-2000:1234567', 'New York Session Time', group=groupTimeRanges, type=input.session)
mt4DailyOpenTimeRange = input('2200-2201:1234567', 'MT4 Daily Open', group=groupTimeRanges, type=input.session)

// fill
asianOpenPlotStyle = input(plot.style_cross, 'Asian Open Plot Style', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
londonOpenPlotStyle = input(plot.style_circles, 'London Open Plot Style', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
nyOpenPlotStyle = input(plot.style_cross, 'NY Open Plot Style', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])

sessionLevelsHighLowPlotStyle = input(plot.style_stepline, 'Plot Style - H/L', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
sessionHighLowLineOpacity = input(30, 'Opacity - Session H/L', minval=0, maxval=100, group=groupFill)
sessionFillOpacity = input(97, 'Opacity - Session Fill', minval=0, maxval=100, group=groupFill)
sessionLevelsOpenLineOpacity = input(10, 'Opacity - Open Line', minval=0, maxval=100, group=groupFill)
sessionLevelsLookbackHours = input(180, 'Lookback Hours', input.integer, minval=0, maxval=24, tooltip=TT_LB, group=groupFill)

_captureSessionLevels(timeRange) => 
    _inSession = _isInSession(timeRange)
    _inHolding = not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := high > _sessionHigh ? high : _sessionHigh
            _sessionLow  := low  < _sessionLow  ? low  : _sessionLow

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

_isWithinSessionLevelsLookbackPeriod() => 
    // the session start time must be after the lookback time
    lookbackTimeInMs = MS_PER_HOUR * sessionLevelsLookbackHours
    _currentBarTime() > (timenow - lookbackTimeInMs)
    
    // lookbackHours = (24 * sessionLevelsLookbackDays) + hour
    // timeOfSessionBeginning = _getTimeAtStartOfHourNHoursAgo(lookbackHours)
    // timeAtBeginningOfLookbackDay = _getStartTimeNDaysBack(sessionLevelsLookbackDays)
    // timeAtBeginningOfLookbackDay < timeOfSessionBeginning

_getLevelsColors(masterColor, inSession, openPlotActive, highLowPlotActive) => 
    openLineColor = openPlotActive and inSession ? color.new(masterColor, sessionLevelsOpenLineOpacity) : na
    
    highLowLineColor = not highLowPlotActive ? na : 
              inSession ? color.new(masterColor, sessionHighLowLineOpacity ) : na
            
    fillColor = not highLowPlotActive ? na : 
              inSession ? color.new(masterColor, sessionFillOpacity ) : na

    [openLineColor, highLowLineColor, fillColor]    

_getValuesForPlotting(timeRange, masterColor, openPlotActive, highLowPlotActive) => 
    isInSession = _isInSession(timeRange)

    [sessionHigh, sessionLow, sessionOpen] = _captureSessionLevels(timeRange)
    
    [openLineColor, highLowLineColor, fillColor] = _getLevelsColors(masterColor, isInSession, openPlotActive, highLowPlotActive)

    conditionsMet = _isWithinSessionLevelsLookbackPeriod()

    if conditionsMet
        [sessionHigh, sessionLow, sessionOpen, openLineColor, highLowLineColor, fillColor]
    else 
        [na, na, na, na, na, na]

// ====================================
// Session Levels using plot
// ====================================

// -------------
// Plot + Fill
// -------------

[asianHigh, asianLow, asianOpen, asianOpenLineColor, asianHighLowLineColor, asianFillColor] = _getValuesForPlotting(
     asianTimeRange, 
     asianMasterColor, 
     asianOpenPlotActive, 
     asianHighLowPlotActive)

// asianPlotOpen  = plot(asianOpen,  "Asia Low",  asianOpenLineColor,  sessionLevelsLineWidth, asianOpenPlotStyle, join=sessionLevelsLinesJoined)

asianPlotHigh = plot(
      fillAsianSession ? asianHigh : na, 
      "Asia High", 
      asianHighLowLineColor, 
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)

asianPlotLow  = plot(
      fillAsianSession ? asianLow : na, 
      "Asia Low",  
      asianHighLowLineColor,  
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)
fill(asianPlotHigh, asianPlotLow, asianFillColor)

[londonHigh, londonLow, londonOpen, londonOpenLineColor, londonHighLowLineColor, londonFillColor] = _getValuesForPlotting(
     londonTimeRange, 
     londonMasterColor, 
     londonOpenPlotActive, 
     londonHighLowPlotActive)

// londonPlotOpen  = plot(londonOpen,  "London Low",  londonOpenLineColor,  sessionLevelsLineWidth, londonOpenPlotStyle, join=sessionLevelsLinesJoined)

londonPlotHigh = plot(
      fillLondonSession ? londonHigh : na, 
      "London Session High", 
      londonHighLowLineColor, 
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)
      
londonPlotLow  = plot(
      fillLondonSession ? londonLow : na,  
      "London Low",  
      londonHighLowLineColor,  
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)

fill(londonPlotHigh, londonPlotLow, londonFillColor)

[nyHigh, nyLow, nyOpen, nyOpenLineColor, nyHighLowLineColor, nyFillColor] = _getValuesForPlotting(
      nyTimeRange, 
      nyMasterColor, 
      nyOpenPlotActive, 
      nyHighLowPlotActive)

// nyPlotOpen  = plot(nyOpen,  "New York Session Low",  nyOpenLineColor,  sessionLevelsLineWidth, nyOpenPlotStyle, join=sessionLevelsLinesJoined)

nyPlotHigh = plot(
      fillNYSession ? nyHigh : na, 
      "New York Session High", 
      nyHighLowLineColor, 
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)

nyPlotLow  = plot(
      fillNYSession ? nyLow : na,  
      "New York Session Low",  
      nyHighLowLineColor,  
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)

fill(nyPlotHigh, nyPlotLow, nyFillColor)

[mt4High, mt4Low, mt4Open] = _captureSessionLevels(mt4DailyOpenTimeRange)

// ------------------
// Labels
// ------------------

_drawSessionnLabel(x, y, text, style, size, Color, textColor) => 
    x and y ? label.new(x, y, text, style=style, textcolor=textColor, color=color.new(Color, sessionLabelOpacity), size=size, xloc=xloc.bar_time) : na



sessionLabelX2 = _getTimeNBarsFromNow(sessionLabelOffsetInBars)

// asianHighlabelId = _drawSessionnLabel(sessionLabelX2, asianHigh, 'Asia High', sessionLabelStyle, size.normal, asianMasterColor, color.white)
// label.delete(asianHighlabelId[1])

// asianLowlabelId = _drawSessionnLabel(sessionLabelX2, asianLow, 'Asia Low', sessionLabelStyle, size.normal, asianMasterColor, color.white)
// label.delete(asianLowlabelId[1])

// asianOpenLabelId = _drawSessionnLabel(sessionLabelX2, asianOpen, 'Daily Open', sessionLabelStyle, size.normal, asianMasterColor, color.white)
// label.delete(asianOpenLabelId[1])

// londonOpenLabelId = _drawSessionnLabel(sessionLabelX2, londonOpen, 'London Open', sessionLabelStyle, size.normal, londonMasterColor, color.white)
// label.delete(londonOpenLabelId[1])

// nyOpenLabelId = _drawSessionnLabel(sessionLabelX2, nyOpen, 'NY Open', sessionLabelStyle, size.normal, nyMasterColor, color.white)
// label.delete(nyOpenLabelId[1])

// ====================================
// Session Levels using labelled lines
// ====================================

var line asianOpenLineId = na
var line asianHighLineId = na
var line asianLowLineId = na
var line nyOpenLineId = na
var line nyHighLineId = na
var line nyLowLineId = na
var line londonOpenLineId = na
var line londonHighLineId = na
var line londonLowLineId = na
var line mt4DailyOpenLineId = na

_drawSessionLines() =>
    x1 = _getTimeNBarsFromNow(sessionLevelsLineOffsetInBars)
    x2 = _getTimeNBarsFromNow(sessionLevelsLineOffsetInBars + sessionLevelsLineLengthInBars)
    
    nyHighLowLabelVisible = false
    londonHighLowLabelVisible = false
    mt4DailyOpenHighLowLabelVisible = false

    asianLabelColor = color.new(asianMasterColor, sessionLabelOpacity)
    londonLabelColor = color.new(londonMasterColor, sessionLabelOpacity)
    nyLabelColor = color.new(nyMasterColor, sessionLabelOpacity)
    
    labelTextColor = color.new(color.white, 0)
    labelSize = sessionLabelSize
    labelVisible = true

    // ---------------
    // Asia Lines
    // ---------------

    _asianOpenLineId = _drawLabelledLine(
         asianOpenLineId, 
         x1, 
         x2, 
         asianOpen, 
         mt4DailyOpenColor, 
         sessionLevelsLineWidth, 
         asianOpenLineStyle, 
         dailyOpenLineExtend, 
         'Daily Open', 
         sessionLabelStyle, 
         asianLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    _asianHighLineId = _drawLabelledLine(
         asianHighLineId, 
         x1, 
         x2, 
         asianHigh, 
         asianMasterColor,
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle, 
         sessionLevelsLineExtend, 
         'Asia High', 
         sessionLabelStyle, 
         asianLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _asianLowLineId = _drawLabelledLine(
         asianLowLineId, 
         x1, 
         x2, 
         asianLow, 
         asianMasterColor, 
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle, 
         sessionLevelsLineExtend, 
         'Asia Low', 
         sessionLabelStyle, 
         asianLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    // ---------------
    // New York Lines
    // ---------------

    _nyOpenLineId = _drawLabelledLine(
         nyOpenLineId, 
         x1, 
         x2, 
         nyOpen, 
         nyOpenLineColor, 
         sessionLevelsLineWidth, 
         nyOpenLineStyle, 
         sessionLevelsLineExtend, 
         'NY Open', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    nyHLLineOpacity = nyHighLowLineActive ? 50 : 100
    _nyHighLineId = _drawLabelledLine(
         nyHighLineId, 
         x1, 
         x2, 
         nyHigh, 
         color.new(nyHighLowLineColor, nyHLLineOpacity), 
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'NY High', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         nyHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _nyLowLineId = _drawLabelledLine(
         nyLowLineId, 
         x1, 
         x2, 
         nyLow, 
         color.new(nyHighLowLineColor, nyHLLineOpacity),
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'NY Low', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         nyHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    // ---------------
    // London Lines
    // ---------------         

    _londonOpenLineId = _drawLabelledLine(
         londonOpenLineId, 
         x1, 
         x2, 
         londonOpen, 
         londonOpenLineColor, 
         sessionLevelsLineWidth, 
         londonOpenLineStyle, 
         sessionLevelsLineExtend, 
         'London Open', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    londonHLLineOpacity = nyHighLowLineActive ? 50 : 100
    _londonHighLineId = _drawLabelledLine(
         londonHighLineId, 
         x1, 
         x2, 
         londonHigh, 
         color.new(londonHighLowLineColor, londonHLLineOpacity), 
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'London York High', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         londonHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _londonLowLineId = _drawLabelledLine(
         londonLowLineId, 
         x1, 
         x2, 
         londonLow, 
         color.new(londonHighLowLineColor, londonHLLineOpacity), 
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'London Low', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         londonHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    _mt4DailyOpenLineId = _drawLabelledLine(
         mt4DailyOpenLineId, 
         x1, 
         x2, 
         mt4DailyOpenLineActive ? mt4Open : na, 
         mt4DailyOpenColor, 
         sessionLevelsLineWidth, 
         mt4DailyOpenLineStyle, 
         dailyOpenLineExtend, 
         'MT4 Daily Open', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    [_asianOpenLineId, _asianHighLineId, _asianLowLineId, _nyOpenLineId, _nyHighLineId, _nyLowLineId, _londonOpenLineId, _londonHighLineId, _londonLowLineId, _mt4DailyOpenLineId]


[_asianOpenLineId, _asianHighLineId, _asianLowLineId, _nyOpenLineId, _nyHighLineId, _nyLowLineId, _londonOpenLineId, _londonHighLineId, _londonLowLineId, _mt4DailyOpenLineId] = _drawSessionLines()

// Pine Script won't let these IDs be set in the method, so have to do it here.  Stupid.

if na(_asianOpenLineId) 
    asianOpenLineId := _asianOpenLineId

if na(_asianHighLineId)
    asianHighLineId := _asianHighLineId

if na(_asianLowLineId)
    asianLowLineId := _asianLowLineId

if na(_nyOpenLineId)
    nyOpenLineId := _nyOpenLineId

if na(_nyHighLineId)
    nyHighLineId := _nyHighLineId

if na(_nyLowLineId)
    nyLowLineId := _nyLowLineId

if na(_londonOpenLineId)
    londonOpenLineId := _londonOpenLineId

if na(_londonHighLineId)
    londonHighLineId := _londonHighLineId

if na(_londonLowLineId)
    londonLowLineId := _londonLowLineId

if na(_mt4DailyOpenLineId)
    mt4DailyOpenLineId := _mt4DailyOpenLineId