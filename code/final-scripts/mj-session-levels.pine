//@version=4

study("MJ - Session Levels", overlay=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

// new_bar: check if we're on a new bar within the session in a given resolution
new_bar(res) => change(time(res)) != 0

//////////////////////////////////////////////////////////////////
// 
// ==== PLOT UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

_drawLabelledLine(lineId, x1, x2, y, _color, _width, _style, _extend, labelText, labelStyle, labelColor, labelTextColor, labelSize, showLabel, labelOffsetInBars) => 
    // x1 and x2 are in time (not bars)

    _lineId = lineId

    if na(_lineId)
        _lineId := line.new(x1, y, x2, y, xloc.bar_time, _extend)

    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)

    if not na(_lineId[1])
        line.delete(_lineId[1])

    // ----------------
    // draw the label
    // ----------------

    if showLabel
        // labelPosition = rangeLabelRightJustified ? x2 : x1
        timePerBar = time[0] - time[1]
        labelTime = x2 + (labelOffsetInBars * timePerBar)
        labelId = label.new(labelTime, y, labelText, textcolor=labelTextColor, style=labelStyle, size=labelSize, xloc=xloc.bar_time, color=labelColor)
        label.delete(labelId[1])

    _lineId


//////////////////////////////////////////////////////////////////
// 
// ==== SESSION LEVELS ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils, plotUtils
// -----------------------

groupSessionLevels = 'Session Levels'
groupOffset = 'Offset'

// ----------------------------------------------------------------------------------
// tooltips
string TT_PR = "Final time to which the High and Low of the session will be held"
string TT_TZ = "Offsets all time inputs together to help align to preferred timezone"
string TT_LB = "The number of days back to plot the session levels"

// switches
asianOpenPlotActive = input(true, 'Plot Asian Open?', group=groupSessionLevels)
asianHighLowPlotActive = input(true, 'Plot Asian HighLow?', group=groupSessionLevels)
londonHighLowPlotActive = input(false, 'Plot London HighLow?', group=groupSessionLevels)
londonOpenPlotActive = input(true, 'Plot London Open?', group=groupSessionLevels)
nyOpenPlotActive = input(true, 'Plot NY Open?', group=groupSessionLevels)
nyHighLowPlotActive = input(false, 'Plot New York HighLow?', group=groupSessionLevels)
mt4DailyOpenPlotActive = input(true, 'Plot MT4 Daily Open?', group=groupSessionLevels)
// colors
asianMasterColor = input(#00897b, 'Asian Color', input.color, group=groupSessionLevels)
londonMasterColor = input(#ff851a, 'London Color', input.color, group=groupSessionLevels)
nyMasterColor = input(#fff176, 'New York Color', input.color, group=groupSessionLevels)
mt4DailyOpenColor = input(#2962ff, 'MT4 Daily Open Color', input.color, group=groupSessionLevels)
// line style
sessionLevelsHighLowPlotStyle = input(plot.style_linebr, 'Plot Style - H/L', group=groupSessionLevels, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
sessionLevelsHighLowLineStyle = input(line.style_solid, 'Line Style - H/L', group=groupSessionLevels, options=[line.style_solid, line.style_dashed, line.style_dotted])
sessionLevelsLineWidth = input(2, 'Line Width', group=groupSessionLevels, options=[1,2,3,4])
sessionLevelsLinesJoined = input(false, 'Join points?', group=groupSessionLevels)
sessionLevelsLineExtend = input(extend.none, 'Line Extend', options=[extend.none, extend.left, extend.right, extend.both], group=groupSessionLevels)
sessionLevelsLineLengthInBars = input(20, 'Line Length (in bars)', group=groupSessionLevels)
sessionLevelsLineOffsetInBars = input(0, 'Line Offset (in bars)', group=groupSessionLevels)
// labels
sessionLabelOffsetInBars = input(-3, 'Label Offset (in bars)', group=groupSessionLevels)
sessionLabelStyle = input(label.style_none, 'Session Label Style', group=groupSessionLevels, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
sessionLabelOpacity = input(70, 'Label Opacity', group=groupSessionLevels, minval=0, maxval=100)
sessionLabelSize = input(size.normal, 'Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupSessionLevels)
// time ranges
asianTimeRange = input('0000-0600:1234567', 'Asian Session Time', group=groupSessionLevels, type=input.session)
londonTimeRange = input('0800-1630:1234567', 'London Session Time', group=groupSessionLevels, type=input.session)
nyTimeRange = input('1330-2000:1234567', 'New York Session Time', group=groupSessionLevels, type=input.session)
mt4DailyOpenTimeRange = input('2200-2201:1234567', 'MT4 Daily Open', group=groupSessionLevels, type=input.session)

// asian
asianOpenPlotStyle = input(plot.style_cross, 'Asian Open Plot Style', group=groupSessionLevels, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
asianOpenLineStyle = input(line.style_solid, 'Asian Open Line Style', group=groupSessionLevels, options=[line.style_solid, line.style_dashed, line.style_dotted])
asianStartHour = input(20, 'Asian Start Hour', minval=0, maxval=23, group=groupSessionLevels)
asianEndHour = input(4, 'Asian End Hour', minval=0, maxval=23, group=groupSessionLevels)
asianHoldTimeInHours = input(16, "Asian Holding Time", input.integer, minval=0, maxval = 23, tooltip = TT_PR, group=groupSessionLevels)
// london
londonOpenPlotStyle = input(plot.style_circles, 'London Open Plot Style', group=groupSessionLevels, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
londonOpenLineStyle = input(line.style_solid, 'London Open Line Style', group=groupSessionLevels, options=[line.style_solid, line.style_dashed, line.style_dotted])
londonStartHour = input(4, 'London Start Hour', minval=0, maxval=23, group=groupSessionLevels)
londonEndHour = input(13, 'London End Hour', minval=0, maxval=23, group=groupSessionLevels)
londonHoldTimeInHours = input(0, "London Holding Time", input.integer, minval=0, maxval = 23, tooltip = TT_PR, group=groupSessionLevels)
// new york
nyOpenPlotStyle = input(plot.style_cross, 'NY Open Plot Style', group=groupSessionLevels, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
nyOpenLineStyle = input(line.style_solid, 'NY Open Line Style', group=groupSessionLevels, options=[line.style_solid, line.style_dashed, line.style_dotted])
nyStartHour = input(9, 'New York Start Hour', minval=0, maxval=23, group=groupSessionLevels)
nyEndHour = input(17, 'New York End Hour', minval=0, maxval=23, group=groupSessionLevels)
nyHoldTimeInHours = input(0, "New York Holding Time", input.integer, minval=0, maxval = 23, tooltip = TT_PR, group=groupSessionLevels)
// mt4 daily open
mt4DailyOpenLineStyle = input(line.style_solid, 'MT4 Daily Open Line Style', group=groupSessionLevels, options=[line.style_solid, line.style_dashed, line.style_dotted])


// opacity
sessionLevelsSessionHighLowLineOpacity = input(30, 'Opacity - Session H/L', minval=0, maxval=100, group=groupSessionLevels)
sessionLevelsSessionFillOpacity = input(97, 'Opacity - Session Fill', minval=0, maxval=100, group=groupSessionLevels)
sessionLevelsHoldingHighLowLineOpacity = input(60, 'Opacity - Hold H/L', minval=0, maxval=100, group=groupSessionLevels)
sessionLevelsHoldFillOpacity = input(100, 'Opacity - Hold Fill', minval=0, maxval=100, group=groupSessionLevels)
sessionLevelsOpenLineOpacity = input(10, 'Opacity - Open Line', minval=0, maxval=100, group=groupSessionLevels)

// days
sessionLevelsLookbackHours = input(6, 'Lookback Hours', input.integer, minval=0, maxval=24, tooltip=TT_LB, group=groupSessionLevels)
sessionLevelsTZShiftHours  = input( 4, "Timezone Adjust (in hours)", input.integer, minval = -12, maxval = 14, tooltip = TT_TZ, group=groupSessionLevels)

f_timeShift24( _input, _offset ) =>
    int _shift = _input + _offset
    _return = _shift > 23 ? _shift - 24 :
              _shift < 0  ? 24 + _shift : _shift

f_isTime( _input ) => int( hour ) == _input

_captureSesionLevels(timeRange) => 
    _inSession = _isInSession(timeRange)
    _inHolding = not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := high > _sessionHigh ? high : _sessionHigh
            _sessionLow  := low  < _sessionLow  ? low  : _sessionLow

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

f_captureSessionHL(_inSession,_inHolding) =>
    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := high > _sessionHigh ? high : _sessionHigh
            _sessionLow  := low  < _sessionLow  ? low  : _sessionLow
    
    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen
    
    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]
    
_isWithinSessionLevelsLookbackPeriod() => 
    // the session start time must be after the lookback time
    lookbackTimeInMs = MS_PER_HOUR * sessionLevelsLookbackHours
    _currentBarTime() > (timenow - lookbackTimeInMs)
    
    // lookbackHours = (24 * sessionLevelsLookbackDays) + hour
    // timeOfSessionBeginning = _getTimeAtStartOfHourNHoursAgo(lookbackHours)
    // timeAtBeginningOfLookbackDay = _getStartTimeNDaysBack(sessionLevelsLookbackDays)
    // timeAtBeginningOfLookbackDay < timeOfSessionBeginning

_calcInSessionAndInHold(isSessionStart, isSessionEnd, isSessionHold, timeRange) =>
    var bool inSession = false
    var bool inHolding = false

    inSession  := isSessionStart and not isSessionStart[1] ? true  :
              isSessionEnd[1] and not isSessionEnd     ? false : inSession
    
    inHolding := isSessionEnd[1] and not isSessionEnd     ? true  :
              isSessionHold[1] and not isSessionHold   ? false : inHolding
    
    [inSession, inHolding]

_getLevelsColors(masterColor, inSession, inHolding, openPlotActive, highLowPlotActive) => 
    openLineColor = openPlotActive and (inSession or inHolding) ? color.new(masterColor, sessionLevelsOpenLineOpacity) : na
    
    highLowLineColor = not highLowPlotActive ? na : 
              inSession ? color.new(masterColor, sessionLevelsSessionHighLowLineOpacity ) :
              inHolding ? color.new(masterColor, sessionLevelsHoldingHighLowLineOpacity) : na
            
    fillColor = not highLowPlotActive ? na : 
              inSession ? color.new(masterColor, sessionLevelsSessionFillOpacity ) :
              inHolding ? color.new(masterColor, sessionLevelsHoldFillOpacity) : na

    [openLineColor, highLowLineColor, fillColor]


_getValuesToPlotSessionLevels(timeRange, startHour, endHour, holdHour, hourShift, masterColor, openPlotActive, highLowPlotActive) => 
    bool isStart = f_isTime( f_timeShift24( startHour, hourShift ) )
    bool isEnd   = f_isTime( f_timeShift24( endHour,   hourShift ) )
    bool isHold  = f_isTime( f_timeShift24( holdHour,  hourShift ) )
    
    // [isInSession, isInHolding] = _calcInSessionAndInHold(isStart, isEnd, isHold, timeRange)
    isInSession = _isInSession(timeRange)
    isInHolding = not isInSession

    [sessionHigh, sessionLow, sessionOpen] = f_captureSessionHL( isInSession, isInHolding )

    // color lineColor = isInSession ? sessionLineColor : isInHolding ? holdingLineColor : na
    // color fillColor = isInSession ? sessionFillColor : isInHolding ? holdingFillColor : na

    [openLineColor, highLowLineColor, fillColor] = _getLevelsColors(masterColor, isInSession, isInHolding, openPlotActive, highLowPlotActive)

    conditionsMet = _isWithinSessionLevelsLookbackPeriod()

    if conditionsMet
        [sessionHigh, sessionLow, sessionOpen, openLineColor, highLowLineColor, fillColor]
    else 
        [na, na, na, na, na, na]

// ====================================
// Session Levels using plot
// ====================================

// -------------
// Plot + Fill
// -------------

[asianHigh, asianLow, asianOpen, asianOpenLineColor, asianHighLowLineColor, asianFillColor] = _getValuesToPlotSessionLevels(asianTimeRange, asianStartHour, asianEndHour, asianHoldTimeInHours, sessionLevelsTZShiftHours, asianMasterColor, asianOpenPlotActive, asianHighLowPlotActive)
// asianPlotHigh = plot(asianHigh, "Asia High", asianHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowPlotStyle, join=sessionLevelsLinesJoined)
// asianPlotLow  = plot(asianLow,  "Asia Low",  asianHighLowLineColor,  sessionLevelsLineWidth, sessionLevelsHighLowPlotStyle, join=sessionLevelsLinesJoined)
// asianPlotOpen  = plot(asianOpen,  "Asia Low",  asianOpenLineColor,  sessionLevelsLineWidth, asianOpenPlotStyle, join=sessionLevelsLinesJoined)
// fill(asianPlotHigh, asianPlotLow, asianFillColor)

[londonHigh, londonLow, londonOpen, londonOpenLineColor, londonHighLowLineColor, londonFillColor] = _getValuesToPlotSessionLevels(londonTimeRange, londonStartHour, londonEndHour, londonHoldTimeInHours, sessionLevelsTZShiftHours, londonMasterColor, londonOpenPlotActive, londonHighLowPlotActive)
// londonPlotHigh = plot(londonHigh, "London Session High", londonHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowPlotStyle, join=sessionLevelsLinesJoined)
// londonPlotLow  = plot(londonLow,  "London Low",  londonHighLowLineColor,  sessionLevelsLineWidth, sessionLevelsHighLowPlotStyle, join=sessionLevelsLinesJoined)
// londonPlotOpen  = plot(londonOpen,  "London Low",  londonOpenLineColor,  sessionLevelsLineWidth, londonOpenPlotStyle, join=sessionLevelsLinesJoined)
// fill(londonPlotHigh, londonPlotLow, londonFillColor)

[nyHigh, nyLow, nyOpen, nyOpenLineColor, nyHighLowLineColor, nyFillColor] = _getValuesToPlotSessionLevels(nyTimeRange, nyStartHour, nyEndHour, nyHoldTimeInHours, sessionLevelsTZShiftHours, nyMasterColor, nyOpenPlotActive, nyHighLowPlotActive)
// nyPlotHigh = plot(nyHigh, "New York Session High", nyHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowPlotStyle, join=sessionLevelsLinesJoined)
// nyPlotLow  = plot(nyLow,  "New York Session Low",  nyHighLowLineColor,  sessionLevelsLineWidth, sessionLevelsHighLowPlotStyle, join=sessionLevelsLinesJoined)
// nyPlotOpen  = plot(nyOpen,  "New York Session Low",  nyOpenLineColor,  sessionLevelsLineWidth, nyOpenPlotStyle, join=sessionLevelsLinesJoined)
// fill(nyPlotHigh, nyPlotLow, nyFillColor)

[mt4High, mt4Low, mt4Open] = _captureSesionLevels(mt4DailyOpenTimeRange)

// ------------------
// Labels
// ------------------

_drawSessionnLabel(x, y, text, style, size, Color, textColor) => 
    x and y ? label.new(x, y, text, style=style, textcolor=textColor, color=color.new(Color, sessionLabelOpacity), size=size, xloc=xloc.bar_time) : na



sessionLabelX2 = _getTimeNBarsFromNow(sessionLabelOffsetInBars)

// asianHighlabelId = _drawSessionnLabel(sessionLabelX2, asianHigh, 'Asia High', sessionLabelStyle, size.normal, asianMasterColor, color.white)
// label.delete(asianHighlabelId[1])

// asianLowlabelId = _drawSessionnLabel(sessionLabelX2, asianLow, 'Asia Low', sessionLabelStyle, size.normal, asianMasterColor, color.white)
// label.delete(asianLowlabelId[1])

// asianOpenLabelId = _drawSessionnLabel(sessionLabelX2, asianOpen, 'Daily Open', sessionLabelStyle, size.normal, asianMasterColor, color.white)
// label.delete(asianOpenLabelId[1])

// londonOpenLabelId = _drawSessionnLabel(sessionLabelX2, londonOpen, 'London Open', sessionLabelStyle, size.normal, londonMasterColor, color.white)
// label.delete(londonOpenLabelId[1])

// nyOpenLabelId = _drawSessionnLabel(sessionLabelX2, nyOpen, 'NY Open', sessionLabelStyle, size.normal, nyMasterColor, color.white)
// label.delete(nyOpenLabelId[1])

// ====================================
// Session Levels using labelled lines
// ====================================

var line asianOpenLineId = na
var line asianHighLineId = na
var line asianLowLineId = na
var line nyOpenLineId = na
var line nyHighLineId = na
var line nyLowLineId = na
var line londonOpenLineId = na
var line londonHighLineId = na
var line londonLowLineId = na
var line mt4DailyOpenLineId = na

_drawSessionLines() =>
    x1 = _getTimeNBarsFromNow(sessionLevelsLineOffsetInBars)
    x2 = _getTimeNBarsFromNow(sessionLevelsLineOffsetInBars + sessionLevelsLineLengthInBars)
    
    asianLabelColor = color.new(asianMasterColor, sessionLabelOpacity)
    nyLabelColor = color.new(nyMasterColor, sessionLabelOpacity)
    nyHighLowLabelVisible = false
    londonLabelColor = color.new(londonMasterColor, sessionLabelOpacity)
    londonHighLowLabelVisible = false
    mt4DailyOpenHightLowLabelVisible = false
    
    labelTextColor = color.new(color.white, 0)
    labelSize = sessionLabelSize
    labelVisible = true

    _asianOpenLineId = _drawLabelledLine(asianOpenLineId, x1, x2, asianOpen, asianOpenLineColor, sessionLevelsLineWidth, asianOpenLineStyle, sessionLevelsLineExtend, 'Daily Open', sessionLabelStyle, asianLabelColor, labelTextColor, labelSize, labelVisible, sessionLabelOffsetInBars)
    _asianHighLineId = _drawLabelledLine(asianHighLineId, x1, x2, asianHigh, asianHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, sessionLevelsLineExtend, 'Asia High', sessionLabelStyle, asianLabelColor, labelTextColor, labelSize, labelVisible, sessionLabelOffsetInBars)
    _asianLowLineId = _drawLabelledLine(asianLowLineId, x1, x2, asianLow, asianHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, sessionLevelsLineExtend, 'Asia Low', sessionLabelStyle, asianLabelColor, labelTextColor, labelSize, labelVisible, sessionLabelOffsetInBars)
    
    _nyOpenLineId = _drawLabelledLine(nyOpenLineId, x1, x2, nyOpen, nyOpenLineColor, sessionLevelsLineWidth, nyOpenLineStyle, sessionLevelsLineExtend, 'NY Open', sessionLabelStyle, nyLabelColor, labelTextColor, labelSize, labelVisible, sessionLabelOffsetInBars)
    _nyHighLineId = _drawLabelledLine(nyHighLineId, x1, x2, nyHigh, nyHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, sessionLevelsLineExtend, 'NY High', sessionLabelStyle, nyLabelColor, labelTextColor, labelSize, nyHighLowLabelVisible, sessionLabelOffsetInBars)
    _nyLowLineId = _drawLabelledLine(nyLowLineId, x1, x2, nyLow, nyHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, sessionLevelsLineExtend, 'NY Low', sessionLabelStyle, nyLabelColor, labelTextColor, labelSize, nyHighLowLabelVisible, sessionLabelOffsetInBars)

    _londonOpenLineId = _drawLabelledLine(londonOpenLineId, x1, x2, londonOpen, londonOpenLineColor, sessionLevelsLineWidth, londonOpenLineStyle, sessionLevelsLineExtend, 'London Open', sessionLabelStyle, londonLabelColor, labelTextColor, labelSize, labelVisible, sessionLabelOffsetInBars)
    _londonHighLineId = _drawLabelledLine(londonHighLineId, x1, x2, londonHigh, londonHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, sessionLevelsLineExtend, 'London York High', sessionLabelStyle, londonLabelColor, labelTextColor, labelSize, londonHighLowLabelVisible, sessionLabelOffsetInBars)
    _londonLowLineId = _drawLabelledLine(londonLowLineId, x1, x2, londonLow, londonHighLowLineColor, sessionLevelsLineWidth, sessionLevelsHighLowLineStyle, sessionLevelsLineExtend, 'London Low', sessionLabelStyle, londonLabelColor, labelTextColor, labelSize, londonHighLowLabelVisible, sessionLabelOffsetInBars)
    
    _mt4DailyOpenLineId = _drawLabelledLine(mt4DailyOpenLineId, x1, x2, mt4DailyOpenPlotActive ? mt4Open : na, mt4DailyOpenColor, sessionLevelsLineWidth, mt4DailyOpenLineStyle, sessionLevelsLineExtend, 'MT4 Daily Open', sessionLabelStyle, londonLabelColor, labelTextColor, labelSize, labelVisible, sessionLabelOffsetInBars)
    
    [_asianOpenLineId, _asianHighLineId, _asianLowLineId, _nyOpenLineId, _nyHighLineId, _nyLowLineId, _londonOpenLineId, _londonHighLineId, _londonLowLineId, _mt4DailyOpenLineId]


[_asianOpenLineId, _asianHighLineId, _asianLowLineId, _nyOpenLineId, _nyHighLineId, _nyLowLineId, _londonOpenLineId, _londonHighLineId, _londonLowLineId, _mt4DailyOpenLineId] = _drawSessionLines()

// Pine Script won't let these IDs be set in the method, so have to do it here.  Stupid.

if na(_asianOpenLineId) 
    asianOpenLineId := _asianOpenLineId

if na(_asianHighLineId)
    asianHighLineId := _asianHighLineId

if na(_asianLowLineId)
    asianLowLineId := _asianLowLineId

if na(_nyOpenLineId)
    nyOpenLineId := _nyOpenLineId

if na(_nyHighLineId)
    nyHighLineId := _nyHighLineId

if na(_nyLowLineId)
    nyLowLineId := _nyLowLineId

if na(_londonOpenLineId)
    londonOpenLineId := _londonOpenLineId

if na(_londonHighLineId)
    londonHighLineId := _londonHighLineId

if na(_londonLowLineId)
    londonLowLineId := _londonLowLineId

if na(_mt4DailyOpenLineId)
    mt4DailyOpenLineId := _mt4DailyOpenLineId