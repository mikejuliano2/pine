//@version=4

study("MJ - Session Levels", overlay=true)

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1
COLOR_GREEN = #4caf50
COLOR_ROYAL_BLUE = #1848cc
COLOR_TURQUOISE = #00897b
COLOR_PEACH = #e57373

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

// new_bar: check if we're on a new bar within the session in a given resolution
new_bar(res) => change(time(res)) != 0

//////////////////////////////////////////////////////////////////
// 
// ==== PLOT UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

_drawLabelledLine(lineId, x1, x2, y, _color, _width, _style, _extend, labelText, labelStyle, labelColor, labelTextColor, labelSize, showLabel, labelOffsetInBars, showPrice) => 
    // x1 and x2 are in time (not bars)

    _lineId = lineId

    if na(_lineId)
        _lineId := line.new(x1, y, x2, y, xloc.bar_time, _extend)

    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)

    if not na(_lineId[1])
        line.delete(_lineId[1])

    // ----------------
    // draw the label
    // ----------------

    if showLabel
        _labelText = showPrice ? labelText + ' (' + tostring(y) + ')' : labelText
        timePerBar = time[0] - time[1]
        labelTime = x2 + (labelOffsetInBars * timePerBar)
        labelId = label.new(labelTime, y, _labelText, textcolor=labelTextColor, style=labelStyle, size=labelSize, xloc=xloc.bar_time, color=labelColor)
        label.delete(labelId[1])

    _lineId


//////////////////////////////////////////////////////////////////
// 
// ==== INPUTS ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils, plotUtils
// -----------------------

groupOffset = 'Offset'
groupFill = 'Fill'
groupPlotSwitches = 'Plot Switches'
groupLineSwitches = 'Line Switches'
groupColors = 'Colors'
groupTimeRanges = 'Time Ranges'
groupLineStyle = 'Line Style'
groupLabels = 'Labels'
groupDailyOpenPlot='Daily Open Plot'
groupMarkers='Markers'

// ----------------------------------------------------------------------------------
// tooltips
string TT_PR = "Final time to which the High and Low of the session will be held"
string TT_TZ = "Offsets all time inputs together to help align to preferred timezone"
string TT_LB = "The number of days back to plot the session levels"

// switches

plotLondonOpenActive = input(true, 'Plot - London Open', group=groupPlotSwitches)
plotNyOpenActive = input(false, 'Plot - NY Open', group=groupPlotSwitches)
plotDailyOpenActive = input(true, 'Plot - Daily Open', group=groupPlotSwitches)
plotMt4DailyOpenActive = input(false, 'Plot - MT4 Daily Open', group=groupPlotSwitches)
fillAsianSession = input(true, 'Fill - Asian Session', group=groupPlotSwitches)
fillLondonSession = input(false, 'Fill - London Session', group=groupPlotSwitches)
fillNySession = input(true, 'Fill - NY Session', group=groupPlotSwitches)

lineLondonOpenActive = input(true, 'Line - London Open', group=groupLineSwitches)
lineNyOpenActive = input(true, 'Line - NY Open', group=groupLineSwitches)
lineNyHighLowActive = input(false, 'Line - NY HL', group=groupLineSwitches)
lineLondonHighLowActive = input(false, 'Line - London HL', group=groupLineSwitches)
lineMt4DailyOpenActive = input(true, 'Line - MT4 Daily Open', group=groupLineSwitches)

// master colors

dailyOpenColor = input(#2962ff, 'Daily Open Color', input.color, group=groupColors)
mt4DailyOpenColor = input(#2962ff, 'MT4 Daily Open Color', input.color, group=groupColors)

asiaMasterColor = input(#0b3d37, 'Master - Asia', input.color, group=groupColors)
londonMasterColor = input(#ff851a, 'Master - London', input.color, group=groupColors)
nyMasterColor = input(#880e4f, 'Master - New York', input.color, group=groupColors)
nyLineColor = input(COLOR_YELLOW, 'Line - New York', input.color, group=groupColors)
asiaLineColor = input(COLOR_TURQUOISE, 'Line - Asia', input.color, group=groupColors)
londonLineColor = input(COLOR_ORANGE, 'Line - London', input.color, group=groupColors)

// fill

asiaFillColor = input(color.new(#043c36, 20), 'Fill - Asia', input.color, group=groupFill)
londonFillColor = input(color.new(#1a1736, 20), 'Fill - London', input.color, group=groupFill)
nyFillColor = input(color.new(#4e092e, 60), 'Fill - New York', input.color, group=groupFill)

sessionFillOpacity = input(60, 'Opacity - Session Fill', minval=0, maxval=100, group=groupFill)
overrideFillOpacity = input(false, 'Override Fill Opacity', group=groupFill, tooltip='If true, use a consistent opacity for all session fills.')

sessionLevelsLinesJoined = input(false, 'Join points?', group=groupFill)
asianOpenPlotStyle = input(plot.style_stepline, 'Plot Style - Asia Open', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
londonOpenPlotStyle = input(plot.style_stepline, 'Plot Style - London Open', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
nyOpenPlotStyle = input(plot.style_stepline, 'Plot Style - NY Open', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])

sessionLevelsHighLowPlotStyle = input(plot.style_stepline, 'Plot Style - H/L', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])

sessionHighLowLineOpacity = input(50, 'Opacity - Session H/L', minval=0, maxval=100, group=groupFill) // TODO this applies to line and fill
sessionLevelsOpenLineOpacity = input(10, 'Opacity - Open Line', minval=0, maxval=100, group=groupFill) // TODO this applies to line and fill
sessionLevelsLookbackHours = input(0, 'Lookback Hours', input.integer, minval=0, maxval=24, tooltip=TT_LB, group=groupFill)
sessionFillMaxTimeframe = input(title='Max Timeframe - Session Fill', defval=15, maxval=240, minval=1, group=groupFill)

// daily open plot

dailyOpenPlotStyle = input(plot.style_stepline, 'Plot Style - Daily Open', group=groupDailyOpenPlot, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
mt4DailyOpenPlotStyle = input(plot.style_circles, 'Plot Style - MT4 Daily Open', group=groupDailyOpenPlot, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
dailyOpenPlotOpacity = input(0, 'Plot Opacity - Daily Open', group=groupDailyOpenPlot, minval=0, maxval=100)
mt4DailyOpenPlotOpacity = input(50, 'Plot Opacity - MT4 Daily Open', group=groupDailyOpenPlot, minval=0, maxval=100)
dailyOpenPlotMaxTimeframe = input(title='Max Timeframe', defval=15, maxval=240, minval=1, group=groupDailyOpenPlot)

// line style

sessionLevelsLineOffsetInBars = input(15, 'Line Offset (in bars)', group=groupLineStyle)
sessionLevelsLineLengthInBars = input(20, 'Line Length (in bars)', group=groupLineStyle)
sessionLabelOffsetInBars = input(-5, 'Label Offset (in bars)', group=groupLineStyle)

dailyOpenLineExtend = input(extend.none, 'Daily Open Line Extend', options=[extend.none, extend.left, extend.right, extend.both], group=groupLineStyle)
sessionLevelsLineExtend = input(extend.none, 'Session Levels Line Extend', options=[extend.none, extend.left, extend.right, extend.both], group=groupLineStyle)

sessionLevelsHighLowLineStyle = input(line.style_solid, 'Line Style - H/L', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
sessionLevelsLineWidth = input(2, 'Line Width', group=groupLineStyle, options=[1,2,3,4])

asianOpenLineStyle = input(line.style_solid, 'Line Style - Asia Open', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
londonOpenLineStyle = input(line.style_solid, 'Line Style - London Open', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
nyOpenLineStyle = input(line.style_solid, 'Line Style - NY Open', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
dailyOpenLineStyle = input(line.style_solid, 'Line Style - Daily Open', group=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// labels

sessionLabelStyle = input(label.style_none, 'Session Label Style', group=groupLabels, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
sessionLabelOpacity = input(70, 'Label Opacity', group=groupLabels, minval=0, maxval=100)
sessionLabelSize = input(size.normal, 'Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupLabels)
sessionLabelShowPrice = input(false, 'Show Price in Label?', group=groupLabels)

// time ranges

asiaTimeRange = input('0000-0600:23456', 'Asian Session Time', group=groupTimeRanges, type=input.session)
londonTimeRange = input('0800-1600:23456', 'London Session Time', group=groupTimeRanges, type=input.session)
nyTimeRange = input('1330-2100:23456', 'New York Session Time', group=groupTimeRanges, type=input.session)
dailyOpenTimeRange = input('0000-0015:1234567', 'Daily Open Time', group=groupTimeRanges, type=input.session)
mt4DailyOpenTimeRange = input('2200-2215:1234567', 'MT4 Daily Open Time', group=groupTimeRanges, type=input.session)

_captureSessionLevels(timeRange) => 
    _inSession = _isInSession(timeRange)
    _inHolding = not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := max(high, _sessionHigh)
            _sessionLow  := min(low, _sessionLow)

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

_isWithinSessionLevelsLookbackPeriod() => 
    // the session start time must be after the lookback time
    if sessionLevelsLookbackHours > 0
        lookbackTimeInMs = MS_PER_HOUR * sessionLevelsLookbackHours
        _currentBarTime() > (timenow - lookbackTimeInMs)
    else 
        true
    
    // lookbackHours = (24 * sessionLevelsLookbackDays) + hour
    // timeOfSessionBeginning = _getTimeAtStartOfHourNHoursAgo(lookbackHours)
    // timeAtBeginningOfLookbackDay = _getStartTimeNDaysBack(sessionLevelsLookbackDays)
    // timeAtBeginningOfLookbackDay < timeOfSessionBeginning

_getLevelsColors(masterColor, inSession, openPlotActive, highLowPlotActive, fillColor) => 
    openLineColor = openPlotActive and inSession ? color.new(masterColor, sessionLevelsOpenLineOpacity) : na
    
    highLowLineColor = not highLowPlotActive ? na : 
              inSession ? color.new(masterColor, sessionHighLowLineOpacity ) : na
            
    fc = overrideFillOpacity ? color.new(fillColor, sessionFillOpacity) : fillColor

    _fillColor = not highLowPlotActive ? na : 
              inSession and inSession[1] ? fc : na

    [openLineColor, highLowLineColor, _fillColor]    

_getValuesForSessionFillPlotting(timeRange, masterColor, openPlotActive, highLowPlotActive, fillColor) => 
    isInSession = _isInSession(timeRange)

    [sessionHigh, sessionLow, sessionOpen] = _captureSessionLevels(timeRange)
    
    [openLineColor, highLowLineColor, _fillColor] = _getLevelsColors(masterColor, isInSession, openPlotActive, highLowPlotActive, fillColor)

    isWithinMaxTimeframe = timeframe.multiplier <= sessionFillMaxTimeframe and timeframe.isintraday
    conditionsMet = _isWithinSessionLevelsLookbackPeriod() and isWithinMaxTimeframe

    if conditionsMet
        [sessionHigh, sessionLow, sessionOpen, openLineColor, highLowLineColor, _fillColor]
    else 
        [na, na, na, na, na, na]

/////////////////////////////////////////////////////////
// 
// --- Session Levels using plot ---
// 
/////////////////////////////////////////////////////////

// -------------
// Plot + Fill
// -------------

[asiaHigh, asiaLow, asiaOpen, asiaOpenLineColor, asiaHighLowLineColor, _asiaFillColor] = _getValuesForSessionFillPlotting(
     asiaTimeRange, 
     asiaMasterColor, 
     true, 
     true,
     asiaFillColor)

asiaPlotHigh = plot(
      fillAsianSession ? asiaHigh : na, 
      "Asia High", 
      asiaHighLowLineColor, 
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)

asiaPlotLow  = plot(
      fillAsianSession ? asiaLow : na, 
      "Asia Low",  
      asiaHighLowLineColor,  
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)
fill(asiaPlotHigh, asiaPlotLow, _asiaFillColor)

[londonHigh, londonLow, londonOpen, londonOpenPlotColor, londonHLPlotColor, _londonFillColor] = _getValuesForSessionFillPlotting(
     londonTimeRange, 
     londonMasterColor, 
     true, 
     true,
     londonFillColor)

londonPlotOpen  = plot(
      plotLondonOpenActive ? londonOpen : na,  
      "London Open",  
      londonOpenPlotColor,  
      sessionLevelsLineWidth, 
      londonOpenPlotStyle, 
      join=sessionLevelsLinesJoined)

londonPlotHigh = plot(
      fillLondonSession ? londonHigh : na, 
      "London Session High", 
      londonHLPlotColor, 
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)
      
londonPlotLow  = plot(
      fillLondonSession ? londonLow : na,  
      "London Low",  
      londonHLPlotColor,  
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)

fill(londonPlotHigh, londonPlotLow, _londonFillColor)

[nyHigh, nyLow, nyOpen, nyOpenLineColor, nyHighLowLineColor, _nyFillColor] = _getValuesForSessionFillPlotting(
      nyTimeRange, 
      nyMasterColor, 
      true, 
      true,
      nyFillColor)

nyPlotOpen  = plot(
      plotNyOpenActive ? nyOpen : na,  
      "New York Open",  
      nyOpenLineColor,  
      sessionLevelsLineWidth, 
      nyOpenPlotStyle, 
      join=sessionLevelsLinesJoined)

nyPlotHigh = plot(
      fillNySession ? nyHigh : na, 
      "New York Session High", 
      nyHighLowLineColor, 
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)

nyPlotLow  = plot(
      fillNySession ? nyLow : na,  
      "New York Session Low",  
      nyHighLowLineColor,  
      sessionLevelsLineWidth, 
      sessionLevelsHighLowPlotStyle, 
      join=sessionLevelsLinesJoined)

fill(nyPlotHigh, nyPlotLow, _nyFillColor)

////////////////////////////////////////////////////////
// 
// ---- Daily Open Plot ---
// 
////////////////////////////////////////////////////////

[mt4High, mt4Low, mt4Open] = _captureSessionLevels(mt4DailyOpenTimeRange)
[dailyHigh, dailyLow, dailyOpen] = _captureSessionLevels(dailyOpenTimeRange)

isValidTimeframeToPlotDailyOpen = timeframe.multiplier <= dailyOpenPlotMaxTimeframe

dailyOpenPlot  = plot(
     plotDailyOpenActive and isValidTimeframeToPlotDailyOpen ? dailyOpen : na,  
     "Daily Open",  
     plotDailyOpenActive ? color.new(dailyOpenColor, dailyOpenPlotOpacity) : na,  
     sessionLevelsLineWidth, 
     dailyOpenPlotStyle, 
     join=sessionLevelsLinesJoined)

mt4DailyOpenPlot  = plot(
     plotMt4DailyOpenActive and isValidTimeframeToPlotDailyOpen ? mt4Open : na,  
     "MT4 Daily Open",  
     plotMt4DailyOpenActive ? color.new(mt4DailyOpenColor, mt4DailyOpenPlotOpacity) : na,  
     sessionLevelsLineWidth, 
     mt4DailyOpenPlotStyle, 
     join=sessionLevelsLinesJoined)

// ------------------
// Labels
// ------------------

// _drawSessionnLabel(x, y, text, style, size, Color, textColor) => 
//     x and y ? label.new(x, y, text, style=style, textcolor=textColor, color=color.new(Color, sessionLabelOpacity), size=size, xloc=xloc.bar_time) : na

// sessionLabelX2 = _getTimeNBarsFromNow(sessionLabelOffsetInBars)

// asianHighlabelId = _drawSessionnLabel(sessionLabelX2, asiaHigh, 'Asia High', sessionLabelStyle, size.normal, asiaMasterColor, color.white)
// label.delete(asianHighlabelId[1])

// asianLowlabelId = _drawSessionnLabel(sessionLabelX2, asiaLow, 'Asia Low', sessionLabelStyle, size.normal, asiaMasterColor, color.white)
// label.delete(asianLowlabelId[1])

// asianOpenLabelId = _drawSessionnLabel(sessionLabelX2, asiaOpen, 'Daily Open', sessionLabelStyle, size.normal, asiaMasterColor, color.white)
// label.delete(asianOpenLabelId[1])

// londonOpenLabelId = _drawSessionnLabel(sessionLabelX2, londonOpen, 'London Open', sessionLabelStyle, size.normal, londonMasterColor, color.white)
// label.delete(londonOpenLabelId[1])

// nyOpenLabelId = _drawSessionnLabel(sessionLabelX2, nyOpen, 'NY Open', sessionLabelStyle, size.normal, nyMasterColor, color.white)
// label.delete(nyOpenLabelId[1])

////////////////////////////////////////////////////////
// 
// ---- Labelled Lines ---
// 
////////////////////////////////////////////////////////

var line asianOpenLineId = na
var line asianHighLineId = na
var line asianLowLineId = na
var line nyOpenLineId = na
var line nyHighLineId = na
var line nyLowLineId = na
var line londonOpenLineId = na
var line londonHighLineId = na
var line londonLowLineId = na
var line mt4DailyOpenLineId = na

_getLineColor(masterColor, opacity, isActive) => color.new(masterColor, isActive ? opacity : 100)

_drawSessionLines() =>
    x1 = _getTimeNBarsFromNow(sessionLevelsLineOffsetInBars)
    x2 = _getTimeNBarsFromNow(sessionLevelsLineOffsetInBars + sessionLevelsLineLengthInBars)
    
    nyHighLowLabelVisible = true
    londonHighLowLabelVisible = true
    mt4DailyOpenHighLowLabelVisible = false

    asianLabelColor = color.new(asiaMasterColor, sessionLabelOpacity)
    londonLabelColor = color.new(londonMasterColor, sessionLabelOpacity)
    nyLabelColor = color.new(nyMasterColor, sessionLabelOpacity)
    
    labelTextColor = color.new(color.white, 0)
    labelSize = sessionLabelSize
    labelVisible = true

    // ---------------
    // Asia Lines
    // ---------------

    _asianOpenLineId = _drawLabelledLine(
         asianOpenLineId, 
         x1, 
         x2, 
         dailyOpen, 
         mt4DailyOpenColor, 
         sessionLevelsLineWidth, 
         asianOpenLineStyle, 
         dailyOpenLineExtend, 
         'Daily Open', 
         sessionLabelStyle, 
         asianLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    _asianHighLineId = _drawLabelledLine(
         asianHighLineId, 
         x1, 
         x2, 
         asiaHigh, 
         asiaLineColor,
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle, 
         sessionLevelsLineExtend, 
         'Asia High', 
         sessionLabelStyle, 
         asianLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _asianLowLineId = _drawLabelledLine(
         asianLowLineId, 
         x1, 
         x2, 
         asiaLow, 
         asiaLineColor, 
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle, 
         sessionLevelsLineExtend, 
         'Asia Low', 
         sessionLabelStyle, 
         asianLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    // ---------------
    // New York Lines
    // ---------------

    _nyOpenLineId = _drawLabelledLine(
         nyOpenLineId, 
         x1, 
         x2, 
         lineNyOpenActive ? nyOpen : na, 
         _getLineColor(nyLineColor, sessionLevelsOpenLineOpacity, lineNyOpenActive),
         sessionLevelsLineWidth, 
         nyOpenLineStyle, 
         sessionLevelsLineExtend, 
         'NY Open', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    nyHLLineOpacity = lineNyHighLowActive ? 50 : 100
    _nyHighLineId = _drawLabelledLine(
         nyHighLineId, 
         x1, 
         x2, 
         lineNyHighLowActive ? nyHigh : na, 
         _getLineColor(nyLineColor, sessionHighLowLineOpacity, lineNyHighLowActive),
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'NY High', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         nyHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _nyLowLineId = _drawLabelledLine(
         nyLowLineId, 
         x1, 
         x2, 
         lineNyHighLowActive ? nyLow : na, 
         _getLineColor(nyLineColor, sessionHighLowLineOpacity, lineNyHighLowActive),
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'NY Low', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         nyHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    // ---------------
    // London Lines
    // ---------------         

    _londonOpenLineId = _drawLabelledLine(
         londonOpenLineId, 
         x1, 
         x2, 
         lineLondonOpenActive ? londonOpen : na, 
         _getLineColor(londonLineColor, sessionLevelsOpenLineOpacity, lineLondonOpenActive),
         sessionLevelsLineWidth, 
         londonOpenLineStyle, 
         sessionLevelsLineExtend, 
         'London Open', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    londonHLLineOpacity = lineNyHighLowActive ? 50 : 100
    _londonHighLineId = _drawLabelledLine(
         londonHighLineId, 
         x1, 
         x2, 
         lineLondonHighLowActive ? londonHigh : na, 
         _getLineColor(londonLineColor, sessionHighLowLineOpacity, lineLondonOpenActive),
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'London High', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         londonHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    _londonLowLineId = _drawLabelledLine(
         lineId=londonLowLineId, 
         x1=x1, 
         x2=x2, 
         y=lineLondonHighLowActive ? londonLow : na,
         _color=_getLineColor(londonLineColor, sessionHighLowLineOpacity, lineLondonOpenActive),
         _width=sessionLevelsLineWidth, 
         _style=sessionLevelsHighLowLineStyle,
         _extend=sessionLevelsLineExtend, 
         labelText='London Low', 
         labelStyle=sessionLabelStyle, 
         labelColor=londonLabelColor, 
         labelTextColor=labelTextColor, 
         labelSize=labelSize, 
         showLabel=londonHighLowLabelVisible, 
         labelOffsetInBars=sessionLabelOffsetInBars, 
         showPrice=sessionLabelShowPrice)
    
    _mt4DailyOpenLineId = _drawLabelledLine(
         mt4DailyOpenLineId, 
         x1, 
         x2, 
         lineMt4DailyOpenActive ? mt4Open : na, 
         mt4DailyOpenColor, 
         sessionLevelsLineWidth, 
         dailyOpenLineStyle, 
         dailyOpenLineExtend, 
         'MT4 Open', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    [_asianOpenLineId, _asianHighLineId, _asianLowLineId, _nyOpenLineId, _nyHighLineId, _nyLowLineId, _londonOpenLineId, _londonHighLineId, _londonLowLineId, _mt4DailyOpenLineId]


[_asianOpenLineId, _asianHighLineId, _asianLowLineId, _nyOpenLineId, _nyHighLineId, _nyLowLineId, _londonOpenLineId, _londonHighLineId, _londonLowLineId, _mt4DailyOpenLineId] = _drawSessionLines()

// Pine Script won't let these IDs be set in the method, so have to do it here.  Stupid.

if na(_asianOpenLineId) 
    asianOpenLineId := _asianOpenLineId

if na(_asianHighLineId)
    asianHighLineId := _asianHighLineId

if na(_asianLowLineId)
    asianLowLineId := _asianLowLineId

if na(_nyOpenLineId)
    nyOpenLineId := _nyOpenLineId

if na(_nyHighLineId)
    nyHighLineId := _nyHighLineId

if na(_nyLowLineId)
    nyLowLineId := _nyLowLineId

if na(_londonOpenLineId)
    londonOpenLineId := _londonOpenLineId

if na(_londonHighLineId)
    londonHighLineId := _londonHighLineId

if na(_londonLowLineId)
    londonLowLineId := _londonLowLineId

if na(_mt4DailyOpenLineId)
    mt4DailyOpenLineId := _mt4DailyOpenLineId


/////////////////////////////////////////////////////////////
// 
// --- MARKERS ---
//
/////////////////////////////////////////////////////////////

didCrossMT4DailyOpen = cross(close, mt4Open)
didCrossDailyOpen = cross(close, asiaOpen)
didCrossNyOpen = cross(close, nyOpen)
didCrossLondonOpen = cross(close, londonOpen)

markerCrossPlotStyle = input(
     shape.xcross, 
     'Cross Marker Style', 
     options=[shape.xcross, shape.cross, shape.triangleup, shape.triangledown, shape.flag, shape.circle, shape.arrowup, shape.arrowdown, shape.labelup, shape.labeldown, shape.square, shape.diamond], 
     group=groupMarkers)

markerCrossPlotLocation = input(
     location.bottom, 
     'Cross Marker Location', 
     options=[location.abovebar, location.belowbar, location.top, location.bottom, location.absolute], 
     group=groupMarkers)

markerOpacity = input(10, 'Marker Shape Opacity', minval=0, maxval=100, group=groupMarkers)
markerTextOpacity = input(0, 'Marker Text Opacity', minval=0, maxval=100, group=groupMarkers)
markerShapeSize = size.small // must be constant or compiler will complain

markerTextColorSameAsMarkerColor = input(false, 'Text Color Same As Marker Color?', group=groupMarkers)
showCrossMarkerMt4Open = input(false, 'Show Cross Marker - MT4 Daily Open', group=groupMarkers)
showCrossMarkerDailyOpen = input(false, 'Show Cross Marker - Daily Open', group=groupMarkers)
showCrossMarkerNyOpen = input(false, 'Show Cross Marker - NY Open', group=groupMarkers)
showCrossMarkerLondonOpen = input(false, 'Show Cross Marker - London Open', group=groupMarkers)

_markerTextColor(baseColor) => color.new(markerTextColorSameAsMarkerColor ? baseColor : color.white, markerTextOpacity)

plotshape(
     series=showCrossMarkerMt4Open ? didCrossMT4DailyOpen : na, 
     text='MT4',
     title='Cross - MT4 Daily Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(mt4DailyOpenColor, markerOpacity),
     textcolor=_markerTextColor(mt4DailyOpenColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerDailyOpen ? didCrossDailyOpen : na, 
     text='D',
     title='Cross - Daily Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(dailyOpenColor, markerOpacity),
     textcolor=_markerTextColor(dailyOpenColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerNyOpen ? didCrossNyOpen : na, 
     text='NY',
     title='Cross - NY Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(nyMasterColor, markerOpacity),
     textcolor=_markerTextColor(nyMasterColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerLondonOpen ? didCrossLondonOpen : na, 
     text='L',
     title='Cross - London', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(londonMasterColor, markerOpacity),
     textcolor=_markerTextColor(londonMasterColor),
     size=markerShapeSize)

/////////////////////////////////////////////////////////////
// 
// --- ALERTS ---
//
/////////////////////////////////////////////////////////////

alertcondition(didCrossMT4DailyOpen, title='Price x MT4 Daily Open', message='{{ticker}} Price x MT4 Daily Open')
alertcondition(didCrossDailyOpen, title='Price x Daily Open', message='{{ticker}} Price x Daily Open')
alertcondition(didCrossNyOpen, title='Price x NY Open', message='{{ticker}} Price x NY Open')
alertcondition(didCrossLondonOpen, title='Price x London Open', message='{{ticker}} Price x London Open')     










/////////////////////////////////////////////////////////
// 
// --- Session Levels using box ---
// 
/////////////////////////////////////////////////////////

// showGapBetweenBars = true

// _drawSessionBox(timeRange, masterColor, boxId) => 
//     timePerBar = time[0] - time[1]

//     isInSession = _isInSession(timeRange)
//     isFirstBarInSession = not na(isInSession[0]) and na(isInSession[1])
//     isFirstBarOutOfSession = na(isInSession[0]) and not na(isInSession[1])

//     [sessionHigh, sessionLow, sessionOpen, sessionOpenLineColor, sessionBorderColor, sessionFillColor] = _getValuesForSessionFillPlotting(
//          timeRange,
//          masterColor,
//          false,
//          true)

//     x2 = bar_index

//     if isFirstBarInSession
//         // create a new box
//         x1 = bar_index
//         box.new(x1, sessionHigh, x2, sessionLow, xloc=xloc.bar_index, border_width=sessionLevelsLineWidth, bgcolor=sessionFillColor)
//     else if isInSession
//         // update existing box
//         box.set_top(boxId, sessionHigh)
//         box.set_bottom(boxId, sessionLow)
//         box.set_right(boxId, x2)
//         boxId
//     else
//         box.delete(boxId)
//         na

// var box asiaBox = na
// _drawSessionBox(asiaTimeRange, asiaMasterColor, asiaBox)


// _print(_text) => var _label = label.new(bar_index, na, _text, xloc.bar_index, yloc.price, color(na), label.style_none, color.gray, size.large, text.align_left), label.set_xy(_label, bar_index, highest(10)[1]), label.set_text(_label, _text)
// _printNum(_num) => _print(tostring(_num))

// _printNum(time_close('30', '1330-2200:23456'))