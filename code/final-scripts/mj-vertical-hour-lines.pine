//@version=4

study("MJ - Vertical Hour Lines", overlay=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

//////////////////////////////////////////////////////////////////
// 
// ==== VERTICAL HOUR LINES ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils
// -----------------------

groupVerticalHourLInes = 'Vertical Hour Lines'
verticalHourLinesActive = input(false, 'Show Vertical Hour Lines', group=groupVerticalHourLInes)
maxTimeFrameToShowVerticalLines = input(title='Max timeframe to show hourly vertical lines', defval=5, maxval=60, minval=1, group=groupVerticalHourLInes)
hourLineColor = input(color.new(#fbc02d, 40), 'Vertical Hour Line Color', group=groupVerticalHourLInes)
hourLineStyle = input(line.style_dashed, 'Vertical Hour Line Style', group=groupVerticalHourLInes, options=[line.style_solid, line.style_dashed, line.style_dotted])
hourLineWidth = input(1, 'Vertical Hour Line Width', group=groupVerticalHourLInes, options=[1, 2, 3, 4])
numVerticalLinesBackward = input(6, 'Number of previous hour vertical lines to show', group=groupVerticalHourLInes, minval=0, maxval=100)

_isWithinVerticalHourLineLookbackPeriod() => 
    lookbackTimeInMs = MS_PER_DAY * numVerticalLinesBackward / 24
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - lookbackTimeInMs)

    // the start of the bar

_plotVerticalLineAtIndex(BarIndex, Color, LineStyle, LineWidth) => // Verticle Line Function, â‰ˆ50-54 lines maximum allowable per indicator
    return = line.new(BarIndex, low - tr, BarIndex, high + tr, xloc.bar_index, extend.both, Color, LineStyle, LineWidth) // Suitable for study(overlay=true)

_isAtOrBelowMaxTimeframe() => timeframe.multiplier <= maxTimeFrameToShowVerticalLines

_plotVerticalLineForNewBarsAtResolution(Resolution, Color, LineStyle, LineWidth, conditionsMet) =>
    isNewBar = _isFirstBarForCurrentTimeframeAtResolution(Resolution)
    barIndex = isNewBar and conditionsMet ? bar_index : na
    _plotVerticalLineAtIndex(barIndex, hourLineColor, hourLineStyle, hourLineWidth)

_plotHourLines() =>
    conditionsMet = _isAtOrBelowMaxTimeframe() and verticalHourLinesActive and _isWithinVerticalHourLineLookbackPeriod()
    _plotVerticalLineForNewBarsAtResolution('60', hourLineColor, hourLineStyle, hourLineWidth, conditionsMet)

_plotHourLines()