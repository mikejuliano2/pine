//@version=4

study("MJ - Day/Week HL", overlay=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

// new_bar: check if we're on a new bar within the session in a given resolution
new_bar(res) => change(time(res)) != 0

_securityRepaint(_symbol, _res, _src, _repaint) => security(_symbol, _res, _src[_repaint ? 0 : barstate.isrealtime ? 1 : 0])[_repaint ? 0 : barstate.isrealtime ? 0 : 1]

//////////////////////////////////////////////////////////////////
// 
// ==== PLOT UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

_drawLabelledLine(x1, x2, y, _color, _width, _style, _extend, labelText, labelStyle, labelColor, labelTextColor, labelSize, showLabel, labelOffsetInBars, showPrice) => 
    // x1 and x2 are in time (not bars)
    
    _lineId = line.new(x1, y, x2, y, xloc.bar_time, _extend)
    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)

    if not na(_lineId[1])
        line.delete(_lineId[1])

    // ----------------
    // draw the label
    // ----------------

    if showLabel
        _labelText = showPrice ? labelText + ' (' + tostring(y) + ')' : labelText
        timePerBar = time[0] - time[1]
        labelTime = x2 + (labelOffsetInBars * timePerBar)
        labelId = label.new(labelTime, y, _labelText, textcolor=labelTextColor, style=labelStyle, size=labelSize, xloc=xloc.bar_time, color=labelColor)
        label.delete(labelId[1])

    _lineId

//////////////////////////////////////////////////////////////////
// 
// ==== CALCULATIONS ==== 
// 
//////////////////////////////////////////////////////////////////

_adr(length) =>
    // This is effectively an atr, which is what is used in MT4 to get those levels. FWIW, true range can be also calculated with tr(true)
    trueRange = na(high[1])? high-low : max(max(high - low, abs(high - close[1])), abs(low - close[1]))
    // Switched to SMA from RMA because somehow it matches MT4 better
    sma(trueRange[1], length)
    
_adrHigh(adr) => high - low < adr ? low + adr : close >= open ? low + adr : high
_adrLow(adr) => high - low < adr ? high - adr : close >= open ? low : high - adr
_toPips(val) => round( (val/syminfo.mintick)*100)/100

adr      = security(syminfo.tickerid, 'D', _adr(15), lookahead=barmerge.lookahead_on)
adrHigh = security(syminfo.tickerid, 'D', _adrHigh(adr), lookahead=barmerge.lookahead_on)
adrLow  = security(syminfo.tickerid, 'D', _adrLow(adr), lookahead=barmerge.lookahead_on)
awr      = security(syminfo.tickerid, "W", _adr(1), lookahead=barmerge.lookahead_on)
awrHigh = security(syminfo.tickerid, "W", _adrHigh(awr), lookahead=barmerge.lookahead_on)
awrLow  = security(syminfo.tickerid, "W", _adrLow(awr),  lookahead=barmerge.lookahead_on)
amr      = security(syminfo.tickerid, "M", _adr(1),  lookahead=barmerge.lookahead_on)
amrHigh = security(syminfo.tickerid, "M", _adrHigh(amr), lookahead=barmerge.lookahead_on)
amrLow  = security(syminfo.tickerid, "M", _adrLow(amr), lookahead=barmerge.lookahead_on)

dayHigh = security(syminfo.tickerid, 'D', high[1], lookahead=true)
dayLow = security(syminfo.tickerid, 'D', low[1], lookahead=true)
dayOpen = security(syminfo.tickerid, 'D', open[1], lookahead=true)
dayClose = security(syminfo.tickerid, 'D', close[1], lookahead=true)
weekHigh = security(syminfo.tickerid, 'W', high[1], lookahead=true)
weekLow = security(syminfo.tickerid, 'W', low[1], lookahead=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DAILY/WEEKLY HIGH/LOW LINES ==== 
// 
//////////////////////////////////////////////////////////////////

groupShared = 'Shared'
groupYesterday = 'Yesterday'
groupLastWeek = 'Last Week'
groupAdr = 'ADR, AWR, AMR'

COLOR_LIME = #1cd206F
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1
COLOR_GREEN = #4caf50
COLOR_ROYAL_BLUE = #1848cc
COLOR_TURQUOISE = #00897b
COLOR_PEACH = #e57373

// *** `dwhl` stands for dailyWeeklyHighLow ***
sharedLineOffset = input(15, 'Line Offset (in bars)', group=groupShared)
sharedLineLength = input(20, 'Line Length (in bars)', group=groupShared)
sharedLabelOffset = input(4, 'Label Offset (in bars)', group=groupShared)
sharedLabelStyle = input(label.style_none, 'Label Style', options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle], group=groupShared)
sharedLabelVisible = input(true, 'Label Visible?', group=groupShared)
sharedLabelSize = input(size.normal, 'Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupShared)
sharedLineExtend = input(extend.none, 'Line Extend', options=[extend.none, extend.left, extend.right, extend.both], group=groupShared)
sharedLabelShowPrice = input(false, 'Show Price in Label?', group=groupShared)
sharedLineWidth = input(1, 'Line Width', options=[1,2,3,4], group=groupShared)

onlyShowYesterdayHighLowForCurrentDay = input(true, 'Only show yesterday H/L on current day?', group=groupShared)
onlyShowLastWeekHighLowForCurrentDay = input(true, 'Only show last week H/L on current day?', group=groupShared)

// *** `yhl` stands for yesterdayHighLow ***
yhlColor = input(color.new(#f44336, 0), 'Color', group=groupYesterday)
yhlLineStyle = input(line.style_solid, 'Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupYesterday)

// *** `lwhl` stands for lastWeekHighLow ***
lwhlColor = input(color.new(#9c27b0, 0), 'Color', group=groupLastWeek)
lwhlLineStyle = input(line.style_solid, 'Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLastWeek)

adrColor = input(color.new(COLOR_TEAL, 0), 'ADR Color', group=groupAdr)
awrColor = input(color.new(COLOR_GREEN, 0), 'AWR Color', group=groupAdr)
amrColor = input(color.new(COLOR_ROYAL_BLUE, 0), 'AMR Color', group=groupAdr)
adrLineStyle = input(line.style_solid, 'Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupAdr)


// _getLevelsStart() => 
//     levelsStartTime = iff((timeframe.isseconds == true) or (timeframe.isminutes == true and timeframe.multiplier < 5), time('D'), time('D') - (MS_PER_DAY))
//     levelsStartBar = barssince(levelsStartBar)
//     [levelsStartTime, levelsStartBar]

_doShowYesterdayHighLow() => 
    isValidTimeframe = timeframe.isintraday == true
    isValidDay = onlyShowYesterdayHighLowForCurrentDay ? _isCurrentDay() : true
    isValidTimeframe and isValidDay

_doShowLastWeekHighLow() => 
    isValidTimeframe = timeframe.isintraday == true or timeframe.isdaily == true
    isValidDay = onlyShowYesterdayHighLowForCurrentDay ? _isCurrentDay() : true
    isValidTimeframe and isValidDay


_getYesterdayHighLowValues() => 
    if _doShowYesterdayHighLow()
        [dayHigh, dayLow]
    else 
        [na, na]

_getLastWeekHighLowValues() => 
    if _doShowLastWeekHighLow()
        [weekHigh, weekLow]
    else 
        [na, na]

_drawDailyWeeklyHighLowLines(linesArray) => 
    initialArraySize = array.size(linesArray)

    [yesterdayHigh, yesterdayLow] = _getYesterdayHighLowValues()
    [lastWeekHigh, lastWeekLow] = _getLastWeekHighLowValues()

    x1 = _getTimeNBarsFromNow(sharedLineOffset)
    x2 = _getTimeNBarsFromNow(sharedLineOffset + sharedLineLength)

    _yesterdayHighLineId = _drawLabelledLine(x1, x2, yesterdayHigh, yhlColor, sharedLineWidth, yhlLineStyle, sharedLineExtend, 'YH', sharedLabelStyle, yhlColor, yhlColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _yesterdayLowLineId = _drawLabelledLine(x1, x2, yesterdayLow, yhlColor, sharedLineWidth, yhlLineStyle, sharedLineExtend, 'YL', sharedLabelStyle, yhlColor, yhlColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _lastWeekHighLineId = _drawLabelledLine(x1, x2, lastWeekHigh, lwhlColor, sharedLineWidth, lwhlLineStyle, sharedLineExtend, 'LWH', sharedLabelStyle, lwhlColor, lwhlColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _lastWeekLowLineId = _drawLabelledLine(x1, x2, lastWeekLow, lwhlColor, sharedLineWidth, lwhlLineStyle, sharedLineExtend, 'LWL', sharedLabelStyle, lwhlColor, lwhlColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _adrHighLineId = _drawLabelledLine(x1, x2, adrHigh, adrColor, sharedLineWidth, adrLineStyle, sharedLineExtend, 'ADR High', sharedLabelStyle, adrColor, adrColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _adrLowLineId = _drawLabelledLine(x1, x2, adrLow, adrColor, sharedLineWidth, adrLineStyle, sharedLineExtend, 'ADR Low', sharedLabelStyle, adrColor, adrColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _awrHighLineId = _drawLabelledLine(x1, x2, awrHigh, awrColor, sharedLineWidth, adrLineStyle, sharedLineExtend, 'AWR High', sharedLabelStyle, awrColor, awrColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _awrLowLineId = _drawLabelledLine(x1, x2, awrLow, awrColor, sharedLineWidth, adrLineStyle, sharedLineExtend, 'AWR Low', sharedLabelStyle, awrColor, awrColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _amrHighLineId = _drawLabelledLine(x1, x2, amrHigh, amrColor, sharedLineWidth, adrLineStyle, sharedLineExtend, 'AMR High', sharedLabelStyle, amrColor, amrColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)
    _amrLowLineId = _drawLabelledLine(x1, x2, amrLow, amrColor, sharedLineWidth, adrLineStyle, sharedLineExtend, 'AMR Low', sharedLabelStyle, amrColor, amrColor, sharedLabelSize, sharedLabelVisible, sharedLabelOffset, sharedLabelShowPrice)

    array.push(linesArray, _yesterdayHighLineId)
    array.push(linesArray, _yesterdayLowLineId)
    array.push(linesArray, _lastWeekHighLineId)
    array.push(linesArray, _lastWeekLowLineId)
    array.push(linesArray, _adrHighLineId)
    array.push(linesArray, _adrLowLineId)
    array.push(linesArray, _awrHighLineId)
    array.push(linesArray, _awrLowLineId)
    array.push(linesArray, _amrHighLineId)
    array.push(linesArray, _amrLowLineId)

    // cleanup
    if initialArraySize > 0
        for i = 0 to initialArraySize
            lineToDelete = array.shift(linesArray)
            line.delete(lineToDelete)

//////////////////////////////////////////////////////////////////
// 
// ==== EXECUTE ==== 
// 
//////////////////////////////////////////////////////////////////

var line[] _lines = array.new_line(0)
_drawDailyWeeklyHighLowLines(_lines)

