//@version=4

study("MJ - Yesterday/Last Week High/Low Lines", overlay=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

// new_bar: check if we're on a new bar within the session in a given resolution
new_bar(res) => change(time(res)) != 0

_securityRepaint(_symbol, _res, _src, _repaint) => security(_symbol, _res, _src[_repaint ? 0 : barstate.isrealtime ? 1 : 0])[_repaint ? 0 : barstate.isrealtime ? 0 : 1]

//////////////////////////////////////////////////////////////////
// 
// ==== PLOT UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

_drawLabelledLine(lineId, x1, x2, y, _color, _width, _style, _extend, labelText, labelStyle, labelColor, labelTextColor, labelSize, showLabel, labelOffsetInBars, showPrice) => 
    // x1 and x2 are in time (not bars)

    _lineId = lineId

    if na(_lineId)
        _lineId := line.new(x1, y, x2, y, xloc.bar_time, _extend)

    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)

    if not na(_lineId[1])
        line.delete(_lineId[1])

    // ----------------
    // draw the label
    // ----------------

    if showLabel
        _labelText = showPrice ? labelText + ' (' + tostring(y) + ')' : labelText
        timePerBar = time[0] - time[1]
        labelTime = x2 + (labelOffsetInBars * timePerBar)
        labelId = label.new(labelTime, y, _labelText, textcolor=labelTextColor, style=labelStyle, size=labelSize, xloc=xloc.bar_time, color=labelColor)
        label.delete(labelId[1])

    _lineId

//////////////////////////////////////////////////////////////////
// 
// ==== CALCULATIONS ==== 
// 
//////////////////////////////////////////////////////////////////

// dayHigh = _securityRepaint(syminfo.tickerid, "D",high, false)
// dayLow = _securityRepaint(syminfo.tickerid, "D",low, false)
// dayOpen  = _securityRepaint(syminfo.tickerid, "D",open, false)
// dayClose = _securityRepaint(syminfo.tickerid, "D",close, false)
// weekHigh = _securityRepaint(syminfo.tickerid, "W",high, false)
// weekLow = _securityRepaint(syminfo.tickerid, "W",low, false)
dayHigh = security(syminfo.tickerid, 'D', high[1], lookahead=true)
dayLow = security(syminfo.tickerid, 'D', low[1], lookahead=true)
dayOpen = security(syminfo.tickerid, 'D', open[1], lookahead=true)
dayClose = security(syminfo.tickerid, 'D', close[1], lookahead=true)
weekHigh = security(syminfo.tickerid, 'W', high[1], lookahead=true)
weekLow = security(syminfo.tickerid, 'W', low[1], lookahead=true)

//////////////////////////////////////////////////////////////////
// 
// ==== DAILY/WEEKLY HIGH/LOW LINES ==== 
// 
//////////////////////////////////////////////////////////////////

groupDailyWeeklyShared = 'Daily/Weekly Shared'
groupYesterday = 'Yesterday'
groupLastWeek = 'Last Week'

// *** `dwhl` stands for dailyWeeklyHighLow ***
dwhlLineOffsetInBars = input(15, 'Line Offset (in bars)', group=groupDailyWeeklyShared)
dwhlLineLengthInBars = input(15, 'Line Length (in bars)', group=groupDailyWeeklyShared)
dwhlLabelOffsetInBars = input(-7, 'Daily/Weekly Label Offset (in bars)', group=groupDailyWeeklyShared)
dwhlLabelStyle = input(label.style_none, 'Yesterday H/L Label Style', options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle], group=groupDailyWeeklyShared)
dwhlLabelVisible = input(true, 'Daily/Weekly H/L Label Visible?', group=groupDailyWeeklyShared)
dwhlLabelSize = input(size.normal, 'Daily/Weekly H/L Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupDailyWeeklyShared)
dwhlLineExtend = input(extend.none, 'Daily/Weekly H/L Line Extend', options=[extend.none, extend.left, extend.right, extend.both], group=groupDailyWeeklyShared)
dwhlLabelShowPrice = input(false, 'Daily/Weekly H/L Show Price in Label?', group=groupDailyWeeklyShared)

onlyShowYesterdayHighLowForCurrentDay = input(true, 'Only show yesterday H/L on current day?', group=groupDailyWeeklyShared)
onlyShowLastWeekHighLowForCurrentDay = input(true, 'Only show last week H/L on current day?', group=groupDailyWeeklyShared)

// *** `yhl` stands for yesterdayHighLow ***
yhlColor = input(color.new(#f44336, 0), 'Yesterday H/L Color', group=groupYesterday)
yhlLineWidth = input(1, 'Yesterday H/L Line Width', options=[1,2,3,4], group=groupYesterday)
yhlLineStyle = input(line.style_solid, 'Yesterday H/L Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupYesterday)
yhlLabelTextColor = input(color.new(color.white, 0), 'Yesterday H/L Label Text Color', group=groupYesterday)

// *** `lwhl` stands for lastWeekHighLow ***
lwhlColor = input(color.new(#9c27b0, 0), 'Last Week H/L Color', group=groupLastWeek)
lwhlLineWidth = input(1, 'Last Week H/L Line Width', options=[1,2,3,4], group=groupLastWeek)
lwhlLineStyle = input(line.style_solid, 'Last Week H/L Line Style', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLastWeek)
lwhlLabelTextColor = input(color.new(color.white, 0), 'Last Week H/L Label Text Color', group=groupLastWeek)

// _getLevelsStart() => 
//     levelsStartTime = iff((timeframe.isseconds == true) or (timeframe.isminutes == true and timeframe.multiplier < 5), time('D'), time('D') - (MS_PER_DAY))
//     levelsStartBar = barssince(levelsStartBar)
//     [levelsStartTime, levelsStartBar]

_doShowYesterdayHighLow() => 
    isValidTimeframe = timeframe.isintraday == true
    isValidDay = onlyShowYesterdayHighLowForCurrentDay ? _isCurrentDay() : true
    isValidTimeframe and isValidDay

_doShowLastWeekHighLow() => 
    isValidTimeframe = timeframe.isintraday == true or timeframe.isdaily == true
    isValidDay = onlyShowYesterdayHighLowForCurrentDay ? _isCurrentDay() : true
    isValidTimeframe and isValidDay


_getYesterdayHighLowValues() => 
    if _doShowYesterdayHighLow()
        [dayHigh, dayLow]
    else 
        [na, na]

_getLastWeekHighLowValues() => 
    if _doShowLastWeekHighLow()
        [weekHigh, weekLow]
    else 
        [na, na]

var line yesterdayHighLineId = na
var line yesterdayLowLineId = na
var line lastWeekHighLineId = na
var line lastWeekLowLineId = na

_drawDailyWeeklyHighLowLines() => 
    [yesterdayHigh, yesterdayLow] = _getYesterdayHighLowValues()
    [lastWeekHigh, lastWeekLow] = _getLastWeekHighLowValues()

    // plot(yesterdayHigh, linewidth=yhlLineWidth, color=yhlColor, style=yesterdayHighLowPlotStyle, title='Yesterday High')
    // plot(yesterdayLow, linewidth=yhlLineWidth, color=yhlColor, style=yesterdayHighLowPlotStyle, title = 'Yesterday Low')
    // plot(lastWeekHigh, linewidth=lwhlLineWidth, color=lwhlColor, style=lastWeekHighLowPlotStyle, title='Last Week High')
    // plot(lastWeekLow, linewidth=lwhlLineWidth, color=lwhlColor, style=lastWeekHighLowPlotStyle, title='Last Week Low')

    x1 = _getTimeNBarsFromNow(dwhlLineOffsetInBars)
    x2 = _getTimeNBarsFromNow(dwhlLineOffsetInBars + dwhlLineLengthInBars)

    _yesterdayHighLineId = _drawLabelledLine(yesterdayHighLineId, x1, x2, yesterdayHigh, yhlColor, yhlLineWidth, yhlLineStyle, dwhlLineExtend, 'Yesterday High', dwhlLabelStyle, yhlColor, yhlLabelTextColor, dwhlLabelSize, dwhlLabelVisible, dwhlLabelOffsetInBars, dwhlLabelShowPrice)
    _yesterdayLowLineId = _drawLabelledLine(yesterdayLowLineId, x1, x2, yesterdayLow, yhlColor, yhlLineWidth, yhlLineStyle, dwhlLineExtend, 'Yesterday Low', dwhlLabelStyle, yhlColor, yhlLabelTextColor, dwhlLabelSize, dwhlLabelVisible, dwhlLabelOffsetInBars, dwhlLabelShowPrice)
    _lastWeekHighLineId = _drawLabelledLine(lastWeekHighLineId, x1, x2, lastWeekHigh, lwhlColor, lwhlLineWidth, lwhlLineStyle, dwhlLineExtend, 'Last Week High', dwhlLabelStyle, lwhlColor, lwhlLabelTextColor, dwhlLabelSize, dwhlLabelVisible, dwhlLabelOffsetInBars, dwhlLabelShowPrice)
    _lastWeekLowLineId = _drawLabelledLine(lastWeekLowLineId, x1, x2, lastWeekLow, lwhlColor, lwhlLineWidth, lwhlLineStyle, dwhlLineExtend, 'Last Week Low', dwhlLabelStyle, lwhlColor, lwhlLabelTextColor, dwhlLabelSize, dwhlLabelVisible, dwhlLabelOffsetInBars, dwhlLabelShowPrice)

    [_yesterdayHighLineId, _yesterdayLowLineId, _lastWeekHighLineId, _lastWeekLowLineId]


[_yesterdayHighLineId, _yesterdayLowLineId, _lastWeekHighLineId, _lastWeekLowLineId] = _drawDailyWeeklyHighLowLines()

if na(_yesterdayHighLineId) or na(_yesterdayLowLineId) or na(_lastWeekHighLineId) or na(_lastWeekLowLineId)
    yesterdayHighLineId := _yesterdayHighLineId
    yesterdayLowLineId := _yesterdayLowLineId
    lastWeekHighLineId := _lastWeekHighLineId
    lastWeekLowLineId := _lastWeekLowLineId
