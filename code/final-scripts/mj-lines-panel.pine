//@version=4

study("MJ - Lines Panel", overlay=true)

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1
COLOR_GREEN = #4caf50
COLOR_ROYAL_BLUE = #1848cc
COLOR_TURQUOISE = #00897b
COLOR_PEACH = #e57373
COLOR_ELECTRIC_GREEN = #00e676
COLOR_LIGHT_PURPLE = #7e57c2

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

// new_bar: check if we're on a new bar within the session in a given resolution
new_bar(res) => change(time(res)) != 0

//////////////////////////////////////////////////////////////////
// 
// ==== PLOT UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

_drawLabelledLine(x1, x2, y, _color, _width, _style, _extend, labelText, labelStyle, labelColor, labelTextColor, labelSize, showLabel, labelOffsetInBars, showPrice) => 
    // x1 and x2 are in time (not bars)
    _lineId = line.new(x1, y, x2, y, xloc.bar_time, _extend)

    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)

    if not na(_lineId[1])
        line.delete(_lineId[1])

    // ----------------
    // draw the label
    // ----------------

    if showLabel
        _labelText = showPrice ? labelText + ' (' + tostring(y) + ')' : labelText
        timePerBar = time[0] - time[1]
        labelTime = x2 + (labelOffsetInBars * timePerBar)
        labelId = label.new(labelTime, y, _labelText, textcolor=labelTextColor, style=labelStyle, size=labelSize, xloc=xloc.bar_time, color=labelColor)
        label.delete(labelId[1])

    _lineId


//////////////////////////////////////////////////////////////////
// 
// ==== INPUTS ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils, plotUtils
// -----------------------

groupOffset = 'Offset'
groupPlotSwitches = 'Plot Switches'
groupLineSwitches = 'Line Switches'
groupColors = 'Colors'
groupTimeRanges = 'Time Ranges'
groupLineStyle = 'Line Style'
groupLabels = 'Labels'
groupDailyOpenPlot='Daily Open Plot'
groupMarkers='Markers'

// ----------------------------------------------------------------------------------
// tooltips

string TT_LB = "The number of days back to plot the session levels"

// switches

lineAsiaOpenActive = input(true, 'Line - Asia Open', group=groupLineSwitches)
lineAsiaHLActive = input(true, 'Line - Asia HL', group=groupLineSwitches)

lineLondonOpenActive = input(true, 'Line - London Open', group=groupLineSwitches)
lineLondonHLActive = input(false, 'Line - London HL', group=groupLineSwitches)

lineNyOpenActive = input(true, 'Line - NY Open', group=groupLineSwitches)
lineNyHLActive = input(true, 'Line - NY HL', group=groupLineSwitches)

lineDailyOpenActive = input(true, 'Line - Daily Open', group=groupLineSwitches)

// colors

dailyOpenColor = input(color.new(#2962ff, 0), 'Daily Open Color', input.color, group=groupColors)
asiaLineColor = input(COLOR_ELECTRIC_GREEN, 'Line - Asia', input.color, group=groupColors)
nyLineColor = input(#880e4f, 'Line - New York', input.color, group=groupColors)
londonLineColor = input(COLOR_LIGHT_PURPLE, 'Line - London', input.color, group=groupColors)

// session levels line style

groupSessionLevelsLineStyle = 'Session Levels Line Style'
sessionLevelsLineOffsetInBars = input(15, 'Session Levels - Line Offset', group=groupSessionLevelsLineStyle)
sessionLevelsLineLengthInBars = input(20, 'Session Levels - Line Length', group=groupSessionLevelsLineStyle)
sessionLabelOffsetInBars = input(-5, 'Session Levels - Label Offset', group=groupSessionLevelsLineStyle)
sessionLevelsHighLowLineStyle = input(line.style_solid, 'Session Levels - HL Line Style', group=groupSessionLevelsLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
sessionLevelsLineWidth = input(2, 'Session Levels - Line Width', group=groupSessionLevelsLineStyle, options=[1,2,3,4])
sessionHighLowLineOpacity = input(20, 'Session Levels - Opacity HL', minval=0, maxval=100, group=groupSessionLevelsLineStyle)
sessionLevelsOpenLineOpacity = input(10, 'Session Levels - Opacity Open', minval=0, maxval=100, group=groupSessionLevelsLineStyle)

dailyOpenLineStyle = input(line.style_solid, 'Line Style - Daily Open', group=groupSessionLevelsLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
asiaOpenLineStyle = input(line.style_solid, 'Line Style - Asia Open', group=groupSessionLevelsLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
londonOpenLineStyle = input(line.style_solid, 'Line Style - London Open', group=groupSessionLevelsLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])
nyOpenLineStyle = input(line.style_solid, 'Line Style - NY Open', group=groupSessionLevelsLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// extend

groupExtend = 'Extend'
dailyOpenLineExtend = input(extend.none, 'Extend - Daily Open', options=[extend.none, extend.left, extend.right, extend.both], group=groupExtend)
sessionLevelsLineExtend = input(extend.none, 'Extend - Sessions Levels', options=[extend.none, extend.left, extend.right, extend.both], group=groupExtend)

// labels

sessionLabelStyle = input(label.style_none, 'Session Label Style', group=groupLabels, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
sessionLabelOpacity = input(70, 'Label Opacity', group=groupLabels, minval=0, maxval=100)
sessionLabelSize = input(size.normal, 'Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupLabels)
sessionLabelShowPrice = input(false, 'Show Price in Label?', group=groupLabels)

// time ranges

asiaOpenTimeRange = input('2100-2045:1234567', 'Asia Open', group=groupTimeRanges, type=input.session) // use this for the Asia Open only
asiaTimeRange = input('2100-0500:23456', 'Asian Session Time', group=groupTimeRanges, type=input.session) // use this for the Asia HL only
londonTimeRange = input('0800-1630:23456', 'London Session Time', group=groupTimeRanges, type=input.session)
nyTimeRange = input('1300-2100:23456', 'New York Session Time', group=groupTimeRanges, type=input.session)
dailyOpenTimeRange = input('0000-0015:1234567', 'Daily Open Time', group=groupTimeRanges, type=input.session)

_captureSessionLevels(timeRange) => 
    _inSession = _isInSession(timeRange)
    _inHolding = not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := max(high, _sessionHigh)
            _sessionLow  := min(low, _sessionLow)

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

////////////////////////////////////////////////////////
// 
// ---- Labelled Lines ---
// 
////////////////////////////////////////////////////////

[__asiaHigh, __asiaLow, asiaOpen] = _captureSessionLevels(asiaOpenTimeRange)
[asiaHigh, asiaLow, __asiaOpen] = _captureSessionLevels(asiaTimeRange)
[londonHigh, londonLow, londonOpen] = _captureSessionLevels(londonTimeRange)
[nyHigh, nyLow, nyOpen] = _captureSessionLevels(nyTimeRange)
[dailyHigh, dailyLow, dailyOpen] = _captureSessionLevels(dailyOpenTimeRange)

_getLineColor(_color, opacity, isActive) => color.new(_color, isActive ? opacity : 100)

_drawSessionLines(linesArray) =>
    initialArraySize = array.size(linesArray)

     // cleanup
    if initialArraySize > 0
        for i = 0 to initialArraySize - 1 
            lineToDelete = array.shift(linesArray)
            line.delete(lineToDelete)

    x1 = _getTimeNBarsFromNow(sessionLevelsLineOffsetInBars)
    x2 = _getTimeNBarsFromNow(sessionLevelsLineOffsetInBars + sessionLevelsLineLengthInBars)
    
    nyHighLowLabelVisible = true
    londonHighLowLabelVisible = true

    asiaLabelColor = color.new(asiaLineColor, sessionLabelOpacity)
    londonLabelColor = color.new(londonLineColor, sessionLabelOpacity)
    nyLabelColor = color.new(nyLineColor, sessionLabelOpacity)
    dailyOpenLabelColor = color.new(dailyOpenColor, sessionLabelOpacity)
    
    labelTextColor = color.new(color.white, 0)
    labelSize = sessionLabelSize
    labelVisible = true

    // ---------------
    // Asia Lines
    // ---------------

    _asianOpenLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineAsiaOpenActive ? asiaOpen : na, 
         _getLineColor(asiaLineColor, sessionLevelsOpenLineOpacity, lineAsiaOpenActive),
         sessionLevelsLineWidth, 
         asiaOpenLineStyle, 
         sessionLevelsLineExtend, 
         'Asia Open', 
         sessionLabelStyle, 
         asiaLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    _asianHighLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineAsiaHLActive ? asiaHigh : na, 
         asiaLineColor,
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle, 
         sessionLevelsLineExtend, 
         'Asia High', 
         sessionLabelStyle, 
         asiaLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _asianLowLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineAsiaHLActive ? asiaLow : na, 
         asiaLineColor, 
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle, 
         sessionLevelsLineExtend, 
         'Asia Low', 
         sessionLabelStyle, 
         asiaLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    // ---------------
    // New York Lines
    // ---------------

    _nyOpenLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineNyOpenActive ? nyOpen : na, 
         _getLineColor(nyLineColor, sessionLevelsOpenLineOpacity, lineNyOpenActive),
         sessionLevelsLineWidth, 
         nyOpenLineStyle, 
         sessionLevelsLineExtend, 
         'NY Open', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _nyHighLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineNyHLActive ? nyHigh : na, 
         _getLineColor(nyLineColor, sessionHighLowLineOpacity, lineNyHLActive),
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'NY High', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         nyHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _nyLowLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineNyHLActive ? nyLow : na, 
         _getLineColor(nyLineColor, sessionHighLowLineOpacity, lineNyHLActive),
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'NY Low', 
         sessionLabelStyle, 
         nyLabelColor, 
         labelTextColor, 
         labelSize, 
         nyHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    // ---------------
    // London Lines
    // ---------------         

    _londonOpenLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineLondonOpenActive ? londonOpen : na, 
         _getLineColor(londonLineColor, sessionLevelsOpenLineOpacity, lineLondonOpenActive),
         sessionLevelsLineWidth, 
         londonOpenLineStyle, 
         sessionLevelsLineExtend, 
         'London Open', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    _londonHighLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineLondonHLActive ? londonHigh : na, 
         _getLineColor(londonLineColor, sessionHighLowLineOpacity, lineLondonOpenActive),
         sessionLevelsLineWidth, 
         sessionLevelsHighLowLineStyle,
         sessionLevelsLineExtend, 
         'London High', 
         sessionLabelStyle, 
         londonLabelColor, 
         labelTextColor, 
         labelSize, 
         londonHighLowLabelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)
    
    _londonLowLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineLondonHLActive ? londonLow : na,
         _color=_getLineColor(londonLineColor, sessionHighLowLineOpacity, lineLondonOpenActive),
         _width=sessionLevelsLineWidth, 
         _style=sessionLevelsHighLowLineStyle,
         _extend=sessionLevelsLineExtend, 
         labelText='London Low', 
         labelStyle=sessionLabelStyle, 
         labelColor=londonLabelColor, 
         labelTextColor=labelTextColor, 
         labelSize=labelSize, 
         showLabel=londonHighLowLabelVisible, 
         labelOffsetInBars=sessionLabelOffsetInBars, 
         showPrice=sessionLabelShowPrice)
    
    _dailyOpenLineId = _drawLabelledLine(
         x1, 
         x2, 
         lineDailyOpenActive ? dailyOpen : na, 
         _getLineColor(dailyOpenColor, 0, lineDailyOpenActive), 
         sessionLevelsLineWidth, 
         dailyOpenLineStyle, 
         dailyOpenLineExtend, 
         'Daily Open', 
         sessionLabelStyle, 
         dailyOpenLabelColor, 
         labelTextColor, 
         labelSize, 
         labelVisible, 
         sessionLabelOffsetInBars, 
         sessionLabelShowPrice)

    array.push(linesArray, _dailyOpenLineId)
    array.push(linesArray, _asianOpenLineId)
    array.push(linesArray, _asianHighLineId)
    array.push(linesArray, _asianLowLineId)
    array.push(linesArray, _nyOpenLineId)
    array.push(linesArray, _nyHighLineId)
    array.push(linesArray, _nyLowLineId)
    array.push(linesArray, _londonOpenLineId)
    array.push(linesArray, _londonHighLineId)
    
   


var line[] _lines = array.new_line(0)
_drawSessionLines(_lines)

