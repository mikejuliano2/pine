//@version=4

study("MJ - Rays", overlay=true)

string sess1Time = input(group="Market sessions", defval='2100-2101', title="Session 1", type=input.session)
string sess1Label = input(group="Market sessions", defval="London", title="Session 1 Label")
string sess1Color = input(group="Market sessions", defval="gray", title="Session 1 Color", options=["black", "silver", "gray",  "white", "maroon",  "red", "purple", "fuchsia", "green", "lime", "olive", "yellow", "navy", "blue", "aqua", "orange"])
show_label = true
show_rectangle = true

get_session (sessionText) =>
    time(timeframe.period, sessionText)

get_isInSession (session) =>
    isInSession = not na(session)

_getHighAndLow (fromIndex, toIndex) =>
    float _high = 0
    float _low = high

    for i = fromIndex to toIndex
        _high := max(high[i], _high)
        _low := min(low[i], _low)

    [_high, _low]




create_marketRect (sessionTime, sessionDuration, t, col) =>
    isInSession = get_isInSession(sessionTime)

    string style = line.style_solid
    var line line_t = na

    int minsLen = round(sessionDuration / timeframe.multiplier)
    int begin_index = 0

    for i = 1 to minsLen
        if (not na(sessionTime[i]))
            begin_index := begin_index + 1

    int pR = bar_index
    int pL = bar_index - begin_index
    [_high, _low] = _getHighAndLow(1, begin_index)
    float range = (_high - _low)

    _color = isInSession ? col : na

    if isInSession
        line_t := line.new(pL, open[begin_index], pR, open[begin_index], style=style, color=_color, extend=extend.right) // LEFT RIGHT TOP BOTTOM
        line.delete(line_t[1])

        labelId = label.new(_low, _high, t, textcolor=_color, style=label.style_none, size=size.normal)
        label.delete(labelId[1])

        


//calculate orX_h, orX_l
calcXOrHL(sessX, sessXorcalc, lookbackOrBars) =>
    float orX_h = na
    float orX_l = na
    orX_h := sessX ? orX_h[1] : na
    orX_l := sessX ? orX_l[1] : na

    if sessXorcalc
        for i = 0 to lookbackOrBars
            orX_h := i == 0 ? high : max(high[i], orX_h)
            orX_l := i == 0 ? low  : min(low[i],  orX_l)
    [orX_l, orX_h]

//sessions line function
showOrFunctionX(show_orX, sessX, sessXOrCalc, orX_h, orX_l, sessXcol ) =>
    if show_orX
        if (sessX and sessXOrCalc)
            line.new(bar_index, orX_h, bar_index, orX_l, color=sessXcol, style=line.style_dotted)

    if ((not sessX) and sessX[1])
        line.new(bar_index - 1, orX_h[1], bar_index - 1, orX_l[1], color=sessXcol, style=line.style_dotted)


calcSessAndSessOr(sessXTime, showX_or, lookbackMinsX, lookbackOrBarsX) =>
    int sessX = time(timeframe.period, sessXTime)
    bool sessXorcalc = (sessX[lookbackOrBarsX] and na(sessX[lookbackOrBarsX + 1])) and showX_or
    [sessX, sessXorcalc]



int lookbackOrMins = 0
int lookbackMins = (12 * 60) // 12 hours
int lookbackOrBars = floor(lookbackOrMins / timeframe.multiplier)

show_or = true
sess1col = color.blue

[sess1, sess1orcalc] = calcSessAndSessOr(sess1Time, show_or, lookbackMins, lookbackOrBars)

[or1_l, or1_h] = calcXOrHL(sess1, sess1orcalc, lookbackOrBars ) // openingRangeOneLow, openingRangOneHigh


///////////////
// Plotting
///////////////
// TODO: this breaks on the 3 minute view for some reason, so we disable it for now.
create_marketRect(sess1, lookbackMins, sess1Label, sess1col)    

// (Opening Range)
or1u = plot(or1_h, color=sess1col, style=plot.style_linebr, editable=false)
or1b = plot(or1_l, color=sess1col, style=plot.style_linebr, editable=false)
fill(or1u, or1b, color=sess1col, editable=false)


showOrFunctionX(show_or, sess1, sess1orcalc, or1_h, or1_l, sess1col)
