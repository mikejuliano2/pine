//@version=4

study("MJ - Session Fills", overlay=true)

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1
COLOR_GREEN = #4caf50
COLOR_ROYAL_BLUE = #1848cc
COLOR_TURQUOISE = #00897b
COLOR_PEACH = #e57373

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs

_getStartTimeNDaysBack(numDays) => 
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

//////////////////////////////////////////////////////////////////
// 
// ==== INPUTS ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils, plotUtils
// -----------------------

groupOffset = 'Offset'
groupFill = 'Fill'
groupPlotSwitches = 'Plot Switches'
groupLineSwitches = 'Line Switches'
groupColors = 'Colors'
groupFillColors = 'Fill Colors'
groupTimeRanges = 'Time Ranges'
groupLineStyle = 'Line Style'
groupLabels = 'Labels'
groupDailyOpenPlot='Daily Open Plot'
groupMarkers='Markers'
groupExtend='Extend Vertically'

// ----------------------------------------------------------------------------------
// tooltips
string TT_PR = "Final time to which the High and Low of the session will be held"
string TT_TZ = "Offsets all time inputs together to help align to preferred timezone"
string TT_LB = "The number of days back to plot the session levels"

// switches

fillsActive = input(true, 'Fills Active', group=groupPlotSwitches)
fillAsianSession = input(true, 'Fill - Asian Session', group=groupPlotSwitches)
fillLondonSession = input(true, 'Fill - London Session', group=groupPlotSwitches)
fillNySession = input(true, 'Fill - NY Session', group=groupPlotSwitches)
fillEuBrinks = input(true, 'Fill - EU Brinks', group=groupPlotSwitches)
fillUsaBrinks = input(true, 'Fill - USA Brinks', group=groupPlotSwitches)
fillLast15 = input(true, 'Fill - Last 15 min of day', group=groupPlotSwitches)

// extend vertically
extendAsia = input(false, 'Extend - Asia', group=groupExtend)
extendNy = input(false, 'Extend - NY', group=groupExtend)
extendLondon = input(false, 'Extend - London', group=groupExtend)
extendBrinks = input(false, 'Extend - Brinks', group=groupExtend)
extendLast15 = input(true, 'Extend - Last 15 min', group=groupExtend)

// border colors

asiaBorderColor = input(color.new(#0b3d37, 90), 'Border - Asia', input.color, group=groupColors)
londonBorderColor = input(color.new(#1a1736, 90), 'Border - London', input.color, group=groupColors)
nyBorderColor = input(color.new(#880e4f, 90), 'Border - New York', input.color, group=groupColors)
brinksBorderColor = input(color.new(#b2b5be, 90), 'Border - Brinks', group=groupColors)
last15BorderColor = input(color.new(#f57f17, 90), 'Border - Last 15 min of day', group=groupColors)

// fill colors

asiaFillColor = input(color.new(#043c36, 60), 'Fill - Asia', input.color, group=groupFillColors)
londonFillColor = input(color.new(#1a1736, 50), 'Fill - London', input.color, group=groupFillColors)
nyFillColor = input(color.new(#4e092e, 70), 'Fill - New York', input.color, group=groupFillColors)
brinksFillColor = input(color.new(#b2b5be, 80), 'Fill - Brinks', group=groupFillColors)
last15FillColor = input(color.new(#f57f17, 90), 'Fill - Last 15 min of day', group=groupFillColors)

sessionFillOpacity = input(60, 'Opacity - Session Fill', minval=0, maxval=100, group=groupFill)
overrideFillOpacity = input(false, 'Override Fill Opacity', group=groupFill, tooltip='If true, use a consistent opacity for all session fills.')

sessionLevelsLinesJoined = input(false, 'Join points?', group=groupFill)
sessionLevelsBorderPlotStyle = input(plot.style_stepline, 'Plot Style - H/L', group=groupFill, options=[plot.style_circles, plot.style_cross, plot.style_line, plot.style_linebr, plot.style_stepline])
sessionLevelsLookbackHours = input(0, 'Lookback Hours', input.integer, minval=0, maxval=24, tooltip=TT_LB, group=groupFill)
sessionFillMaxTimeframe = input(title='Max Timeframe - Session Fill', defval=15, maxval=240, minval=1, group=groupFill)
sessionLevelsLineWidth = input(2, 'Line Width', group=groupFill, options=[1,2,3,4])

// time ranges

asiaTimeRange = input('2100-0500:23456', 'Asia', group=groupTimeRanges, type=input.session)
londonTimeRange = input('0700-1630:23456', 'London', group=groupTimeRanges, type=input.session)
nyTimeRange = input('1300-2100:23456', 'New York', group=groupTimeRanges, type=input.session)
usaBrinksTimeRange = input('1300-1401:23456', 'USA Brinks', group=groupTimeRanges, type=input.session)
euBrinksTimeRange = input('0700-0801:23456', 'EU Brinks', group=groupTimeRanges, type=input.session)
last15TimeRange = input('2345-0001:1234567', 'Last 15min of day', group=groupTimeRanges, type=input.session)

// NY Pre-market
// Frankfurt
// Weekend

_captureSessionLevels(timeRange) => 
    _inSession = _isInSession(timeRange)
    _inHolding = not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := max(high, _sessionHigh)
            _sessionLow  := min(low, _sessionLow)

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

_isWithinSessionLevelsLookbackPeriod() => 
    // the session start time must be after the lookback time
    if sessionLevelsLookbackHours > 0
        lookbackTimeInMs = MS_PER_HOUR * sessionLevelsLookbackHours
        _currentBarTime() > (timenow - lookbackTimeInMs)
    else 
        true
    
    // lookbackHours = (24 * sessionLevelsLookbackDays) + hour
    // timeOfSessionBeginning = _getTimeAtStartOfHourNHoursAgo(lookbackHours)
    // timeAtBeginningOfLookbackDay = _getStartTimeNDaysBack(sessionLevelsLookbackDays)
    // timeAtBeginningOfLookbackDay < timeOfSessionBeginning

_getLevelsColors(borderColor, inSession, fillColor) => 
    highLowLineColor = inSession ? borderColor : na
            
    fc = overrideFillOpacity ? color.new(fillColor, sessionFillOpacity) : fillColor
    _fillColor = inSession and inSession[1] ? fc : na

    [highLowLineColor, _fillColor]    

_getValuesForSessionFillPlotting(timeRange, borderColor, fillColor) => 
    isInSession = _isInSession(timeRange)

    [sessionHigh, sessionLow, sessionOpen] = _captureSessionLevels(timeRange)
    
    [highLowLineColor, _fillColor] = _getLevelsColors(borderColor, isInSession, fillColor)

    isWithinMaxTimeframe = timeframe.multiplier <= sessionFillMaxTimeframe and timeframe.isintraday
    conditionsMet = _isWithinSessionLevelsLookbackPeriod() and isWithinMaxTimeframe

    if conditionsMet
        [sessionHigh, sessionLow, highLowLineColor, _fillColor]
    else 
        [na, na, na, na]

/////////////////////////////////////////////////////////
// 
// --- Session Levels using plot ---
// 
/////////////////////////////////////////////////////////

// ---- asia ----

[asiaHigh, asiaLow, _asiaBorderColor, _asiaFillColor] = _getValuesForSessionFillPlotting(
     asiaTimeRange, 
     asiaBorderColor, 
     asiaFillColor)

asiaPlotHigh = plot(
      fillsActive and fillAsianSession ? asiaHigh : na, 
      "Asia High", 
      _asiaBorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)

asiaPlotLow  = plot(
      fillsActive and fillAsianSession ? asiaLow : na, 
      "Asia Low",  
      _asiaBorderColor,  
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)

// ---- london ----

[londonHigh, londonLow, _londonBorderColor, _londonFillColor] = _getValuesForSessionFillPlotting(
     londonTimeRange, 
     londonBorderColor, 
     londonFillColor)

londonPlotHigh = plot(
      fillsActive and fillLondonSession ? londonHigh : na, 
      "London Session High", 
      _londonBorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)
      
londonPlotLow  = plot(
      fillsActive and fillLondonSession ? londonLow : na,  
      "London Low",  
      _londonBorderColor,  
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)

// ---- new york ----

[nyHigh, nyLow, _nyBorderColor, _nyFillColor] = _getValuesForSessionFillPlotting(
      nyTimeRange, 
      nyBorderColor, 
      nyFillColor)

nyPlotHigh = plot(
      fillsActive and fillNySession ? nyHigh : na, 
      "New York Session High", 
      _nyBorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)

nyPlotLow  = plot(
      fillsActive and fillNySession ? nyLow : na,  
      "New York Session Low",  
      _nyBorderColor,  
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)


// ---- eu brinks ----

[euBrinksHigh, euBrinksLow, _euBrinksBorderColor, euBrinksFillColor] = _getValuesForSessionFillPlotting(
      euBrinksTimeRange, 
      brinksBorderColor, 
      brinksFillColor)

euBrinksPlotHigh = plot(
      fillsActive and fillEuBrinks ? euBrinksHigh : na, 
      "EU Brinks High", 
      _euBrinksBorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)

euBrinksPlotLow  = plot(
      fillsActive and fillEuBrinks ? euBrinksLow : na,  
      "EU Brinks Low", 
      _euBrinksBorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle,  
      join=sessionLevelsLinesJoined)

// ---- usa brinks ----

[usaBrinksHigh, usaBrinksLow, _usaBrinksBorderColor, usaBrinksFillColor] = _getValuesForSessionFillPlotting(
      usaBrinksTimeRange, 
      brinksBorderColor, 
      brinksFillColor)

usaBrinksPlotHigh = plot(
      fillsActive and fillUsaBrinks ? usaBrinksHigh : na, 
      "USA Brinks High", 
      _usaBrinksBorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)

usaBrinksPlotLow  = plot(
      fillsActive and fillUsaBrinks ? usaBrinksLow : na,  
      "USA Brinks Low", 
      _usaBrinksBorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle,  
      join=sessionLevelsLinesJoined)


// ---- last 15 minutes of the day ----

[last15High, last15Low, _last15BorderColor, _last15FillColor] = _getValuesForSessionFillPlotting(
      last15TimeRange, 
      last15BorderColor, 
      last15FillColor)

last15PlotHigh = plot(
      fillsActive and fillLast15 ? last15High : na, 
      "Last 15 Minutes of Day High", 
      _last15BorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle, 
      join=sessionLevelsLinesJoined)

last15PlotLow  = plot(
      fillsActive and fillLast15 ? last15Low : na,  
      "Last 15 Minutes of Day Low", 
      _last15BorderColor, 
      sessionLevelsLineWidth, 
      sessionLevelsBorderPlotStyle,  
      join=sessionLevelsLinesJoined)


// *** IMPORTANT ***
// the order of fills matters, the last one in gets placed on top (z-index)

fill(asiaPlotHigh, asiaPlotLow, _asiaFillColor)
fill(londonPlotHigh, londonPlotLow, _londonFillColor)
fill(nyPlotHigh, nyPlotLow, _nyFillColor)
fill(usaBrinksPlotHigh, usaBrinksPlotLow, usaBrinksFillColor)
fill(euBrinksPlotHigh, euBrinksPlotLow, euBrinksFillColor)
fill(last15PlotHigh, last15PlotLow, _last15FillColor)

/////////////////////////////////////////////////////////
// 
// --- EXTENDING VERTICALLY (set background color instead of plotting) ---
// 
/////////////////////////////////////////////////////////

_getBgColorForTimeRange(timeRange, isActive, fillColor) => 
    isInSession = _isInSession(timeRange)
    bgColor = isInSession and isActive ? fillColor : na

bgcolor(_getBgColorForTimeRange(asiaTimeRange, extendAsia, asiaFillColor))
bgcolor(_getBgColorForTimeRange(londonTimeRange, extendLondon, londonFillColor))
bgcolor(_getBgColorForTimeRange(nyTimeRange, extendNy, nyFillColor))
bgcolor(_getBgColorForTimeRange(euBrinksTimeRange, extendBrinks, brinksFillColor))
bgcolor(_getBgColorForTimeRange(usaBrinksTimeRange, extendBrinks, brinksFillColor))
bgcolor(_getBgColorForTimeRange(last15TimeRange, extendLast15, last15FillColor))