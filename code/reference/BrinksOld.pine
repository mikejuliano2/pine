//@version=4

study("Sessions - MJ", overlay=true)

// ====================================
// INPUTS
// ====================================



londonBrinksActive = input(title="Show London Brinks", type=input.bool, defval=true)
londonBrinksTimeRange = input(title="London Brinks Time Range", type=input.session, defval="0700-0800")

londonActive = input(title="Show London", type=input.bool, defval=false)
londonTimeRange = input(title="London Time Range", type=input.session, defval="0300-1200")

nyBrinksActive = input(title="Show NY Brinks", type=input.bool, defval=true)
nyBrinksTimeRange = input(title="NY Brinks Time Range", type=input.session, defval="1300-1400")
// nyBrinksTimeRange = input(title="NY Brinks Time Range", type=input.session, defval="1700-1800")

nyActive = input(title="Show New York", type=input.bool, defval=false)
nyTimeRange = input(title="New York Time Range", type=input.session, defval="0800-1700")

sydneyActive = input(title="Show Sydney", type=input.bool, defval=false)
sydneyTimeRange = input(title="Sydney Time Range", type=input.session, defval="1700-0200")

tokyoActive = input(title="Show Tokyo", type=input.bool, defval=false)
tokyoTimeRange = input(title="Tokyo Time Range", type=input.session, defval="2000-0400")

// ====================================
// VARIABLES
// ====================================

londonColor = color.green
nyColor = color.red
asiaColor = color.yellow
sydneyColor = color.navy
brinksColor = color.new(color.white, 90)

// ====================================
// FUNCTIONS
// ====================================

_isNewBar(sessionText) =>
    t = time('', sessionText)
    na(t[1]) and not na(t) or t[1] < t

_isInSession(sessionText) =>
    not na(time(timeframe.period, sessionText))

_getSessionHigh(timeRange) => 
    isNewBar = _isNewBar(timeRange)
    isInSession = _isInSession(timeRange)

    float sessionHigh = na
    sessionHigh := if isInSession
        if isNewBar
            high
        else
            max(sessionHigh[1], high)
    else
        sessionHigh[1]

    sessionHigh

_getSessionLow(timeRange) => 
    isNewBar = _isNewBar(timeRange)
    isInSession = _isInSession(timeRange)

    float sessionLow = na
    sessionLow := if isInSession
        if isNewBar
            low
        else
            min(sessionLow[1], low)
    else
        sessionLow[1]

    sessionLow

_getFillColor(isInSession, isActive, showBgColor, sessionColor) =>
    _color = isInSession and isActive and showBgColor ? sessionColor : na

_getBgColor(isInSession, isActive, showBgColor, sessionColor) => 
    isInSession and isActive and not showBgColor ? sessionColor : na

_getValues(isActive, timeRange, showBgColor, sessionColor) => 
    sessionLow = _getSessionLow(timeRange)
    sessionHigh = _getSessionHigh(timeRange)
    isInSession = _isInSession(timeRange)
    isNewBar = _isNewBar(timeRange)
    fillColor = _getFillColor(isInSession, isActive, showBgColor, sessionColor)
    bgColor = _getBgColor(isInSession, isActive, showBgColor, sessionColor)
    [sessionLow, sessionHigh, fillColor, bgColor]


// _getPositionTopAndBottom(begin_index, to_index) =>
//     float pT = 0
//     float pB = high

//     for i = begin_index to to_index
//         pT := max(high[i], pT)
//         pB := min(low[i], pB)

//     [pT, pB]

// _createMarketRect(sessionTime, sessionDuration, t, sessionColor) =>
//     bool isInSession = _isInSession(sessionTime)
//     // string style = rectStyle == "Dashed" ? line.style_dashed : line.style_solid
//     string style = line.style_dashed

//     if (isInSession)
//         int minsLen = round(sessionDuration / timeframe.multiplier)
//         int begin_index = 0

//         for i = 1 to minsLen
//             if (not na(sessionTime[i]))
//                 begin_index := begin_index + 1

//         int pR = bar_index
//         int pL = bar_index - begin_index
//         [pT, pB] = _getPositionTopAndBottom(1, begin_index)
//         float range = (pT - pB)

//         line_t = line.new(pL, pT, pR, pT, style=style, color=sessionColor)
//         line_b = line.new(pL, pB, pR, pB, style=style, color=sessionColor)
        
//         line.delete(line_t[1])
//         line.delete(line_b[1])

//         if (show_label)
//             line_label = label.new(pL, pT, t, textcolor=sessionColor, style=label.style_none, size=size.normal)
//             label.delete(line_label[1])

// ========================================
// PLOTTING
// ========================================

int lookbackMins = (12 * 60)


// London Brinks
[londonBrinksLow, londonBrinksHigh, londonBrinksFillColor, londonBrinksBgColor] = _getValues(londonBrinksActive, londonBrinksTimeRange, showBgColor, brinksColor)
londonBrinksLowPlot = plot(londonBrinksLow, transp = 100)
londonBrinksHighPlot = plot(londonBrinksHigh, transp = 100)
fill(londonBrinksLowPlot, londonBrinksHighPlot, color=londonBrinksFillColor)
bgcolor(londonBrinksBgColor)

// London
[londonLow, londonHigh, londonFillColor, londonBgColor] = _getValues(londonActive, londonTimeRange, showBgColor, londonColor)
londonLowPlot = plot(londonLow, transp = 100)
londonHighPlot = plot(londonHigh, transp = 100)
fill(londonLowPlot, londonHighPlot, color=londonFillColor)
bgcolor(londonBgColor)

// New York Brinks
[nyBrinksLow, nyBrinksHigh, nyBrinksFillColor, nyBrinksBgColor] = _getValues(nyBrinksActive, nyBrinksTimeRange, showBgColor, brinksColor)
nyBrinksLowPlot = plot(nyBrinksLow, transp = 100)
nyBrinksHighPlot = plot(nyBrinksHigh, transp = 100)
fill(nyBrinksLowPlot, nyBrinksHighPlot, color=nyBrinksFillColor)
bgcolor(nyBrinksBgColor)
// _createMarketRect(nyBrinksTimeRange, lookbackMins, 'NY Brinks', brinksColor)






// New York
// Sydney
// tokyoActive
// Hong Kong