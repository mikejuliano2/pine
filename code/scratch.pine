string sess1Time = input(group="Market sessions", defval="0800-1630", title="Session 1", type=input.session)
string sess1Label = input(group="Market sessions", defval="London", title="Session 1 Label")
string sess1Color = input(group="Market sessions", defval="gray", title="Session 1 Color", options=["black", "silver", "gray",  "white", "maroon",  "red", "purple", "fuchsia", "green", "lime", "olive", "yellow", "navy", "blue", "aqua", "orange"])

get_session (sessionText) =>
    time(timeframe.period, sessionText)

get_isInSession (session) =>
    isInSession = not na(session)

_getPositionTopAndBottom (begin_index, to_index) =>
    float pT = 0
    float pB = high

    for i = begin_index to to_index
        pT := max(high[i], pT)
        pB := min(low[i], pB)

    [pT, pB]

create_marketRect (sessionTime, sessionDuration, t, col) =>
    bool is_inSession = get_isInSession(sessionTime)
    string style = rectStyle == "Dashed" ? line.style_dashed : line.style_solid

    if (is_inSession)
        int minsLen = round(sessionDuration / timeframe.multiplier)
        int begin_index = 0

        for i = 1 to minsLen
            if (not na(sessionTime[i]))
                begin_index := begin_index + 1

        int pR = bar_index
        int pL = bar_index - begin_index
        [pT, pB] = _getPositionTopAndBottom(1, begin_index)
        float range = (pT - pB)

        //line_r = line.new(pR, pT, pR, pB, style=style, color=col)
        //line_l = line.new(pL, pT, pL, pB, style=style, color=col)
        line_t = line.new(pL, pT, pR, pT, style=style, color=col)
        line_b = line.new(pL, pB, pR, pB, style=style, color=col)

        //line.delete(line_r[1])
        //line.delete(line_l[1])
        line.delete(line_t[1])
        line.delete(line_b[1])

        if (show_label)
            line_label = label.new(pL, pT, t, textcolor=col, style=label.style_none, size=size.normal)
            label.delete(line_label[1])



//sessions line function
showOrFunctionX(show_orX, sessX, sessXOrCalc, orX_h, orX_l, sessXcol ) =>
    if show_orX
        if (sessX and sessXOrCalc)
            line.new(bar_index, orX_h, bar_index, orX_l, color=sessXcol, style=line.style_dotted)

    if ((not sessX) and sessX[1])
        line.new(bar_index - 1, orX_h[1], bar_index - 1, orX_l[1], color=sessXcol, style=line.style_dotted)


calcSessAndSessOr(sessXTime, showX_or, lookbackMinsX, lookbackOrBarsX) =>
    int sessX = time(timeframe.period, sessXTime)
    bool sessXorcalc = (sessX[lookbackOrBarsX] and na(sessX[lookbackOrBarsX + 1])) and showX_or
    [sessX, sessXorcalc]



int lookbackOrMins = 0
int lookbackMins = (12 * 60) // 12 hours
int lookbackOrBars = floor(lookbackOrMins / timeframe.multiplier)

sess1Time = '2100-0500'
show_or = true
sess1col = color.blue

[sess1, sess1orcalc] = calcSessAndSessOr(sess1Time, show_or, lookbackMins, lookbackOrBars)

[or1_l, or1_h] = calcXOrHL(sess1, sess1orcalc, lookbackOrBars ) // openingRangeOneLow, openingRangOneHigh


///////////////
// Plotting
///////////////
// TODO: this breaks on the 3 minute view for some reason, so we disable it for now.
if (show_rectangle) and timeframe.multiplier != 3
    create_marketRect(sess1, lookbackMins, sess1Label, sess1col)

// (Opening Range)
or1u = plot(or1_h, color=sess1col, style=plot.style_linebr, transp=95, editable=false)
or1b = plot(or1_l, color=sess1col, style=plot.style_linebr, transp=95, editable=false)
fill(or1u, or1b, color=sess1col, transp=90, editable=false)


showOrFunctionX(show_or, sess1, sess1orcalc, or1_h, or1_l, sess1col)
