//@version=4
// Written by Adler from the Market Cipher Discord
// This is meant to overlay Market Cipher B by WVC: https://www.tradingview.com/script/KOnEVsCJ-MarketCipher-B/
// Divergence detection is based off yatrader2's script here and used with his permission (huge thanks to him!): https://www.tradingview.com/script/sxZRzQzQ-Divergence-Indicator-any-oscillator/
study(title="MCB - Divergence v2", format=format.price, overlay=true)

// === How to use this ===
// 1) Add this indicator to your charts TWICE. Move one of them into the same pane as Market Cipher B, and leave the other in the window with your candles.
// 2) In both of the indicators, click "Settings" and set the indicator input dropdown to MC-B's Blue Wave.
// 3) In the indicator overlaying your candles, check the "Check this box if this indicator is overlaying your candles" box.
// 4) In both of the indicators, click "..." for this tool -> "Visual Order" -> "Bring to Front" so they're easier to see.


// set divergence line to dotted
// stack labels

// ============================================
// INPUTS
// ============================================

// source inputs
blueWave = input(hlc3, title="Set this to MC-B Blue Wave")
isOverlayingCandles = input(false, title="Check this box if this indicator is overlaying your candles")

// config options
showRegularDiv = input(true)
showHiddenDiv = input(false)

bullColorOne = input(color.green, title="bullColorOne")
bullColorTwo = input(#000000, title="bullColorTwo")
bearColorOne = input(color.red, title="bearColorOne")
bearColorTwo = input(#000000, title="bearColorTwo")
divLineTransparency = input(0, 'divLineTransparency', minval=0, maxval=100)
divShapeTransparency = input(10, 'divShapeTransparency', minval=0, maxval=100)
divLineWidth = input(3, 'divLineWidth', minval=1, maxval=4)
divLabelHiddenBear = 'H'
divLabelHiddenBull = 'H'
divLabelRegularBear = 'R'
divLabelRegularBull = 'R'

// ============================================
// DIVERGENCES (Price vs Blue Wave)
// ============================================
// TODO slope
// TODO bufferPeriod = input(3, minval=0, maxval=10, step=1, tooltip='This is to get MCB a little help.  Once a red or green dot is printed, look this many bars back to see if price made a low or a high (within the lookback period).  Example: A value of 0 would require the red/green dot to be printed on the same candle that the dot occurred.  A value of 1 requires a low/high to have occurred on the current or previous candle that the red/green dot occurred.')

ppLookBack = input(7, minval=1, step=1, tooltip='Used to determine if price is the lowest low or highest high within a period this many bars back')
ppLookAhead = input(0, minval=0, maxval=10, step=1, tooltip='Looks this many bars ahead to determine if we are at a pivot.  If this is greater than zero, there will be a delay in printing divergences.')
hasPivotLow = na(pivotlow(low, ppLookBack, ppLookahead)) ? false : true
hasPivotHigh = na(pivothigh(high, ppLookBack, ppLookAhead)) ? false : true


// isPivotLow = lowestbars(low, ppLookBack) == 0
// isPivotHigh = highestbars(high, pivotPeriod) == 0

_inRange(condition) =>
	numBars = barssince(condition == true)
	rangeLower <= numBars and numBars <= rangeUpper



rangeUpper = input(title="DIVERGENCES: Max of Lookback Range", defval=60)
rangeLower = input(title="DIVERGENCES: Min of Lookback Range", defval=5)

hasPivotLow = na(pivotlow(low, ppLookBack, ppLookAhead)) ? false : true
hasPivotHigh = na(pivothigh(high, ppLookBack, ppLookAhead)) ? false : true
// hasPivotLowWithinRange = barssince(hasPivotLow)



// blueWaveValueTheLastTimeAPivotLowWasFound = valuewhen(hasPivotLow, blueWave[ppLookAhead], 1)



//blueWaveHasHigherLow = blueWave[ppLookAhead] > valuewhen(hasPivotLow, blueWave[ppLookAhead], 1) and _inRange(hasPivotLow[1])


blueWaveHasHigherLow = not hasPivotLow and blueWave[ppLookAhead] > 1 and _inRange(hasPivotLow[1])
priceHasLowerLow = low[ppLookAhead] < valuewhen(hasPivotLow, low[ppLookAhead], 1)
hasRegularBullishDiv = priceHasLowerLow and blueWaveHasHigherLow and hasPivotLow

blueWaveHasLowerLow = blueWave[ppLookAhead] < valuewhen(hasPivotLow, blueWave[ppLookAhead], 1) and _inRange(hasPivotLow[1])
priceHasHigherLow = low[ppLookAhead] > valuewhen(hasPivotLow, low[ppLookAhead], 1)
hasHiddenBullishDiv = priceHasHigherLow and blueWaveHasLowerLow and hasPivotLow

blueWaveHasLowerHigh = blueWave[ppLookAhead] < valuewhen(hasPivotHigh, blueWave[ppLookAhead], 1) and _inRange(hasPivotHigh[1])
priceHasHigherHigh = high[ppLookAhead] > valuewhen(hasPivotHigh, high[ppLookAhead], 1)
hasRegularBearishDiv = priceHasHigherHigh and blueWaveHasLowerHigh and hasPivotHigh

blueWaveHasHigherHigh = blueWave[ppLookAhead] > valuewhen(hasPivotHigh, blueWave[ppLookAhead], 1) and _inRange(hasPivotHigh[1])
priceHasLowerHigh = high[ppLookAhead] < valuewhen(hasPivotHigh, high[ppLookAhead], 1)
hasHiddenBearishDiv = priceHasLowerHigh and blueWaveHasHigherHigh and hasPivotHigh

/////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- REGULAR ---
//
/////////////////////////////////////////////////////////////////////////////////////////////////

plot(
     showRegularDiv and hasPivotLow ? isOverlayingCandles ? low[ppLookAhead] : blueWave[ppLookAhead] : na,
     offset=-ppLookAhead,
     title="Regular Bullish Divergence",
     linewidth=divLineWidth,
     color=(hasRegularBullishDiv ? bullColorOne : color.new(color.white, 100))
     )

plotshape(
	 showRegularDiv and hasRegularBullishDiv ? isOverlayingCandles ? low[ppLookAhead] : blueWave[ppLookAhead] : na,
	 offset=-ppLookAhead,
	 title="Regular Bullish Label",
	 text=divLabelRegularBull,
	 style=shape.labelup,
	 location=location.absolute,
	 color=bullColorOne,
	 textcolor=bullColorTwo
	 )

plot(
	 showRegularDiv and hasPivotHigh ? isOverlayingCandles ? high[ppLookAhead] : blueWave[ppLookAhead] : na,
	 offset=-ppLookAhead,
	 title="Regular Bearish",
	 linewidth=divLineWidth,
	 color=(hasRegularBearishDiv ? bearColorOne : color.new(color.white, 100))
	 )

plotshape(
	 showRegularDiv and hasRegularBearishDiv ? isOverlayingCandles ? high[ppLookAhead] : blueWave[ppLookAhead] : na,
	 offset=-ppLookAhead,
	 title="Regular Bearish Label",
	 text=divLabelRegularBear,
	 style=shape.labeldown,
	 location=location.absolute,
	 color=bearColorOne,
	 textcolor=bearColorTwo
	 )
	 
/////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- PIVOTS ---
//
/////////////////////////////////////////////////////////////////////////////////////////////////

showPivotMarkers = input(true)




// the marker will not print until the lookahead period has passed
// this means you won't get divergence in real time
// I think the check should be:
//    if green dot and



plotshape(
	 showPivotMarkers and isPivotLow ? isOverlayingCandles ? low : blueWave : na,
	 offset=-ppLookAhead,
	 title="PL",
	 text='PL',
	 style=shape.labelup,
	 location=location.bottom,
	 color=color.black,
	 textcolor=color.white
	 )

plotshape(
	 showPivotMarkers and isPivotHigh ? isOverlayingCandles ? high : blueWave : na,
	 offset=-ppLookAhead,
	 title="PH",
	 text='PH',
	 style=shape.labeldown,
	 location=location.top,
	 color=color.black,
	 textcolor=color.white
	 )

/////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- BAR COLOR ---
//
/////////////////////////////////////////////////////////////////////////////////////////////////

showBarColor = input(true)

// barcolor(showBarColor and showRegularDiv and (hasRegularBullishDiv or hasRegularBearishDiv) ? (hasRegularBullishDiv ? color.green : color.red) : na)
barcolor(showBarColor ? hasRegularBullishDiv ? bullColorOne : hasRegularBearishDiv ? bearColorOne : na : na)


/////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- HIDDEN ---
//
/////////////////////////////////////////////////////////////////////////////////////////////////




plot(
	 showHiddenDiv and hasPivotLow ? isOverlayingCandles ? low[ppLookAhead] : blueWave[ppLookAhead] : na,
	 offset=-ppLookAhead,
	 title="Hidden Bullish",
	 linewidth=divLineWidth,
	 color=(hasHiddenBullishDiv ? bullColorOne : color.new(color.white, 100))
	 )

plotshape(
	 showHiddenDiv and hasHiddenBullishDiv ? isOverlayingCandles ? low[ppLookAhead] : blueWave[ppLookAhead] : na,
	 offset=-ppLookAhead,
	 title="Hidden Bullish Label",
	 text=divLabelHiddenBull,
	 style=shape.labelup,
	 location=location.absolute,
	 color=bullColorOne,
	 textcolor=bullColorTwo
	 )


plot(
	 showHiddenDiv and hasPivotHigh ? isOverlayingCandles ? high[ppLookAhead] : blueWave[ppLookAhead] : na,
	 offset=-ppLookAhead,
	 title="Hidden Bearish",
	 linewidth=divLineWidth,
	 color=(hasHiddenBearishDiv ? bearColorOne : color.new(color.white, 100))
	 )

plotshape(
     showHiddenDiv and hasHiddenBearishDiv ? isOverlayingCandles ? high[ppLookAhead] : blueWave[ppLookAhead] : na,
	 offset=-ppLookAhead,
	 title="Hidden Bearish Label",
	 text=divLabelHiddenBear,
	 style=shape.labeldown,
	 location=location.absolute,
	 color=bearColorOne,
	 textcolor=bearColorTwo
	 )

/////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- ALERTS ---
//
/////////////////////////////////////////////////////////////////////////////////////////////////

alertcondition(hasRegularBullishDiv, "Regular Bullish Divergence", "Regular Bullish Divergence")
alertcondition(hasHiddenBullishDiv, "Hidden Bullish Divergence", "Hidden Bullish Divergence")
alertcondition(hasRegularBearishDiv, "Regular Bearish Divergence", "Regular Bearish Divergence")
alertcondition(hasHiddenBearishDiv, "Hidden Bearish Divergence", "Hidden Bearish Divergence")
