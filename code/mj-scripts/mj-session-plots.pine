//@version=4

study("MJ - Session PLOTS", overlay=true)

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1
COLOR_GREEN = #4caf50
COLOR_ROYAL_BLUE = #1848cc
COLOR_ROYAL_BLUE_TWO = #052bec
COLOR_TURQUOISE = #00897b
COLOR_TURQUOISE_TWO = #00796b
COLOR_PEACH = #e57373

//////////////////////////////////////////////////////////////////
// 
// ==== INPUTS ==== 
// 
//////////////////////////////////////////////////////////////////

groupSwitches='Switches'
groupLineWidth='Line Width'
groupPlotStyle='Plot Style'
groupColors = 'Colors'
groupTimeRanges = 'Time Ranges'
groupMaxTF = 'Max Timeframe'
groupMarkers='Markers'

// tooltips

string TT_PR = "Final time to which the High and Low of the session will be held"
string TT_TZ = "Offsets all time inputs together to help align to preferred timezone"
string TT_LB = "The number of days back to plot the session levels"

// switches

plotAsiaOpenActive = input(true, 'Plot - Asia Open', group=groupSwitches)
plotLondonOpenActive = input(true, 'Plot - London Open', group=groupSwitches)
plotNyOpenActive = input(true, 'Plot - NY Open', group=groupSwitches)
plotDailyOpenActive = input(true, 'Plot - Daily Open', group=groupSwitches)
plotPsyActive = input(true, 'Plot - Psy Levels', group=groupSwitches)
plotAthActive = input(true, 'Plot - ATH', group=groupSwitches)

// line width

lineWidthAsiaOpen = input(3, 'Line Width - Asia Open', group=groupLineWidth, options=[1,2,3,4])
lineWidthLondonOpen = input(2, 'Line Width - London Open', group=groupLineWidth, options=[1,2,3,4])
lineWidthNyOpen = input(2, 'Line Width - NY Open', group=groupLineWidth, options=[1,2,3,4])
lineWidthDailyOpen = input(3, 'Line Width - Daily Open', group=groupLineWidth, options=[1,2,3,4])
lineWidthPsy = input(2, 'Line Width - Psy Levels', group=groupLineWidth, options=[1,2,3,4])
lineWidthAth = input(4, 'Line Width - ATH', group=groupLineWidth, options=[1,2,3,4])

// plot style

asiaOpenPlotStyle = input(plot.style_stepline, 'Plot Style - Asia Open', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])
londonOpenPlotStyle = input(plot.style_stepline, 'Plot Style - London Open', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])
nyOpenPlotStyle = input(plot.style_stepline, 'Plot Style - NY Open', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])
dailyOpenPlotStyle = input(plot.style_stepline, 'Plot Style - Daily Open', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])
psyPlotStyle = input(plot.style_stepline, 'Plot Style - Psy Levels', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])
athPlotStyle = input(plot.style_circles, 'Plot Style - ATH', group=groupPlotStyle, options=[plot.style_circles, plot.style_cross, plot.style_stepline])

// colors

// electric green #00e676
// turqoise #00897b

// ny marooon #880e4f
// ny blue #0c3299
// ny bright red #ad0c0c
// london purple 1 #1a1736
// london purple 2 #151048
// london magenta #ab47bc

asiaColor = input(color.new(#00796b, 0), 'Asia', input.color, group=groupColors)
dailyOpenColor = input(color.new(COLOR_ROYAL_BLUE_TWO, 00), 'Daily Open', input.color, group=groupColors)
londonColor = input(color.new(#ab47bc, 10), 'London', input.color, group=groupColors)
nyColor = input(color.new(#880e4f, 10), 'New York', input.color, group=groupColors)
psyColor = input(color.new(COLOR_GOLD, 10), 'Psy Levels', input.color, group=groupColors)
athColor = input(color.new(COLOR_GOLD, 10), 'ATH', input.color, group=groupColors)

// max timeframe

maxTimeframeAsiaOpen = input(5, 'Max TF - Asia Open', maxval=240, minval=1, group=groupMaxTF)
maxTimeframeLondonOpen = input(5, 'Max TF - London Open', maxval=240, minval=1, group=groupMaxTF)
maxTimeframeNyOpen = input(5, 'Max TF - NY Open', maxval=240, minval=1, group=groupMaxTF)
maxTimeframeDailyOpen = input(15, 'Max TF - Daily Open', maxval=240, minval=1, group=groupMaxTF)
maxTimeframePsy = input(15, 'Max TF - Psy Levels', maxval=240, minval=1, group=groupMaxTF)
maxTimeframeAth = input(240, 'Max TF - ATH', maxval=240, minval=1, group=groupMaxTF)

// time ranges

asiaOpenTimeRange = input('2100-2045:1234567', 'Asia Open', group=groupTimeRanges, type=input.session)
londonTimeRange = input('0800-1630:23456', 'London Open', group=groupTimeRanges, type=input.session)
nyTimeRange = input('1300-2100:23456', 'New York Open', group=groupTimeRanges, type=input.session)
dailyOpenTimeRange = input('0000-0015:1234567', 'Daily Open', group=groupTimeRanges, type=input.session)

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_captureSessionLevels(timeRange, holdActive) => 
    _inSession = _isInSession(timeRange)
    _inHolding = holdActive and not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := max(high, _sessionHigh)
            _sessionLow  := min(low, _sessionLow)

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

/////////////////////////////////////////////////////////
// 
// --- PSY LEVELS ---
// 
/////////////////////////////////////////////////////////

int chart_gmt = input(group='Day start hour offset', title='Offset hours (For exchanges that have weekend data - set to 3 for Sydney open in DST and set to 2 for Sydney open out of DST. Note: Sydney is in the southern hemisphere which means DST is on during the winter in the the northern hemisphere.) ', defval=3, minval=-12, maxval=14, step=1, tooltip='This allows you to move the daily open/Psy Levels to some desired time like for example the start of Sydney as oposed to exchange midnight. Negative values move line to the right, positive values move line to the left. For exchanges not using UTC+0 simply adjust the offset such that the daily open/psy level calculation start at some desired time. default is set to 3.')

calc_gmt_offset(gmtOffsetVar) =>
    gmtVar = 'GMT+0'
    if gmtOffsetVar > -1
        gmtVar := 'GMT+' + tostring(abs(gmtOffsetVar))
        gmtVar
    else
        gmtVar := 'GMT-' + tostring(abs(gmtOffsetVar))
        gmtVar
    gmtVar

dly_offset = calc_gmt_offset(chart_gmt)

calc_psy_hilo(gmtoffsetPsy) =>

    //4 hour res based on how mt4 does it
    //so basically because the session is 8 hours and we are liiking at a 4 hour resolution we only need to take the highest high an lowest low of 2 bars
    //we use the gmt offset to adjust the 0000-0800 session to Sydney open which is at 2100 during dst and at 2000 otherwize. (dst - spring foward, fall back)
    in_session = time('240', '0000-0800:1', gmtoffsetPsy)
    new_session = in_session and not in_session[1]
    float psyHigh = 0.0
    float psyLow = 100000000000.0

    psyHigh := new_session ? high : in_session ? max(high, psyHigh[1]) : psyHigh[1]
    psyLow := new_session ? low : in_session ? min(low, psyLow[1]) : psyLow[1]
    [psyHigh, psyLow]

[psyHigh, psyLow] = calc_psy_hilo(dly_offset)

/////////////////////////////////////////////////////////
// 
// --- ALL TIME HIGH ---
// 
/////////////////////////////////////////////////////////

g=bar_index==1

ath()=>
    a=0.0
    a:=g ? high : high>a[1] ? high:a[1]
    
allTimeHigh = security(syminfo.tickerid, 'M', ath(),lookahead=barmerge.lookahead_on)

/////////////////////////////////////////////////////////
// 
// --- LINE PLOTS ---
// 
/////////////////////////////////////////////////////////

_isValidTF(maxTF) => timeframe.isseconds or (timeframe.isminutes and timeframe.multiplier <= maxTF)

[asiaHigh, asiaLow, asiaOpen] = _captureSessionLevels(asiaOpenTimeRange, false)
[londonHigh, londonLow, londonOpen] = _captureSessionLevels(londonTimeRange, false)
[nyHigh, nyLow, nyOpen] = _captureSessionLevels(nyTimeRange, false)
[dailyHigh, dailyLow, dailyOpen] = _captureSessionLevels(dailyOpenTimeRange, true)

asiaOpenPlot  = plot(
     plotAsiaOpenActive and _isValidTF(maxTimeframeAsiaOpen) and _isInSession(asiaOpenTimeRange) ? asiaOpen : na,  
     "Asia Open",  
     plotAsiaOpenActive and _isInSession(asiaOpenTimeRange) ? asiaColor : na,  
     lineWidthAsiaOpen, 
     asiaOpenPlotStyle)

londonPlotOpen  = plot(
      plotLondonOpenActive and _isValidTF(maxTimeframeLondonOpen) and _isInSession(londonTimeRange) ? londonOpen : na,  
      "London Open",  
      _isInSession(londonTimeRange) ? londonColor : na,  
      lineWidthLondonOpen, 
      londonOpenPlotStyle)

nyPlotOpen  = plot(
      plotNyOpenActive and _isValidTF(maxTimeframeNyOpen) and _isInSession(nyTimeRange) ? nyOpen : na,  
      "New York Open",  
      _isInSession(nyTimeRange) ? nyColor : na,  
      lineWidthNyOpen, 
      nyOpenPlotStyle)

dailyOpenPlot = plot(
     plotDailyOpenActive and _isValidTF(maxTimeframeDailyOpen) ? dailyOpen : na,  
     "Daily Open",  
     plotDailyOpenActive ? dailyOpenColor : na,  
     lineWidthDailyOpen, 
     dailyOpenPlotStyle)

psyHighPlot = plot(
     plotPsyActive and _isValidTF(maxTimeframePsy) ? psyHigh : na,  
     "Psy High",  
     plotPsyActive ? psyColor : na,  
     lineWidthPsy, 
     psyPlotStyle)

psyLowPlot = plot(
     plotPsyActive and _isValidTF(maxTimeframePsy) ? psyLow : na,  
     "Psy Low",  
     plotPsyActive ? psyColor : na,  
     lineWidthPsy, 
     psyPlotStyle)

allTimeHighPlot = plot(
     plotAthActive and _isValidTF(maxTimeframeAth) ? allTimeHigh : na,  
     "ATH",  
     plotAthActive ? athColor : na,  
     lineWidthAth, 
     athPlotStyle,
     offset=-9999,
     trackprice=true)

/////////////////////////////////////////////////////////////
// 
// --- MARKERS ---
//
/////////////////////////////////////////////////////////////

didCrossAsiaOpen = cross(close, asiaOpen)
didCrossDailyOpen = cross(close, dailyOpen)
didCrossNyOpen = cross(close, nyOpen)
didCrossLondonOpen = cross(close, londonOpen)

markerCrossPlotStyle = input(
     shape.xcross, 
     'Cross Marker Style', 
     options=[shape.xcross, shape.cross, shape.triangleup, shape.triangledown, shape.flag, shape.circle, shape.arrowup, shape.arrowdown, shape.labelup, shape.labeldown, shape.square, shape.diamond], 
     group=groupMarkers)

markerCrossPlotLocation = input(
     location.bottom, 
     'Cross Marker Location', 
     options=[location.abovebar, location.belowbar, location.top, location.bottom, location.absolute], 
     group=groupMarkers)

markerOpacity = input(10, 'Marker Shape Opacity', minval=0, maxval=100, group=groupMarkers)
markerTextOpacity = input(0, 'Marker Text Opacity', minval=0, maxval=100, group=groupMarkers)
markerShapeSize = size.small // must be constant or compiler will complain

markerTextColorSameAsMarkerColor = input(false, 'Text Color Same As Marker Color?', group=groupMarkers)
showCrossMarkerAsiaOpen = input(false, 'Show Cross Marker - Asia Open', group=groupMarkers)
showCrossMarkerDailyOpen = input(false, 'Show Cross Marker - Daily Open', group=groupMarkers)
showCrossMarkerNyOpen = input(false, 'Show Cross Marker - NY Open', group=groupMarkers)
showCrossMarkerLondonOpen = input(false, 'Show Cross Marker - London Open', group=groupMarkers)

_markerTextColor(baseColor) => color.new(markerTextColorSameAsMarkerColor ? baseColor : color.white, markerTextOpacity)

plotshape(
     series=showCrossMarkerAsiaOpen ? didCrossAsiaOpen : na, 
     text='A',
     title='Cross - Asia Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(asiaColor, markerOpacity),
     textcolor=_markerTextColor(asiaColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerDailyOpen ? didCrossDailyOpen : na, 
     text='D',
     title='Cross - Daily Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(dailyOpenColor, markerOpacity),
     textcolor=_markerTextColor(dailyOpenColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerNyOpen ? didCrossNyOpen : na, 
     text='NY',
     title='Cross - NY Open', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(nyColor, markerOpacity),
     textcolor=_markerTextColor(nyColor),
     size=markerShapeSize)

plotshape(
     series=showCrossMarkerLondonOpen ? didCrossLondonOpen : na, 
     text='L',
     title='Cross - London', 
     style=markerCrossPlotStyle, 
     location=markerCrossPlotLocation, 
     color=color.new(londonColor, markerOpacity),
     textcolor=_markerTextColor(londonColor),
     size=markerShapeSize)

/////////////////////////////////////////////////////////////
// 
// --- ALERTS ---
//
/////////////////////////////////////////////////////////////

alertcondition(didCrossAsiaOpen, title='Price x Asia Open', message='{{ticker}} Price x Asia Open')
alertcondition(didCrossNyOpen, title='Price x NY Open', message='{{ticker}} Price x NY Open')
alertcondition(didCrossLondonOpen, title='Price x London Open', message='{{ticker}} Price x London Open')     
alertcondition(didCrossDailyOpen, title='Price x Daily Open', message='{{ticker}} Price x Daily Open')
