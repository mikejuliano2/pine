//@version=5
indicator(title="MJ - VWAP SUite", shorttitle="MJ - VWAP Suite", overlay=true)

var cumVol = 0.
cumVol += nz(volume)

groupShared = 'Shared'
inlineDev = 'Deviations'
inlineSharedStyles = 'Styling'
inlineSharedToggles = 'Toggles'

hideonDWM = input(false, title="Hide VWAP 1D / Above", group=groupShared, inline=inlineSharedToggles)
showBands = input(true, title="Show Bands", group=groupShared, inline=inlineSharedToggles)
// TrackCloses = input(false, title="Track Dates", group=groupShared, inline=inlineSharedToggles)

stdevMult = input(1.0, title="B1", group=groupShared, inline=inlineDev)
stdevMult2 = input(1.5, title="B2", group=groupShared, inline=inlineDev)
stdevMult3 = input(2.0, title="B3", group=groupShared, inline=inlineDev)

VwapStyle = input.string("line", options = ["circles","line","cross"],title = "VWAP", group=groupShared, inline=inlineSharedStyles)
//CloseStyle = input.string("circles", options = ["circles","line","cross"],title = "Close", group=groupShared, inline=inlineSharedStyles)
BandStyle = input.string("line", options = ["circles","line","cross"],title = "Bands", group=groupShared, inline=inlineSharedStyles)
plotStylePVA = input.string("line", options = ["circles","line","cross"],title = "PVA", group=groupShared, inline=inlineSharedStyles)
plotStylePpoc = input.string("cross", options = ["circles","line","cross"],title = "PVA", group=groupShared, inline=inlineSharedStyles)

LabelSize = input.string("small", options = ["small","medium","large"],title = "Label Size", group=groupShared, inline=inlineSharedStyles)

_getLineStyle(_style) => (_style == "line") ? plot.style_line : (_style == "circles") ? plot.style_circles : (_style == "cross") ? plot.style_cross : na 

VwapStyleHolder = _getLineStyle(VwapStyle)
//CloseStyleHolder = _getLineStyle(CloseStyle)
BandStyleHolder = _getLineStyle(BandStyle)
pvaPlotStyleHolder = _getLineStyle(plotStylePVA)
ppocPlotStyle = _getLineStyle(plotStylePpoc)

TextColor = color.white

_labelText(TF, multiple) => TF + " " + str.tostring(multiple)

dayColor = '#ffcc80'
weekColor = '#00bcd4'
monthColor = '#7b1fa2'

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- VWAP 1 ---
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

groupV1 = 'VWAP1'
inlineOptions1 = 'V1 Options'
inlineMain1 = 'main1'

var anchorS1 = input.string(defval = "D", title="VWAP 1 Anchor", options=["None","D", "W", "M", "3M", "6M", "12M"], group=groupV1, inline=inlineMain1)
offsetV1 = input(10, title="Offset", group=groupV1, inline=inlineMain1)
TextColor1 = input.color(color.new(#ffcc80, 40), title="Text", group=groupV1, inline=inlineMain1)
Vwap1Color = input.color(color.new(#ffcc80, 30), title = "VWAP/Close", group=groupV1, inline=inlineMain1)
Band1Color = input.color(color.new(#090720, 70), title = "Bands", group=groupV1, inline=inlineMain1)
onePpocColor = input.color(color.new(#ffcc80, 70), title = "PPOC", group=groupV1, inline=inlineMain1)
onePvaEdgeColor = input.color(color.new(color.white, 80), title = "PVA Edge", group=groupV1, inline=inlineMain1)
onePvaFillColor = input.color(color.new(color.white, 88), title = "PVA Fill", group=groupV1, inline=inlineMain1)
oneDvaFillColor = input.color(color.new(#87524f, 88), title = "DVA Fill", group=groupV1, inline=inlineMain1)

Sizeholder= size.small
if LabelSize == "medium"
    Sizeholder := size.normal
else if LabelSize == "large"
    Sizeholder := size.large

showOneVwap = input(true, title="VWAP", group=groupV1, inline=inlineOptions1)
showOneBands = input(true, title="Bands", group=groupV1, inline=inlineOptions1)
showOneLabels = input(true, title="Labels", group=groupV1, inline=inlineOptions1)
showOneBand1 = input(true, title="B1", group=groupV1, inline=inlineOptions1) and showBands and showOneBands
showOneBand2 = input(true, title="B2", group=groupV1, inline=inlineOptions1) and showBands and showOneBands
showOneBand3 = input(true, title="B3", group=groupV1, inline=inlineOptions1) and showBands and showOneBands
showOneLabel1 = input(true, title="L1", group=groupV1, inline=inlineOptions1) and showOneLabels
showOneLabel2 = input(true, title="L2", group=groupV1, inline=inlineOptions1) and showOneLabels
showOneLabel3 = input(true, title="L3", group=groupV1, inline=inlineOptions1) and showOneLabels
showOneLabelC = input(true, title="LC", group=groupV1, inline=inlineOptions1) and showOneLabels
showOnePPOC = input(true, title="PPOC", group=groupV1, inline=inlineOptions1)
showOnePva = input(true, title="PVA", group=groupV1, inline=inlineOptions1)
onePvaFillActive = input(true, title="PVA Fill", group=groupV1, inline=inlineOptions1)
oneDvaFillActive = input(true, title="DVA Fill", group=groupV1, inline=inlineOptions1)

anchorOneDefined = anchorS1 != "None" 
V1S1Condition = anchorOneDefined and showOneLabel1
V1S2Condition = anchorOneDefined and showOneLabel2
V1S3Condition = anchorOneDefined and showOneLabel3
V1CCondition = anchorOneDefined and showOneLabelC

var label L1V1S1 = (V1S1Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS1, stdevMult), textcolor=TextColor1, size = Sizeholder) :na
var label L2V1S1 = (V1S1Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS1, stdevMult * -1), textcolor=TextColor1, size = Sizeholder) :na
var label L1V1S2 = (V1S2Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS1, stdevMult2), textcolor=TextColor1, size = Sizeholder) :na
var label L2V1S2 = (V1S2Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS1, stdevMult2 * -1), textcolor=TextColor1, size = Sizeholder) :na
var label L1V1S3 = (V1S3Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS1, stdevMult3), textcolor=TextColor1, size = Sizeholder) :na
var label L2V1S3 = (V1S3Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS1, stdevMult3 * -1), textcolor=TextColor1, size = Sizeholder) :na
var label L1V1C = (V1CCondition) ? label.new(bar_index,high,style = label.style_none,text=anchorS1 + " 0", textcolor=TextColor1, size = Sizeholder) :na


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- VWAP 2 ---
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

groupV2 = 'VWAP2'
inlineOptions2 = 'V2 Options'
inlineMain2 = 'main2'

var anchorS2 = input.string(defval = "W", title="V2 Anchor", options=["None","D", "W", "M", "3M", "6M", "12M"], group=groupV2, inline=inlineMain2)
offsetV2 = input(15, title="Offset", group=groupV2, inline=inlineMain2)
TextColor2 = input.color(color.new(#00bcd4, 0), title="Text", group=groupV2, inline=inlineMain2)
Vwap2Color = input.color(color.new(#00bcd4, 20), title = "VWAP/Close",group=groupV2, inline=inlineMain2)
Band2Color = input.color(color.new(#090720, 70), title = "Bands",group=groupV2, inline=inlineMain2)
twoPpocColor = input.color(color.new(color.green, 70), title = "PPOC", group=groupV2, inline=inlineMain2)
twoPvaEdgeColor = input.color(color.new(#00bcd4, 50), title = "PVA Edge", group=groupV2, inline=inlineMain2)
twoPvaFillColor = input.color(color.new(#00bcd4, 90), title = "PVA Fill", group=groupV2, inline=inlineMain2)
twoDvaFillColor = input.color(color.new(#00332a, 80), title = "DVA Fill", group=groupV2, inline=inlineMain2)

showTwoVwap = input(false, title="VWAP", group=groupV2, inline=inlineOptions2)
showTwoBands = input(false, title="Bands", group=groupV2, inline=inlineOptions2)
showTwoLabels = input(true, title="Labels", group=groupV2, inline=inlineOptions2)
showTwoBand1 = input(true, title="B1", group=groupV2, inline=inlineOptions2) and showBands and showTwoBands
showTwoBand2 = input(true, title="B2", group=groupV2, inline=inlineOptions2) and showBands and showTwoBands
showTwoBand3 = input(true, title="B3", group=groupV2, inline=inlineOptions2) and showBands and showTwoBands
showTwoLabel1 = input(true, title="L1", group=groupV2, inline=inlineOptions2) and showTwoLabels
showTwoLabel2 = input(true, title="L2", group=groupV2, inline=inlineOptions2) and showTwoLabels
showTwoLabel3 = input(true, title="L3", group=groupV2, inline=inlineOptions2) and showTwoLabels
showTwoLabelC = input(true, title="LC", group=groupV2, inline=inlineOptions2) and showTwoLabels
showTwoPPOC = input(false, title="PPOC", group=groupV2, inline=inlineOptions2)
showTwoPva = input(false, title="PVA", group=groupV2, inline=inlineOptions2)
twoPvaFillActive = input(false, title="PVA Fill", group=groupV2, inline=inlineOptions2)
twoDvaFillActive = input(true, title="DVA Fill", group=groupV2, inline=inlineOptions2)

anchorTwoDefined = anchorS2 != "None" 
V2S1Condition = anchorTwoDefined and showTwoLabel1
V2S2Condition = anchorTwoDefined and showTwoLabel2
V2S3Condition = anchorTwoDefined and showTwoLabel3
V2CCondition = anchorTwoDefined and showTwoLabelC

var label L1V2S1 = (V2S1Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS2, stdevMult), textcolor=TextColor2, size = Sizeholder) :na
var label L2V2S1 = (V2S1Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS2, stdevMult * -1), textcolor=TextColor2, size = Sizeholder) :na
var label L1V2S2 = (V2S2Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS2, stdevMult2), textcolor=TextColor2, size = Sizeholder) :na
var label L2V2S2 = (V2S2Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS2, stdevMult2 *-1), textcolor=TextColor2, size = Sizeholder) :na
var label L1V2S3 = (V2S3Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS2, stdevMult3), textcolor=TextColor2, size = Sizeholder) :na
var label L2V2S3 = (V2S3Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS2, stdevMult3 * -1), textcolor=TextColor2, size = Sizeholder) :na
var label L1V2C = (V2CCondition) ? label.new(bar_index,high,style = label.style_none,text=anchorS2 + " 0", textcolor=TextColor2, size = Sizeholder) :na


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- VWAP 3 ---
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

groupV3 = 'VWAP3'
inlineOptions3 = 'V3 Options'
inlineMain3 = 'main3'

var anchorS3 = input.string(defval = "M", title="VWAP 3 Anchor", options=["None","D", "W", "M", "3M", "6M", "12M"], group=groupV3, inline=inlineMain3)
offsetV3 = input(20, title="Offset", group=groupV3, inline=inlineMain3)
TextColor3 = input.color(color.new(#7b1fa2, 0), title="Text", group=groupV3, inline=inlineMain3)
Vwap3Color = input.color(color.new(#7b1fa2, 0), title = "VWAP/Close",group=groupV3, inline=inlineMain3)
Band3Color = input.color(color.new(#090720, 70), title = "Bands",group=groupV3, inline=inlineMain3)
threePpocColor = input.color(color.new(#7b1fa2, 50), title = "PPOC", group=groupV3, inline=inlineMain3)
threePvaEdgeColor = input.color(color.new(#7b1fa2, 50), title = "PVA Edge", group=groupV3, inline=inlineMain3)
threePvaFillColor = input.color(color.new(#7b1fa2, 90), title = "PVA Fill", group=groupV3, inline=inlineMain3)
threeDvaFillColor = input.color(color.new(#7b1fa2, 88), title = "DVA Fill", group=groupV3, inline=inlineMain3)

showThreeVwap = input(false, title="VWAP", group=groupV3, inline=inlineOptions3)
showThreeBands = input(false, title="Bands", group=groupV3, inline=inlineOptions3)
showThreeLabels = input(true, title="Labels", group=groupV3, inline=inlineOptions3)
showThreeBand1 = input(true, title="B1", group=groupV3, inline=inlineOptions3) and showBands and showThreeBands
showThreeBand2 = input(true, title="B2", group=groupV3, inline=inlineOptions3) and showBands and showThreeBands
showThreeBand3 = input(true, title="B3", group=groupV3, inline=inlineOptions3) and showBands and showThreeBands
showThreeLabel1 = input(true, title="L1", group=groupV3, inline=inlineOptions3) and showThreeLabels
showThreeLabel2 = input(true, title="L2", group=groupV3, inline=inlineOptions3) and showThreeLabels
showThreeLabel3 = input(true, title="L3", group=groupV3, inline=inlineOptions3) and showThreeLabels
showThreeLabelC = input(true, title="LC", group=groupV3, inline=inlineOptions3) and showThreeLabels
showThreePPOC = input(false, title="PPOC", group=groupV3, inline=inlineOptions3)
showThreePva = input(false, title="PVA", group=groupV3, inline=inlineOptions3)
threePvaFillActive = input(false, title="PVA Fill", group=groupV3, inline=inlineOptions3)
threeDvaFillActive = input(true, title="DVA Fill", group=groupV3, inline=inlineOptions3)

anchorThreeDefined = anchorS3 != "None" 
V3S1Condition =  anchorThreeDefined and showThreeLabel1
V3S2Condition = anchorThreeDefined and showThreeLabel2
V3S3Condition = anchorThreeDefined and showThreeLabel3
V3CCondition = anchorThreeDefined and showThreeLabelC

var label L1V3S1 = (V3S1Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS3, stdevMult), textcolor=TextColor3, size = Sizeholder) :na
var label L2V3S1 = (V3S1Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS3, stdevMult *-1), textcolor=TextColor3, size = Sizeholder) :na
var label L1V3S2 = (V3S2Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS3, stdevMult2), textcolor=TextColor3, size = Sizeholder) :na
var label L2V3S2 = (V3S2Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS3, stdevMult2 *-1), textcolor=TextColor3, size = Sizeholder) :na
var label L1V3S3 = (V3S3Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS3, stdevMult3), textcolor=TextColor3, size = Sizeholder) :na
var label L2V3S3 = (V3S3Condition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS3, stdevMult3 *-1), textcolor=TextColor3, size = Sizeholder) :na
var label L1V3C = (V3CCondition) ? label.new(bar_index,high,style = label.style_none,text=_labelText(anchorS3, 0), textcolor=TextColor3, size = Sizeholder) :na

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- FUNCTIONS ---
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

setLabelPrice(_label, _price,_offset) =>
    label.set_y(_label,_price)
    label.set_x(_label,bar_index + _offset)

computeVWAP(src, isNewPeriod) =>
	var float sumSrcVol = na
	var float sumVol = na

	sumSrcVol := isNewPeriod ? src * volume : src * volume + sumSrcVol[1]
	sumVol := isNewPeriod ? volume : volume + sumVol[1]
	// sumSrcSrcVol calculates the dividend of the equation that is later used to calculate the standard deviation

	_vwap = sumSrcVol / sumVol

	[_vwap,sumVol]


computeBANDS(src,isNewPeriod,stDevMultiplier,_vwap,sumVol) =>
    var float sumSrcSrcVol = na

    sumSrcSrcVol := isNewPeriod ? volume * math.pow(src, 2) : volume * math.pow(src, 2) + sumSrcSrcVol[1]
	variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = math.sqrt(variance)
	lowerBand = _vwap - stDev * stDevMultiplier
	upperBand = _vwap + stDev * stDevMultiplier

	[lowerBand, upperBand]

timeChange(period) =>
	ta.change(time(period))


is_newbar(res) =>
    t = time(res)
    not na(t) and (na(t[1]) or t > t[1])

getDay()=>
    (dayofweek == dayofweek.monday) ? "Saturday" : (dayofweek == dayofweek.tuesday) ? "Sunday" : (dayofweek == dayofweek.wednesday) ? "Monday" : (dayofweek == dayofweek.thursday) ? "Tuesday" : (dayofweek == dayofweek.friday) ? "Wednesday" : (dayofweek == dayofweek.saturday) ? "Thursday" : (dayofweek == dayofweek.sunday) ? "Friday" : na

getWeek()=>
    weekofyear[1]

getMonth()=>
    realmonth = month - 2
    if realmonth < 1
        realmonth := 12
    (realmonth == 1) ? "January" :(realmonth == 2) ? "February" :(realmonth == 3) ? "March" :(realmonth == 4) ? "April" :(realmonth == 5) ? "May" :(realmonth == 6) ? "June" :(realmonth == 7) ? "July" :(realmonth == 8) ? "August" :(realmonth == 9) ? "September" :(realmonth == 10) ? "October" :(realmonth == 11) ? "November" :(realmonth == 12) ? "December" : na

getYear()=>
    year - 2

trackClosesText(anchor)=>
    if anchor == "D"
        getDay()

    else if anchor == "W"
        str.tostring(getWeek()) + " " + " /52"

    else if anchor == "M" or anchor == "3M" or anchor == "6M"
        str.tostring(getMonth())
    else
        str.tostring(getYear())

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- PLOTTING VWAP 1 ---
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if barstate.islast and cumVol == 0
    runtime.error("No volume is provided by the data vendor.")

isFirstBarPeriod1 = anchorOneDefined and is_newbar(anchorS1)

var float vwapValueS1 = na
var float onePPOC = na
var float onePVAH = na
var float onePVAL = na
var float oneDVAH = na
var float oneDVAL = na
float upBand2S1 = na
float lowBand2S1 = na
float upBand3S1 = na
float lowBand3S1 = na


if showOnePPOC and isFirstBarPeriod1
    //if TrackCloses
        //label.new(bar_index[1],onePPOC, text=str.tostring(trackClosesText(anchorS1)) + " VWAP Close", style = label.style_none, textcolor=TextColor)
    onePPOC := vwapValueS1

if isFirstBarPeriod1 and showOnePva
    onePVAH := oneDVAH
    onePVAL := oneDVAL

if not (hideonDWM and timeframe.isdwm)
    [_vwap,sumVol] = computeVWAP(hlc3, isFirstBarPeriod1)
    vwapValueS1 := _vwap

    if showOneLabelC
        setLabelPrice(L1V1C,vwapValueS1,offsetV1)

    //if showOneBand1
    [lowerBandValues, upperBandValues] = computeBANDS(hlc3,isFirstBarPeriod1,stdevMult,_vwap,sumVol)
    oneDVAH := upperBandValues
    oneDVAL :=lowerBandValues
    if showOneLabel1
        setLabelPrice(L1V1S1,oneDVAH,offsetV1)
        setLabelPrice(L2V1S1,oneDVAL,offsetV1)

    //if showOneBand2
    [lowerBandValues2, upperBandValues2] = computeBANDS(hlc3,isFirstBarPeriod1,stdevMult2,_vwap,sumVol)
    upBand2S1 := upperBandValues2
    lowBand2S1 :=lowerBandValues2
    if showOneLabel2
        setLabelPrice(L1V1S2,upBand2S1,offsetV1)
        setLabelPrice(L2V1S2,lowBand2S1,offsetV1)

    //if showOneBand3
    [lowerBandValues3, upperBandValues3] = computeBANDS(hlc3,isFirstBarPeriod1,stdevMult3,_vwap,sumVol)
    upBand3S1 := upperBandValues3
    lowBand3S1 :=lowerBandValues3
    if showOneLabel3
        setLabelPrice(L1V1S3,upBand3S1,offsetV1)
        setLabelPrice(L2V1S3,lowBand3S1,offsetV1)

plot(showOneVwap ? vwapValueS1 : na, title="VWAP 1", color=Vwap1Color, offset=0, style = VwapStyleHolder)

oneDvahPlot = plot(showOneBand1 ? oneDVAH : na, title="One DVAH", color=Band1Color, offset=0, style=BandStyleHolder)
oneDvalPlot = plot(showOneBand1 ? oneDVAL : na, title="One DVAL", color=Band1Color, offset=0, style=BandStyleHolder)
fill(oneDvalPlot, oneDvahPlot, oneDvaFillActive ? oneDvaFillColor : na, title='One DVA Fill')

plot(showOneBand2 ? upBand2S1 : na, title="One +1.5", color=Band1Color, offset=0, style =BandStyleHolder)
plot(showOneBand2 ? lowBand2S1 : na, title="One -1.5", color=Band1Color, offset=0, style =BandStyleHolder)
plot(showOneBand3 ? upBand3S1 : na, title="One +2", color=Band1Color, offset=0, style =BandStyleHolder)
plot(showOneBand3 ? lowBand3S1 : na, title="One -2", color=Band1Color, offset=0, style =BandStyleHolder)

onePpocPlot = plot(onePPOC, title="One PPOC", color=onePpocColor, offset=0,style=ppocPlotStyle)
onePvahPlot = plot(onePVAH, title="One PVAH", color=onePvaEdgeColor, offset=0,style=pvaPlotStyleHolder)
onePvalPlot = plot(onePVAL, title="One PVAL", color=onePvaEdgeColor, offset=0,style=pvaPlotStyleHolder)
fill(onePvalPlot, onePvahPlot, onePvaFillActive ? onePvaFillColor : na, title='One PVA Fill')

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- PLOTTING VWAP 2 ---
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

isFirstBarPeriod2 = anchorTwoDefined and is_newbar(anchorS2)

var float vwapValueS2 = na
var float twoPPOC = na
var float twoDVAH = na
var float twoDVAL = na
var float twoPVAH = na
var float twoPVAL = na
float upBand2S2 = na
float lowBand2S2 = na
float upBand3S2 = na
float lowBand3S2 = na


if showTwoPPOC and isFirstBarPeriod2
    //if TrackCloses
        //label.new(bar_index[1],twoPPOC, text=str.tostring(trackClosesText(anchorS2)) + " VWAP Close", style = label.style_none, textcolor=TextColor)
    twoPPOC := vwapValueS2

if isFirstBarPeriod2 and showTwoPva
    twoPVAH := twoDVAH
    twoPVAL := twoDVAL

if not (hideonDWM and timeframe.isdwm)
    [_vwap,sumVol] = computeVWAP(hlc3, isFirstBarPeriod2)
    vwapValueS2 := _vwap

    if showTwoLabelC
        setLabelPrice(L1V2C,vwapValueS2,offsetV2)

    //if showTwoBand1
    [lowerBandValues, upperBandValues] = computeBANDS(hlc3,isFirstBarPeriod2,stdevMult,_vwap,sumVol)
    twoDVAH := upperBandValues
    twoDVAL :=lowerBandValues
    if showTwoLabel1
        setLabelPrice(L1V2S1,twoDVAH,offsetV2)
        setLabelPrice(L2V2S1,twoDVAL,offsetV2)

    //if showTwoBand2
    [lowerBandValues2, upperBandValues2] = computeBANDS(hlc3,isFirstBarPeriod2,stdevMult2,_vwap,sumVol)
    upBand2S2 := upperBandValues2
    lowBand2S2 :=lowerBandValues2
    if showTwoLabel2
        setLabelPrice(L1V2S2,upBand2S2,offsetV2)
        setLabelPrice(L2V2S2,lowBand2S2,offsetV2)

    //if showTwoBand3
    [lowerBandValues3, upperBandValues3] = computeBANDS(hlc3,isFirstBarPeriod2,stdevMult3,_vwap,sumVol)
    upBand3S2 := upperBandValues3
    lowBand3S2 :=lowerBandValues3
    if showTwoLabel3
        setLabelPrice(L1V2S3,upBand3S2,offsetV2)
        setLabelPrice(L2V2S3,lowBand3S2,offsetV2)

plot(showTwoVwap ? vwapValueS2 : na, title="VWAP 2", color=Vwap2Color, offset=0, style = VwapStyleHolder)

twoDvahPlot = plot(showTwoBand1 ? twoDVAH : na, title="Two DVAH", color=Band2Color, offset=0, style =BandStyleHolder)
twoDvalPlot = plot(showTwoBand1 ? twoDVAL : na, title="Two DVAL", color=Band2Color, offset=0, style =BandStyleHolder)
fill(twoDvalPlot, twoDvahPlot, twoDvaFillActive ? twoDvaFillColor : na, title='Two DVA Fill')

plot(showTwoBand2 ? upBand2S2 : na, title="Two +1.5", color=Band2Color, offset=0, style =BandStyleHolder)
plot(showTwoBand2 ? lowBand2S2 : na, title="Two -1.5", color=Band2Color, offset=0, style =BandStyleHolder)
plot(showTwoBand3 ? upBand3S2 : na, title="Two +2", color=Band2Color, offset=0, style =BandStyleHolder)
plot(showTwoBand3 ? lowBand3S2 : na, title="Two -2", color=Band2Color, offset=0, style =BandStyleHolder)

twoPpocPlot = plot(twoPPOC, title="Two PPOC", color=twoPpocColor, offset=0,style=ppocPlotStyle)
twoPvahPlot = plot(twoPVAH, title="Two PVAH", color=twoPvaEdgeColor, offset=0, style=pvaPlotStyleHolder)
twoPvalPlot = plot(twoPVAL, title="Two PVAL", color=twoPvaEdgeColor, offset=0, style=pvaPlotStyleHolder)
fill(twoPvalPlot, twoPvahPlot, twoPvaFillActive ? twoPvaFillColor : na, title='Two PVA Fill')

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// --- PLOTTING VWAP 3 ---
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

isFirstBarPeriod3 = anchorThreeDefined and is_newbar(anchorS3)

var float vwapValueS3 = na
var float threePPOC = na
var float threeDVAH = na
var float threeDVAL = na
var float threePVAH = na
var float threePVAL = na
float upBand2S3 = na
float lowBand2S3 = na
float upBand3S3 = na
float lowBand3S3 = na

if showThreePPOC and isFirstBarPeriod3
    //if TrackCloses
        //label.new(bar_index[1],threePPOC, text=str.tostring(trackClosesText(anchorS3)) + " VWAP Close", style = label.style_none, textcolor=TextColor)
    threePPOC := vwapValueS3

if isFirstBarPeriod3 and showThreePva
    threePVAH := threeDVAH
    threePVAL := threeDVAL

if not (hideonDWM and timeframe.isdwm)
    [_vwap,sumVol] = computeVWAP(hlc3, isFirstBarPeriod3)
    vwapValueS3 := _vwap
    
    if showThreeLabelC
        setLabelPrice(L1V3C,vwapValueS3,offsetV3)
    
    //if showThreeBand1
    [lowerBandValues, upperBandValues] = computeBANDS(hlc3,isFirstBarPeriod3,stdevMult,_vwap,sumVol)
    threeDVAH := upperBandValues
    threeDVAL :=lowerBandValues 
    if showThreeLabel1
        setLabelPrice(L1V3S1,threeDVAH,offsetV3)
        setLabelPrice(L2V3S1,threeDVAL,offsetV3) 
    
    //if showThreeBand2
    [lowerBandValues2, upperBandValues2] = computeBANDS(hlc3,isFirstBarPeriod3,stdevMult2,_vwap,sumVol)
    upBand2S3 := upperBandValues2
    lowBand2S3 :=lowerBandValues2    
    if showThreeLabel2
        setLabelPrice(L1V3S2,upBand2S3,offsetV3)
        setLabelPrice(L2V3S2,lowBand2S3,offsetV3) 
    
    //if showThreeBand3
    [lowerBandValues3, upperBandValues3] = computeBANDS(hlc3,isFirstBarPeriod3,stdevMult3,_vwap,sumVol)
    upBand3S3 := upperBandValues3
    lowBand3S3 :=lowerBandValues3          
    if showThreeLabel3
        setLabelPrice(L1V3S3,upBand3S3,offsetV3)
        setLabelPrice(L2V3S3,lowBand3S3,offsetV3) 

plot(showThreeVwap ? vwapValueS3 : na, title="VWAP 3", color=Vwap3Color, offset=0, style = VwapStyleHolder)

threeDvahPlot = plot(showThreeBand1 ? threeDVAH : na, title="Three DVAH", color=Band3Color, offset=0, style =BandStyleHolder)
threeDvalPlot = plot(showThreeBand1 ? threeDVAL : na, title="Three DVAL", color=Band3Color, offset=0, style =BandStyleHolder)
fill(threeDvalPlot, threeDvahPlot, threeDvaFillActive ? threeDvaFillColor : na, title='Three DVA Fill')

plot(showThreeBand2 ? upBand2S3 : na, title="Three +1.5", color=Band3Color, offset=0, style =BandStyleHolder)
plot(showThreeBand2 ? lowBand2S3 : na, title="Three -1.5", color=Band3Color, offset=0, style =BandStyleHolder)
plot(showThreeBand3 ? upBand3S3 : na, title="Three +2", color=Band3Color, offset=0, style =BandStyleHolder)
plot(showThreeBand3 ? lowBand3S3 : na, title="Three -2", color=Band3Color, offset=0, style =BandStyleHolder)

threePpocPlot = plot(threePPOC, title="Three PPOC", color=threePpocColor, offset=0,style=ppocPlotStyle)
threePvahPlot = plot(threePVAH, title="Three PVAH", color=threePvaEdgeColor, offset=0, style=pvaPlotStyleHolder)
threePvalPlot = plot(threePVAL, title="Three PVAL", color=threePvaEdgeColor, offset=0, style=pvaPlotStyleHolder)
fill(threePvalPlot, threePvahPlot, threePvaFillActive ? threePvaFillColor : na, title='Three PVA Fill')
