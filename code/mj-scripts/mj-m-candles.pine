//@version=4
study("MJ - M Candles", overlay=true)

//////////////////////////////////////////////////////////
// 
// === INPUTS ===
// 
//////////////////////////////////////////////////////////

groupTime = 'Time'
groupColors = 'Colors'
groupStyle = 'Style'

useAutoResolution = input(true, 'Use Auto Resolution?', group=groupTime, tooltip='Auto-adjust the higher timeframe resolution based on the current timeframe')
autoResolutionFor1MinTF = input('60', 'Auto Resolution - 1m', group=groupTime, options=['15', '30', '60', '120', '240'], tooltip='Pick the M candles timeframe you want to see when on the 1m timeframe.  Only applicable if on 1m Timeframe and auto-resolution is ON')
fixedResolution = input("60", 'Fixed Resolution', type=input.resolution, group=groupTime, tooltip='Only Relevant if auto-resolution is off')
maxTimeframe = input(60, 'Max Timeframe', group=groupTime, minval=1, maxval=240, tooltip='M Candles will be hidden when above this timeframe')

usePvsraColor = input(true, 'Use PVSRA Candle Color', group=groupStyle)
showGapBetweenBars = input(true, 'Show Gap Between Bars', group=groupStyle)
showBorder = input(true, 'Show Border', group=groupStyle)
fillBody = input(true, 'Fill Body', group=groupStyle)
opacityBodyFill = input(70, 'Opacity - Body Fill', minval=0, maxval=100, group=groupStyle)
opacityBodyBorder = input(40, 'Opacity - Body Border', minval=0, maxval=100, group=groupStyle)
opacityWick = input(10, 'Opacity - Wick', minval=0, maxval=100, group=groupStyle)
bodyBorderWidth = input(4, 'Body Border Width', options=[1,2,3,4], group=groupStyle)
wickWidth = input(4, 'Wick Width', options=[1,2,3,4], group=groupStyle)

// COLORS

climaxVolBullColor = input(#388e3c, 'Climax Bull Color', group=groupColors)
climaxVolBearColor = input(#b71c1c, 'Climax Bear Color', group=groupColors)
aboveAvgVolBullColor = input(#1848cc, 'Above Average Volume Bull Color', group=groupColors)
aboveAvgVolBearColor = input(#9c27b0, 'Above Average Volume Bear Color', group=groupColors)
standardVolBullColor = input(#999999, 'Standard Volume Bull Color', group=groupColors)
standardVolBearColor = input(#4d4d4d, 'Standard Volume Bear Color', group=groupColors)

_security(expression, _resolution) => 
     security(syminfo.tickerid, _resolution, expression, barmerge.gaps_off, barmerge.lookahead_on)

isValidTimeframe = not timeframe.isseconds and timeframe.isintraday and timeframe.multiplier <= maxTimeframe

//////////////////////////////////////////////////////////
// 
// === PVSRA Color ===
// 
//////////////////////////////////////////////////////////

_getBarColorByVolWeight(volWeight, _open, _close) => 
    if usePvsraColor
        if _close > _open
            volWeight == 1 
             ? climaxVolBullColor 
             : volWeight == 2 
               ? aboveAvgVolBullColor 
               : standardVolBullColor
        else
            volWeight == 1 
             ? climaxVolBearColor 
             : volWeight == 2 
               ? aboveAvgVolBearColor 
               : standardVolBearColor
    else
        _close > _open ? climaxVolBullColor : climaxVolBearColor

_getVolumeWeight(_open, _high, _low, _close, _vol) => 
    // The math below matches MT4 PVSRA indicator source
    avgVol = sma(_vol, 10)
    volWeightedPriceSpread = _vol * (_high - _low)
    highestVolWeightedPriceSpread = highest(volWeightedPriceSpread, 10)

    isClimaxVolume = _vol >= (avgVol * 2) or volWeightedPriceSpread >= highestVolWeightedPriceSpread
    isAboveAvgVolume = _vol >= avgVol * 1.5 and not isClimaxVolume
    volWeight = isClimaxVolume ? 1 : isAboveAvgVolume ? 2 : 0

_getColorByValues(_open, _high, _low, _close, _volume) =>
    volWeight = _getVolumeWeight(_open, _high, _low, _close, _volume)
    barColor = _getBarColorByVolWeight(volWeight, _open, _close)

_getColorAtResolution(_resolution) => 
    _color = _security(
         _getColorByValues(open, high, low, close, volume), 
         _resolution
         )    


//////////////////////////////////////////////////////////
// 
// === CALCULATIONS ===
// 
//////////////////////////////////////////////////////////

intervalValue = timeframe.isintraday ? timeframe.multiplier : timeframe.multiplier * 1440

_getAutoResolution(_interval) =>
    _interval == 1 
      ? autoResolutionFor1MinTF 
      : _interval <= 5  
         ? '60' 
         : _interval <= 60 
          ? '240' 
          : '1D'

_resolution = useAutoResolution ? _getAutoResolution(intervalValue) : fixedResolution     
_interval = security(syminfo.tickerid, _resolution, intervalValue)



[_open, _high, _low, _close, _vol] = security(syminfo.tickerid, _resolution, [open, high, low, close, volume], lookahead=true)
_timeOpenHighTF = time(_resolution)
_timeCloseHighTF = time_close(_resolution)
_wickTime = (_timeOpenHighTF + _timeCloseHighTF) / 2
_timePerBarLowTF = time[0] - time[1]


isBullish = _close >= _open
bodyMax = isBullish ? _close : _open
bodyMin = isBullish ? _open : _close

_color = _getColorAtResolution(_resolution)
bodyBorderColor = color.new(_color, showBorder ? opacityBodyBorder : 100)
bodyFillColor = color.new(_color, fillBody ? opacityBodyFill : 100)
// transparentColor = color.new(color.white, 100)
wickColor = color.new(_color, opacityWick)

//////////////////////////////////////////////////////////
// 
// === PLOT ===
// 
//////////////////////////////////////////////////////////

_drawBody(x1, x2, y1, y2) =>

    if isValidTimeframe
        adjuster = showGapBetweenBars ? 1 : 0
        adjustedX2 = x2 - round(adjuster * _timePerBarLowTF)
        drawed_box = box.new(x1, y2, adjustedX2, y1, xloc=xloc.bar_time, border_width=bodyBorderWidth)
        box.set_border_color(drawed_box, bodyBorderColor)
        box.set_bgcolor(drawed_box, bodyFillColor)
        drawed_box
    else 
        na

_drawWick(x, y1, y2, _color) => 
    isValidTimeframe 
     ? line.new(x, y1, x, y2, xloc.bar_time, extend.none, _color, line.style_solid, width=wickWidth)
     : na

_drawTopWick(x, _color) => 
    y1 = isBullish ? max(_close, _high) : max(_close, _high)
    y2 = bodyMax
    _drawWick(x, y1, y2, _color)    

_drawBottomWick(x, _color) => 
    y1 = isBullish ? min(_open, _low) : min(_close, _low)
    y2 = bodyMin
    _drawWick(x, y1, y2, _color)    

var box bodyBox = na
var line topWickLine = na
var line bottomWickLine = na

isNewPeriod = change(_timeOpenHighTF) and change(_timeCloseHighTF)
isHistoricalBar = isNewPeriod and not barstate.isrealtime and not (_timeCloseHighTF > timenow) // AKA any bar other than the current one

// -------------------------------------------------------------------------    

// draw the body and wicks for every candle except the current

if isHistoricalBar
    _drawBody(_timeOpenHighTF, _timeCloseHighTF, bodyMin, bodyMax) 
    _drawBottomWick(_wickTime, bodyBorderColor)
    _drawTopWick(_wickTime, wickColor)

// -------------------------------------------------------------------------    

// draw the body and wicks for the current candle

if barstate.monthColor
    if isNewPeriod
        bodyBox := na
        topWickLine := na
        bottomWickLine := na
    else
        box.delete(bodyBox)
        line.delete(bottomWickLine)
        line.delete(topWickLine)
        bodyBox := _drawBody(_timeOpenHighTF, _timeCloseHighTF, bodyMin, bodyMax) 
        bottomWickLine := _drawBottomWick(_wickTime, wickColor)
        topWickLine := _drawTopWick(_wickTime, wickColor)
