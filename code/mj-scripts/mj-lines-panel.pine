
//@version=4

study("MJ - Lines Panel", overlay=true)

COLOR_LIME = #1cd206
COLOR_VOLT = #affd00
COLOR_PINK = #e63a97
COLOR_RED = #f21616
COLOR_LIGHT_BLUE = #3179f5
COLOR_MAGENTA = #d612f8
COLOR_MAGENTA_WEAK = #ab47bc
COLOR_ORANGE = #f57f17
COLOR_GOLD = #ffb74d
COLOR_YELLOW = #ffeb3b
COLOR_TEAL = #00bcd4
COLOR_WHITE = #ffffff
COLOR_BLUE = #1848cc
COLOR_PURPLE = #3e31c4
COLOR_GREY_ONE = #9598a1
COLOR_GREEN = #4caf50
COLOR_ROYAL_BLUE = #1848cc
COLOR_ROYAL_BLUE_TWO = #052bec
COLOR_TURQUOISE = #00897b
COLOR_PEACH = #e57373
COLOR_ELECTRIC_GREEN = #00e676
COLOR_LIGHT_PURPLE = #7e57c2

//////////////////////////////////////////////////////////////////
// 
// ==== DATE UTILS ==== 
// 
//////////////////////////////////////////////////////////////////

int MS_PER_MINUTE = 1000 * 60
int MS_PER_HOUR = MS_PER_MINUTE * 60
int MS_PER_DAY = MS_PER_HOUR * 24

_getFutureTimeNBarsFromNow(numBars) => time + ( ( time - time[1] ) * numBars )

_getPastTimeNBarsBackFromNow(numBars) => time - ( ( time - time[1] ) * numBars )

_getTimeNBarsFromNow(numBars) => numBars > 0 ? _getFutureTimeNBarsFromNow(numBars) : _getPastTimeNBarsBackFromNow(numBars * -1)

_currentBarTime() => time(timeframe.period)

_calcBarsPerHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes

_calcBarsPerDay() => _calcBarsPerHour() * 24

_timeElapsedTodayInMs() => (MS_PER_HOUR * hour) - (MS_PER_MINUTE * minute) - (1000 * second)
_timeElapsedThisHourInMs() => (MS_PER_MINUTE * minute) + (1000 * second)

_getTimeAtBeginningOfToday() => timenow - _timeElapsedTodayInMs()
    
_getTimeAtStartOfHourNHoursAgo(numHours) => 
    timeElapsedSinceStartInMs = _timeElapsedThisHourInMs() + (numHours * MS_PER_HOUR)
    timenow - timeElapsedSinceStartInMs


// *** TOOD ***
// _getBarIndexAtTime() => 
// _getBarIndexForTimestamp(_timestamp) => 

_getBarsElapsedAndRemainingForCurrentHour() =>
    int barLengthInMinutes = (time - time[1]) / MS_PER_MINUTE
    int barsElapsedThisHour = minute / barLengthInMinutes 
    int barsPerHour = 60 / barLengthInMinutes
    int barsRemainingThisHour = barsPerHour - barsElapsedThisHour
    [barsElapsedThisHour, barsRemainingThisHour]

_getStartTimeNDaysBack(numDays) => 
    // int barsPerDay = _calcBarsPerDay()
    // int numBarsElapsedToday = 0
    // int barsElapsedSinceCutoff = numBarsElapsedToday + (barsPerDay * numDays)
    // _getPastTimeNBarsBackFromNow(barsElapsedSinceCutoff)
    _getTimeAtBeginningOfToday() - (numDays * MS_PER_DAY)    

_isCurrentDay() => 
    currentBarTime = time(timeframe.period)
    currentBarTime > (timenow - MS_PER_DAY)   

_isInSession(timeRange) =>
    not na(time(timeframe.period, timeRange))

_isFirstOrLastFiveMinOfAnyHour() => 
    _isInSession('2355-0005') or _isInSession('0055-0105') or _isInSession('0155-0205') or _isInSession('0255-0305') or _isInSession('0355-0405') or _isInSession('0455-0505') or _isInSession('0555-0605') or _isInSession('0655-0705') or _isInSession('0755-0805') or _isInSession('0855-0905') or _isInSession('0955-1005') or _isInSession('1055-1105') or _isInSession('1155-1205') or _isInSession('1255-1305') or _isInSession('1355-1405') or _isInSession('1455-1505') or _isInSession('1555-1605') or _isInSession('1655-1705') or _isInSession('1755-1805') or _isInSession('1855-1905') or _isInSession('1955-2005') or _isInSession('2055-2105') or _isInSession('2155-2205') or _isInSession('2255-2305')    

_isLastBarForCurrentTimeframeAtResolution(Resolution) =>
    t = time(Resolution, session.regular) // e.g. "1440" = Daily Resolution
    not na(t[1]) and na(t) or t[1] < t

_isFirstBarForCurrentTimeframeAtResolution(Resolution) =>
    // e.g. current timeframe: 1min, resolution: '60' => return true for the first minute of the hour
    // e.g. current timeframe: 5min, resolution: '60' => return true for the first 5 minutes of the hour
    t = time(Resolution)
    previousBar = t[1]
    currentBar = t
    not na(currentBar) and ( na(previousBar) or currentBar > previousBar)

// new_bar: check if we're on a new bar within the session in a given resolution
new_bar(res) => change(time(res)) != 0

//////////////////////////////////////////////////////////////////
// 
// ==== INPUTS ==== 
// 
//////////////////////////////////////////////////////////////////

// -----------------------
// dependencies: dateUtils, plotUtils
// -----------------------

groupLinesAndLabels = '--- Lines and Labels ---'
groupOptions='--- Options ---'
groupColors = '--- Colors ---'
groupSwitches = '--- Switches ---'
groupExtend = '--- Extend ---'
groupLineStyle = '--- Line Style ---'
groupTimeRanges = '--- Time Ranges ---'

inlinePositioning = 'positioning'
inlineExtend = 'extend'
inlineColors = 'colors'

// tooltips
string TT_LB = "The number of days back to plot the session levels"


// ---------------------------------------------------------------------------------------------------------------------
// LINE POSITIONING ----------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

lineOffset = input(24, 'Line Offset', group=groupLinesAndLabels, inline=inlinePositioning)
lineLength = input(0, 'Line Length', group=groupLinesAndLabels, inline=inlinePositioning)
labelOffsetOne = input(5, 'Label Offset 1', group=groupLinesAndLabels, inline=inlinePositioning)
labelOffsetTwo = input(9, 'Label Offset 2', group=groupLinesAndLabels, inline=inlinePositioning)
labelOffsetThree = input(9, 'Label Offset 3', group=groupLinesAndLabels, inline=inlinePositioning)
lineWidth = input(1, 'Line Width', group=groupLinesAndLabels, options=[1,2,3,4], inline=inlinePositioning)
sessionLabelStyle = input(label.style_none, 'Session Label Style', group=groupLinesAndLabels, inline=inlinePositioning, options=[label.style_none, label.style_label_up, label.style_label_upper_right, label.style_label_right, label.style_label_lower_right, label.style_label_down, label.style_label_lower_left, label.style_label_left, label.style_label_upper_left, label.style_label_center, label.style_triangleup, label.style_triangledown, label.style_arrowup, label.style_arrowdown, label.style_xcross, label.style_cross, label.style_flag, label.style_circle])
sessionLabelOpacity = input(70, 'Label Opacity', group=groupLinesAndLabels, inline=inlinePositioning, minval=0, maxval=100)
sessionLabelSize = input(size.normal, 'Label Size', options=[size.auto, size.tiny, size.small, size.normal, size.large], group=groupLinesAndLabels, inline=inlinePositioning)

// ---------------------------------------------------------------------------------------------------------------------
// OPTIONS ----------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

isFixedToPrice = input(false, 'Lines Fixed to Price?', group=groupOptions, inline=groupOptions)
extendAll = input(false, 'Extend All', group=groupOptions, inline=groupOptions)
extendNone = input(false, 'Extend None', group=groupOptions, inline=groupOptions)
allWhiteLabelText = input(false, 'All White Label Text', group=groupOptions, inline=groupOptions)
showPriceInLabel = input(false, 'Show Price in Label?', group=groupOptions, inline=groupOptions)

// ---------------------------------------------------------------------------------------------------------------------
// DAY, WEEK, MONTH, YEAR ----------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

// current day HL
currentDayColor = input(color.new(#090720, 0), 'dH, dL', input.color, group=groupColors, inline=inlineColors)
lineDailyHLActive = input(true, 'dH, dL', group=groupSwitches, inline=groupSwitches)
currentDayHLExtend = input(extend.right, 'dH, dL', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
currentDayHLLineStyle = input(line.style_dotted, 'dH, dL', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// daily open
dailyOpenColor = input(color.new(COLOR_VOLT, 0), 'dO', input.color, group=groupColors, inline=inlineColors)
lineDailyOpenActive = input(true, 'dO', group=groupSwitches, inline=groupSwitches)
dailyOpenExtend = input(extend.right, 'dO', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
dailyOpenLineStyle = input(line.style_solid, 'dO', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// current week HL
currentWeekColor = input(color.new(#00bcd4, 0), 'wO, wH, wL', input.color, group=groupColors, inline=inlineColors)
lineCurrentWeekHLActive = input(true, 'wH, wL', group=groupSwitches, inline=groupSwitches)
currentWeekHLExtend = input(extend.right, 'wH, wL', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
currentWeekHLLineStyle = input(line.style_dotted, 'wH, wL', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// week open
lineWeekOpenActive = input(true, 'wO', group=groupSwitches, inline=groupSwitches)
weekOpenExtend = input(extend.right, 'wO', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
weekOpenLineStyle = input(line.style_solid, 'wO', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// month open
currentMonthColor = input(color.new(#d612f8, 0), 'mO, mH, mL', input.color, group=groupColors, inline=inlineColors)
lineMonthOpenActive = input(true, 'mO', group=groupSwitches, inline=groupSwitches)
monthOpenExtend = input(extend.right, 'mO', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
monthOpenLineStyle = input(line.style_solid, 'mO', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// year open
currentYearColor = input(color.new(#db3333, 0), 'yO, yH, yL', input.color, group=groupColors, inline=inlineColors)
lineYearOpenActive = input(true, 'yO', group=groupSwitches, inline=groupSwitches)
yearOpenExtend = input(extend.right, 'yO', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
yearOpenLineStyle = input(line.style_solid, 'yO', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// yesterday
lineYesterdayActive = input(true, 'pdH, pdL', group=groupSwitches, inline=groupSwitches)
yesterdayColor = input(color.new(#787b86, 0), 'pd', group=groupColors, inline=inlineColors)
yesterdayExtend = input(extend.none, 'pd', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
yesterdayLineStyle = input(line.style_dotted, 'pd', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// last week
lastWeekColor = input(color.new(#787b86, 20), 'pwH, pwL', group=groupColors, inline=inlineColors)
lineLastWeekActive = input(true, 'pw', group=groupSwitches, inline=groupSwitches)
lastWeekExtend = input(extend.none, 'pw', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
lastWeekLineStyle = input(line.style_dotted, 'pw', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// ---------------------------------------------------------------------------------------------------------------------
// VOLATILITY ----------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

// ADR
// adrColor = input(color.new(color.blue, 0), 'RDH, RDL', group=groupColors, inline=inlineColors)
lineAdrActive = input(true, 'RDH, RDL', group=groupSwitches, inline=groupSwitches)
adrExtend = input(extend.right, 'ADR', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
adrLineStyle = input(line.style_solid, 'ADR', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLineStyle, inline=groupLineStyle)

// AWR
lineAwrActive = input(false, 'AWR HL', group=groupSwitches, inline=groupSwitches)
awrExtend = input(extend.right, 'AWR', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
// awrColor = input(color.new(color.green, 0), 'AWR', group=groupColors, inline=inlineColors)
awrLineStyle = input(line.style_solid, 'AWR', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLineStyle, inline=groupLineStyle)

// AMR
lineAmrActive = input(false, 'AMR HL', group=groupSwitches, inline=groupSwitches)
amrExtend = input(extend.right, 'AMR', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
amrColor = input(color.new(#ab47bc, 30), 'AMR', group=groupColors, inline=inlineColors)
amrLineStyle = input(line.style_solid, 'AMR', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLineStyle, inline=groupLineStyle)

// ---------------------------------------------------------------------------------------------------------------------
// MOVING AVERAGES -----------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

// 50h
lineHourlyEmaActive = input(true, '50h', group=groupSwitches, inline=groupSwitches)
hourlyEmaExtend = input(extend.none, '50h', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
hourlyEmaColor = input(color.new(#1592e6, 0), '50h', group=groupColors, inline=inlineColors)
hourlyEmaLineStyle = input(line.style_dashed, '50h', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLineStyle, inline=groupLineStyle)

// 20d
// dailySmaColor = input(color.new(color.blue, 0), '20d', group=groupColors, inline=inlineColors)
lineDailySmaActive = input(true, '20d', group=groupSwitches, inline=groupSwitches)
dailySmaExtend = input(extend.none, '20d', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
dailySmaLineStyle = input(line.style_dashed, '20d', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLineStyle, inline=groupLineStyle)

// 20w
// weeklySmaColor = input(color.new(color.green, 0), '20w', group=groupColors, inline=inlineColors)
lineWeeklySmaActive = input(true, '20w', group=groupSwitches, inline=groupSwitches)
weeklySmaExtend = input(extend.none, '20w', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
weeklySmaLineStyle = input(line.style_dashed, '20w', options=[line.style_solid, line.style_dashed, line.style_dotted], group=groupLineStyle, inline=groupLineStyle)

// ---------------------------------------------------------------------------------------------------------------------
// KEY LEVELS-----------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

// PSY
linePsyLevelsActive = input(true, 'Psy', group=groupSwitches, inline=groupSwitches)
psyLineExtend = input(extend.right, 'Psy', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
psyColor = input(color.new(COLOR_GOLD, 20), 'Psy', input.color, group=groupColors, inline=inlineColors)
psyLineStyle = input(line.style_solid, 'Psy', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// ATH
lineAthActive = input(true, 'ATH', group=groupSwitches, inline=groupSwitches)
athLineExtend = input(extend.both, 'ATH', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
athColor = input(color.new(COLOR_GOLD, 10), 'ATH', input.color, group=groupColors, inline=inlineColors)
athLineStyle = input(line.style_dashed, 'ATH', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// ---------------------------------------------------------------------------------------------------------------------
// SESSION LEVELS ------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------

// shared
sessionLevelsLineExtend = input(extend.none, 'Sessions Levels', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
sessionHighLowLineStyle = input(line.style_solid, 'Session HL', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// asia
lineAsiaOpenActive = input(false, 'Asia Open', group=groupSwitches, inline=groupSwitches)
lineAsiaHLActive = input(false, 'Asia HL', group=groupSwitches, inline=groupSwitches)
asiaOpenLineExtend = input(extend.none, 'Asia Open', options=[extend.none, extend.left, extend.right, extend.both], inline=groupExtend, group=groupExtend)
asiaColor = input(#00796b, 'Asia', input.color, group=groupColors, inline=inlineColors)
asiaOpenLineStyle = input(line.style_solid, 'Asia Open', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// london
lineLondonOpenActive = input(false, 'London Open', group=groupSwitches, inline=groupSwitches)
lineLondonHLActive = input(false, 'London HL', group=groupSwitches, inline=groupSwitches)
londonColor = input(COLOR_MAGENTA_WEAK, 'London', input.color, group=groupColors, inline=inlineColors)
londonOpenLineStyle = input(line.style_solid, 'London Open', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// new york
lineNyHLActive = input(false, 'NY HL', group=groupSwitches, inline=groupSwitches)
lineNyOpenActive = input(false, 'NY Open', group=groupSwitches, inline=groupSwitches)
nyColor = input(#880e4f, 'New York', input.color, group=groupColors, inline=inlineColors)
nyOpenLineStyle = input(line.style_solid, 'NY Open', group=groupLineStyle, inline=groupLineStyle, options=[line.style_solid, line.style_dashed, line.style_dotted])

// time ranges
asiaOpenTimeRange = input('2100-2045:1234567', 'Asia Open', group=groupTimeRanges, type=input.session) // use this for the Asia Open only
asiaTimeRange = input('2100-0500:23456', 'Asian Session Time', group=groupTimeRanges, type=input.session) // use this for the Asia HL only
londonTimeRange = input('0800-1630:23456', 'London Session Time', group=groupTimeRanges, type=input.session)
nyTimeRange = input('1300-2100:23456', 'New York Session Time', group=groupTimeRanges, type=input.session)
dailyOpenTimeRange = input('0000-0015:1234567', 'Daily Open Time', group=groupTimeRanges, type=input.session)

// ------------------------------------------------------------------------------------------------

_captureSessionLevels(timeRange) =>
    _inSession = _isInSession(timeRange)
    _inHolding = not _inSession

    var float _sessionHigh = na
    var float _sessionLow = na
    var float _sessionOpen = na

    if _inSession //  if we are in session...
        if not _inSession[1] //  if it just started, set the initial values
            _sessionHigh := high
            _sessionLow  := low
            _sessionOpen := open
        else //  otherwise we are checking for higher highs and lower lows to update with and remembering the new levels
            _sessionHigh := max(high, _sessionHigh)
            _sessionLow  := min(low, _sessionLow)

    else if _inHolding //  else if we're in holding state... just reference self to maintain the same levels
        _sessionHigh := _sessionHigh
        _sessionLow  := _sessionLow
        _sessionOpen := _sessionOpen

    else //  not in session or holding, so we can reset.
        _sessionHigh := na
        _sessionLow  := na
        _sessionOpen := na

    [_sessionHigh, _sessionLow, _sessionOpen]

_toDecimalPlaces(numDecimals, value) =>
    // truncates a given number to a certain number of decimals
    factor = pow(10, numDecimals)
    int(value * factor) / factor    

_drawLabelledLine(x1, x2, y, _color, _width, _style, _extend, labelText, labelStyle, labelColor, labelTextColor, labelSize, showLabel, labelOffsetInBars, showPrice) =>
    // x1 and x2 are in time (not bars)

    _lineId = line.new(
         x1,
         y,
         x2,
         y,
         xloc.bar_time,
         extend=extendAll ? extend.both : extendNone ? extend.none : _extend
         )

    line.set_xy1(_lineId, x1, y)
    line.set_xy2(_lineId, x2, y)
    line.set_color(_lineId, _color)
    line.set_width(_lineId, _width)
    line.set_style(_lineId, _style)

    if not na(_lineId[1])
        line.delete(_lineId[1])

    // ----------------
    // draw the label
    // ----------------

    if showLabel
        _labelText = showPrice ? labelText + ' (' + tostring(_toDecimalPlaces(2, y)) + ')' : labelText
        timePerBar = time[0] - time[1]
        labelTime = x2 + (labelOffsetInBars * timePerBar)
        labelId = label.new(labelTime, y, _labelText, textcolor=labelTextColor, style=labelStyle, size=labelSize, xloc=xloc.bar_time, color=labelColor)
        label.delete(labelId[1])

    _lineId

/////////////////////////////////////////////////////////
//
// --- PSY LEVELS ---
//
/////////////////////////////////////////////////////////

int chart_gmt = input(group='Day start hour offset', title='Offset hours (For exchanges that have weekend data - set to 3 for Sydney open in DST and set to 2 for Sydney open out of DST. Note: Sydney is in the southern hemisphere which means DST is on during the winter in the the northern hemisphere.) ', defval=3, minval=-12, maxval=14, step=1, tooltip='This allows you to move the daily open/Psy Levels to some desired time like for example the start of Sydney as oposed to exchange midnight. Negative values move line to the right, positive values move line to the left. For exchanges not using UTC+0 simply adjust the offset such that the daily open/psy level calculation start at some desired time. default is set to 3.')

calcGmtOffset(gmtOffsetVar) =>
    gmtVar = 'GMT+0'
    if gmtOffsetVar > -1
        gmtVar := 'GMT+' + tostring(abs(gmtOffsetVar))
        gmtVar
    else
        gmtVar := 'GMT-' + tostring(abs(gmtOffsetVar))
        gmtVar
    gmtVar

dly_offset = calcGmtOffset(chart_gmt)

calcPsyHighLow(gmtoffsetPsy) =>

    //4 hour res based on how mt4 does it
    //so basically because the session is 8 hours and we are liiking at a 4 hour resolution we only need to take the highest high an lowest low of 2 bars
    //we use the gmt offset to adjust the 0000-0800 session to Sydney open which is at 2100 during dst and at 2000 otherwize. (dst - spring foward, fall back)
    in_session = time('240', '0000-0800:1', gmtoffsetPsy)
    new_session = in_session and not in_session[1]
    float psyHigh = 0.0
    float psyLow = 100000000000.0

    psyHigh := new_session ? high : in_session ? max(high, psyHigh[1]) : psyHigh[1]
    psyLow := new_session ? low : in_session ? min(low, psyLow[1]) : psyLow[1]
    [psyHigh, psyLow]

[psyHigh, psyLow] = calcPsyHighLow(dly_offset)

/////////////////////////////////////////////////////////
//
// --- ALL TIME HIGH ---
//
/////////////////////////////////////////////////////////

g=bar_index==1

ath()=>
    a=0.0
    a:=g ? high : high>a[1] ? high:a[1]

allTimeHigh = security(syminfo.tickerid, 'M', ath(),lookahead=barmerge.lookahead_on)

//////////////////////////////////////////////////////////////////
//
// --- ADR, AWR, AMR, Day High/Low ---
//
//////////////////////////////////////////////////////////////////

_adr(length) =>
    // This is effectively an atr, which is what is used in MT4 to get those levels. FWIW, true range can be also calculated with tr(true)
    trueRange = na(high[1])? high-low : max(max(high - low, abs(high - close[1])), abs(low - close[1]))
    // Switched to SMA from RMA because somehow it matches MT4 better
    sma(trueRange[1], length)

_adrHigh(adr) => high - low < adr ? low + adr : close >= open ? low + adr : high
_adrLow(adr) => high - low < adr ? high - adr : close >= open ? low : high - adr
_toPips(val) => round( (val/syminfo.mintick)*100)/100

adr = security(syminfo.tickerid, 'D', _adr(15), lookahead=barmerge.lookahead_on)
adrHigh = security(syminfo.tickerid, 'D', _adrHigh(adr), lookahead=barmerge.lookahead_on)
adrLow = security(syminfo.tickerid, 'D', _adrLow(adr), lookahead=barmerge.lookahead_on)

awr = security(syminfo.tickerid, "W", _adr(1), lookahead=barmerge.lookahead_on)
awrHigh = security(syminfo.tickerid, "W", _adrHigh(awr), lookahead=barmerge.lookahead_on)
awrLow  = security(syminfo.tickerid, "W", _adrLow(awr),  lookahead=barmerge.lookahead_on)
amr = security(syminfo.tickerid, "M", _adr(1),  lookahead=barmerge.lookahead_on)
amrHigh = security(syminfo.tickerid, "M", _adrHigh(amr), lookahead=barmerge.lookahead_on)
amrLow  = security(syminfo.tickerid, "M", _adrLow(amr), lookahead=barmerge.lookahead_on)

[yearHigh, yearLow, yearOpen] = security(syminfo.tickerid, '12M', [high, low, open], lookahead=true)
[monthHigh, monthLow, monthOpen] = security(syminfo.tickerid, 'M', [high, low, open], lookahead=true)
[weekHigh, weekLow, weekOpen] = security(syminfo.tickerid, 'W', [high, low, open], lookahead=true)
[dailyHigh, dailyLow, dailyOpen] = security(syminfo.tickerid, 'D', [high, low, open], lookahead=true)

yesterdayHigh = security(syminfo.tickerid, 'D', high[1], lookahead=true)
yesterdayLow = security(syminfo.tickerid, 'D', low[1], lookahead=true)
lastWeekHigh = security(syminfo.tickerid, 'W', high[1], lookahead=true)
lastWeekLow = security(syminfo.tickerid, 'W', low[1], lookahead=true)

_50EmaHourly() => security(syminfo.tickerid, '60', ema(close, 50),lookahead=barmerge.lookahead_on)
_20SmaDaily() => security(syminfo.tickerid, 'D', sma(close, 20),lookahead=barmerge.lookahead_on)
_20SmaWeekly() => security(syminfo.tickerid, 'W', sma(close, 20),lookahead=barmerge.lookahead_on)

////////////////////////////////////////////////////////
//
// ---- Labelled Lines ---
//
////////////////////////////////////////////////////////

[__asiaHigh, __asiaLow, asiaOpen] = _captureSessionLevels(asiaOpenTimeRange)
[asiaHigh, asiaLow, __asiaOpen] = _captureSessionLevels(asiaTimeRange)
[londonHigh, londonLow, londonOpen] = _captureSessionLevels(londonTimeRange)
[nyHigh, nyLow, nyOpen] = _captureSessionLevels(nyTimeRange)
// [dailyHigh, dailyLow, dailyOpen] = _captureSessionLevels(dailyOpenTimeRange)

_getLineColor(_color, isActive) => isActive ? _color : na
_getLabelTextColor(_color, isActive) => isActive ? (allWhiteLabelText ? color.white : _color) : na

_drawSessionLines(linesArray) =>
    initialArraySize = array.size(linesArray)

     // cleanup
    if initialArraySize > 0
        for i = 0 to initialArraySize - 1
            lineToDelete = array.shift(linesArray)
            line.delete(lineToDelete)

    _lineOffset = isFixedToPrice ? (lineLength * -1) : lineOffset

    x1 = _getTimeNBarsFromNow(_lineOffset)
    x2 = _getTimeNBarsFromNow(_lineOffset + lineLength)

    nyHighLowLabelVisible = true
    londonHighLowLabelVisible = true

    labelTextColor = color.new(color.white, 0)
    labelSize = sessionLabelSize
    labelVisible = true

    // ---------------
    // Asia Lines
    // ---------------

    _offsetOne = labelOffsetOne
    _offsetTwo = labelOffsetOne + labelOffsetTwo
    _offsetThree = labelOffsetOne + labelOffsetTwo + labelOffsetThree

    _asianOpenLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineAsiaOpenActive ? asiaOpen : na,
         _color=asiaColor,
         _width=lineWidth,
         _style=asiaOpenLineStyle,
         _extend=asiaOpenLineExtend,
         labelText='aO',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(asiaColor, lineAsiaOpenActive),
         labelTextColor=_getLabelTextColor(asiaColor, lineAsiaOpenActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)

    _asianHighLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineAsiaHLActive ? asiaHigh : na,
         _color=asiaColor,
         _width=lineWidth,
         _style=sessionHighLowLineStyle,
         _extend=sessionLevelsLineExtend,
         labelText='asH',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(asiaColor, lineAsiaHLActive),
         labelTextColor=_getLabelTextColor(asiaColor, lineAsiaHLActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    _asianLowLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineAsiaHLActive ? asiaLow : na,
         _color=asiaColor,
         _width=lineWidth,
         _style=sessionHighLowLineStyle,
         _extend=sessionLevelsLineExtend,
         labelText='asL',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(asiaColor, lineAsiaHLActive),
         labelTextColor=_getLabelTextColor(asiaColor, lineAsiaHLActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    // ---------------
    // New York Lines
    // ---------------

    _nyOpenLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineNyOpenActive ? nyOpen : na,
         _color=_getLineColor(nyColor, lineNyOpenActive),
         _width=lineWidth,
         _style=nyOpenLineStyle,
         _extend=sessionLevelsLineExtend,
         labelText='nyO',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(nyColor, lineNyOpenActive),
         labelTextColor=_getLabelTextColor(nyColor, lineNyOpenActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    _nyHighLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineNyHLActive ? nyHigh : na,
         _color=_getLineColor(nyColor, lineNyHLActive),
         _width=lineWidth,
         _style=sessionHighLowLineStyle,
         _extend=sessionLevelsLineExtend,
         labelText='nyH',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(nyColor, lineNyHLActive),
         labelTextColor=_getLabelTextColor(nyColor, lineNyHLActive),
         labelSize=labelSize,
         showLabel=nyHighLowLabelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    _nyLowLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineNyHLActive ? nyLow : na,
         _color=_getLineColor(nyColor, lineNyHLActive),
         _width=lineWidth,
         _style=sessionHighLowLineStyle,
         _extend=sessionLevelsLineExtend,
         labelText='nyL',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(nyColor, lineNyHLActive),
         labelTextColor=_getLabelTextColor(nyColor, lineNyHLActive),
         labelSize=labelSize,
         showLabel=nyHighLowLabelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    // ---------------
    // London Lines
    // ---------------

    _londonOpenLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineLondonOpenActive ? londonOpen : na,
         _color=_getLineColor(londonColor, lineLondonOpenActive),
         _width=lineWidth,
         _style=londonOpenLineStyle,
         _extend=sessionLevelsLineExtend,
         labelText='euO',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(londonColor, lineLondonOpenActive),
         labelTextColor=_getLabelTextColor(londonColor, lineLondonOpenActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    _londonHighLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineLondonHLActive ? londonHigh : na,
         _color=_getLineColor(londonColor, lineLondonOpenActive),
         _width=lineWidth,
         _style=sessionHighLowLineStyle,
         _extend=sessionLevelsLineExtend,
         labelText='euH',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(londonColor, lineLondonHLActive),
         labelTextColor=_getLabelTextColor(londonColor, lineLondonHLActive),
         labelSize=labelSize,
         showLabel=londonHighLowLabelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    _londonLowLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineLondonHLActive ? londonLow : na,
         _color=_getLineColor(londonColor, lineLondonOpenActive),
         _width=lineWidth,
         _style=sessionHighLowLineStyle,
         _extend=sessionLevelsLineExtend,
         labelText='euL',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(londonColor, lineLondonHLActive),
         labelTextColor=_getLabelTextColor(londonColor, lineLondonHLActive),
         labelSize=labelSize,
         showLabel=londonHighLowLabelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    _dailyOpenLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineDailyOpenActive ? dailyOpen : na,
         _color=_getLineColor(dailyOpenColor, lineDailyOpenActive),
         _width=lineWidth,
         _style=dailyOpenLineStyle,
         _extend=dailyOpenExtend,
         labelText='dO',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(dailyOpenColor, lineDailyOpenActive),
         labelTextColor=_getLabelTextColor(dailyOpenColor, lineDailyOpenActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)

    _dailyHighLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineDailyHLActive ? dailyHigh : na,
         _color=_getLineColor(currentDayColor, lineDailyHLActive),
         _width=lineWidth,
         _style=currentDayHLLineStyle,
         _extend=currentDayHLExtend,
         labelText='dH',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(currentDayColor, lineDailyHLActive),
         labelTextColor=_getLabelTextColor(currentDayColor, lineDailyHLActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)

    _dailyLowLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineDailyHLActive ? dailyLow : na,
         _color=_getLineColor(currentDayColor, lineDailyHLActive),
         _width=lineWidth,
         _style=currentDayHLLineStyle,
         _extend=currentDayHLExtend,
         labelText='dL',
         labelStyle=sessionLabelStyle,
         labelColor=_getLabelTextColor(currentDayColor, lineDailyHLActive),
         labelTextColor=_getLabelTextColor(currentDayColor, lineDailyHLActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)

    _psyHighLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=linePsyLevelsActive ? psyHigh : na,
         _color=_getLineColor(psyColor, linePsyLevelsActive),
         _width=lineWidth,
         _style=psyLineStyle,
         _extend=psyLineExtend,
         labelText='psyH',
         labelStyle=sessionLabelStyle,
         labelColor=color.new(psyColor, sessionLabelOpacity),
         labelTextColor=_getLabelTextColor(psyColor, linePsyLevelsActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)

    _psyLowLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=linePsyLevelsActive ? psyLow : na,
         _color=_getLineColor(psyColor, linePsyLevelsActive),
         _width=lineWidth,
         _style=psyLineStyle,
         _extend=psyLineExtend,
         labelText='psyL',
         labelStyle=sessionLabelStyle,
         labelColor=color.new(psyColor, sessionLabelOpacity),
         labelTextColor=_getLabelTextColor(psyColor, linePsyLevelsActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)
    
    _athLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineAthActive ? allTimeHigh : na, 
         _color=_getLineColor(athColor, lineAthActive), 
         _width=lineWidth, 
         _style=athLineStyle, 
         _extend=athLineExtend, 
         labelText='ATH', 
         labelStyle=sessionLabelStyle, 
         labelColor=color.new(athColor, sessionLabelOpacity), 
         labelTextColor=_getLabelTextColor(athColor, linePsyLevelsActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)
    
    _yesterdayHighLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineYesterdayActive ? yesterdayHigh : na, 
         _color=_getLineColor(yesterdayColor, lineYesterdayActive), 
         _width=lineWidth, 
         _style=yesterdayLineStyle, 
         _extend=yesterdayExtend, 
         labelText='pdH', 
         labelStyle=sessionLabelStyle, 
         labelColor=yesterdayColor, 
         labelTextColor=_getLabelTextColor(yesterdayColor, lineYesterdayActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)
    
    _yesterdayLowLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineYesterdayActive ? yesterdayLow : na, 
         _color=_getLineColor(yesterdayColor, lineYesterdayActive), 
         _width=lineWidth, 
         _style=yesterdayLineStyle, 
         _extend=yesterdayExtend, 
         labelText='pdL', 
         labelStyle=sessionLabelStyle, 
         labelColor=yesterdayColor, 
         labelTextColor=_getLabelTextColor(yesterdayColor, lineYesterdayActive),
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)
    
    _currentWeekHighLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineCurrentWeekHLActive ? weekHigh : na, 
         _color=_getLineColor(currentWeekColor, lineCurrentWeekHLActive), 
         _width=lineWidth, 
         _style=currentWeekHLLineStyle, 
         _extend=currentWeekHLExtend, 
         labelText='wH', 
         labelStyle=sessionLabelStyle, 
         labelColor=currentWeekColor, 
         labelTextColor=_getLabelTextColor(currentWeekColor, lineCurrentWeekHLActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetTwo, 
         showPrice=showPriceInLabel)
    
    _currentWeekLowLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineCurrentWeekHLActive ? weekLow : na, 
         _color=_getLineColor(currentWeekColor, lineCurrentWeekHLActive), 
         _width=lineWidth, 
         _style=currentWeekHLLineStyle, 
         _extend=currentWeekHLExtend, 
         labelText='wL', 
         labelStyle=sessionLabelStyle, 
         labelColor=currentWeekColor, 
         labelTextColor=_getLabelTextColor(currentWeekColor, lineCurrentWeekHLActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetTwo, 
         showPrice=showPriceInLabel)
    
    _currentWeekOpenLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineWeekOpenActive ? weekOpen : na, 
         _color=_getLineColor(currentWeekColor, lineWeekOpenActive), 
         _width=lineWidth, 
         _style=weekOpenLineStyle, 
         _extend=weekOpenExtend, 
         labelText='wO', 
         labelStyle=sessionLabelStyle, 
         labelColor=currentWeekColor, 
         labelTextColor=_getLabelTextColor(currentWeekColor, lineWeekOpenActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetTwo, 
         showPrice=showPriceInLabel)

    _currentMonthOpenLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineMonthOpenActive ? monthOpen : na,
         _color=_getLineColor(currentMonthColor, lineMonthOpenActive),
         _width=lineWidth,
         _style=monthOpenLineStyle,
         _extend=monthOpenExtend,
         labelText='mO',
         labelStyle=sessionLabelStyle,
         labelColor=currentMonthColor,
         labelTextColor=_getLabelTextColor(currentMonthColor, lineMonthOpenActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetTwo,
         showPrice=showPriceInLabel)
    
    _currentYearOpenLineId = _drawLabelledLine(
         x1=x1,
         x2=x2,
         y=lineYearOpenActive ? yearOpen : na,
         _color=_getLineColor(currentYearColor, lineYearOpenActive),
         _width=lineWidth,
         _style=yearOpenLineStyle,
         _extend=yearOpenExtend,
         labelText='yO',
         labelStyle=sessionLabelStyle,
         labelColor=currentYearColor,
         labelTextColor=_getLabelTextColor(currentYearColor, lineYearOpenActive),
         labelSize=labelSize,
         showLabel=labelVisible,
         labelOffsetInBars=_offsetTwo,
         showPrice=showPriceInLabel)
         
    _lastWeekHighLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineLastWeekActive ? lastWeekHigh : na, 
         _color=_getLineColor(lastWeekColor, lineLastWeekActive), 
         _width=lineWidth, 
         _style=lastWeekLineStyle, 
         _extend=lastWeekExtend, 
         labelText='pwH', 
         labelStyle=sessionLabelStyle, 
         labelColor=lastWeekColor, 
         labelTextColor=_getLabelTextColor(lastWeekColor, lineLastWeekActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetTwo, 
         showPrice=showPriceInLabel)
    
    _lastWeekLowLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineLastWeekActive ? lastWeekLow : na, 
         _color=_getLineColor(lastWeekColor, lineLastWeekActive), 
         _width=lineWidth, 
         _style=lastWeekLineStyle, 
         _extend=lastWeekExtend, 
         labelText='pwL', 
         labelStyle=sessionLabelStyle, 
         labelColor=lastWeekColor, 
         labelTextColor=_getLabelTextColor(lastWeekColor, lineLastWeekActive),
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetTwo, 
         showPrice=showPriceInLabel)
    
    _adrHighLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineAdrActive ? adrHigh : na, 
         _color=_getLineColor(currentDayColor, lineAdrActive), 
         _width=lineWidth, 
         _style=adrLineStyle, 
         _extend=adrExtend, 
         labelText='RDH', 
         labelStyle=sessionLabelStyle, 
         labelColor=currentDayColor, 
         labelTextColor=_getLabelTextColor(currentDayColor, lineAdrActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)
    
    _adrLowLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineAdrActive ? adrLow : na, 
         _color=_getLineColor(currentDayColor, lineAdrActive), 
         _width=lineWidth, 
         _style=adrLineStyle, 
         _extend=adrExtend, 
         labelText='RDL', 
         labelStyle=sessionLabelStyle, 
         labelColor=currentDayColor, 
         labelTextColor=_getLabelTextColor(currentDayColor, lineAdrActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)
    
    _awrHighLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineAwrActive ? awrHigh : na, 
         _color=_getLineColor(currentWeekColor, lineAwrActive), 
         _width=lineWidth, 
         _style=awrLineStyle, 
         _extend=awrExtend, 
         labelText='RWH', 
         labelStyle=sessionLabelStyle, 
         labelColor=currentWeekColor, 
         labelTextColor=_getLabelTextColor(currentWeekColor, lineAwrActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetTwo,
         showPrice=showPriceInLabel)
    
    _awrLowLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineAwrActive ? awrLow : na, 
         _color=_getLineColor(currentWeekColor, lineAwrActive), 
         _width=lineWidth, 
         _style=awrLineStyle, 
         _extend=awrExtend, 
         labelText='RWL', 
         labelStyle=sessionLabelStyle, 
         labelColor=currentWeekColor, 
         labelTextColor=_getLabelTextColor(currentWeekColor, lineAwrActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetTwo,
         showPrice=showPriceInLabel)
    
    _amrHighLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineAmrActive ? amrHigh : na, 
         _color=_getLineColor(amrColor, lineAmrActive), 
         _width=lineWidth, 
         _style=amrLineStyle, 
         _extend=amrExtend, 
         labelText='RMH', 
         labelStyle=sessionLabelStyle, 
         labelColor=amrColor, 
         labelTextColor=_getLabelTextColor(amrColor, lineAmrActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)
    
    _amrLowLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineAmrActive ? amrLow : na, 
         _color=_getLineColor(amrColor, lineAmrActive), 
         _width=lineWidth, 
         _style=amrLineStyle, 
         _extend=amrExtend, 
         labelText='RML', 
         labelStyle=sessionLabelStyle, 
         labelColor=amrColor, 
         labelTextColor=_getLabelTextColor(amrColor, lineAmrActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)
    
    _hourlyEmaLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineHourlyEmaActive ? _50EmaHourly() : na, 
         _color=_getLineColor(hourlyEmaColor, lineHourlyEmaActive), 
         _width=lineWidth, 
         _style=hourlyEmaLineStyle, 
         _extend=hourlyEmaExtend, 
         labelText='50h', 
         labelStyle=sessionLabelStyle, 
         labelColor=hourlyEmaColor, 
         labelTextColor=_getLabelTextColor(hourlyEmaColor, lineHourlyEmaActive), 
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetThree,
         showPrice=showPriceInLabel)
    
    _dailySmaLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineDailySmaActive ? _20SmaDaily() : na, 
         _color=_getLineColor(yesterdayColor, lineDailySmaActive),
         _width=lineWidth, 
         _style=dailySmaLineStyle, 
         _extend=dailySmaExtend, 
         labelText='20d', 
         labelStyle=sessionLabelStyle, 
         labelColor=yesterdayColor,
         labelTextColor=_getLabelTextColor(yesterdayColor, lineDailySmaActive),
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetOne,
         showPrice=showPriceInLabel)
    
    _weeklySmaLineId = _drawLabelledLine(
         x1=x1, 
         x2=x2, 
         y=lineWeeklySmaActive ? _20SmaWeekly() : na, 
         _color=_getLineColor(lastWeekColor, lineWeeklySmaActive),
         _width=lineWidth, 
         _style=weeklySmaLineStyle, 
         _extend=weeklySmaExtend, 
         labelText='20w', 
         labelStyle=sessionLabelStyle, 
         labelColor=lastWeekColor,
         labelTextColor=_getLabelTextColor(lastWeekColor, lineWeeklySmaActive),
         labelSize=labelSize, 
         showLabel=labelVisible, 
         labelOffsetInBars=_offsetTwo,
         showPrice=showPriceInLabel)

    array.push(linesArray, _dailyOpenLineId)
    array.push(linesArray, _dailyHighLineId)
    array.push(linesArray, _dailyLowLineId)
    array.push(linesArray, _asianOpenLineId)
    array.push(linesArray, _asianHighLineId)
    array.push(linesArray, _asianLowLineId)
    array.push(linesArray, _nyOpenLineId)
    array.push(linesArray, _nyHighLineId)
    array.push(linesArray, _nyLowLineId)
    array.push(linesArray, _londonOpenLineId)
    array.push(linesArray, _londonHighLineId)
    array.push(linesArray, _psyHighLineId)
    array.push(linesArray, _psyLowLineId)
    array.push(linesArray, _athLineId)
    array.push(linesArray, _yesterdayHighLineId)
    array.push(linesArray, _yesterdayLowLineId)
    array.push(linesArray, _lastWeekHighLineId)
    array.push(linesArray, _lastWeekLowLineId)
    array.push(linesArray, _adrHighLineId)
    array.push(linesArray, _adrLowLineId)
    array.push(linesArray, _awrHighLineId)
    array.push(linesArray, _awrLowLineId)
    array.push(linesArray, _amrHighLineId)
    array.push(linesArray, _amrLowLineId)
    array.push(linesArray, _hourlyEmaLineId)
    array.push(linesArray, _dailySmaLineId)
    array.push(linesArray, _weeklySmaLineId)
    
   


var line[] _lines = array.new_line(0)
_drawSessionLines(_lines)

